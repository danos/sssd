--- a/src/config/etc/sssd.api.d/sssd-tacplus.conf
+++ b/src/config/etc/sssd.api.d/sssd-tacplus.conf
@@ -8,3 +8,4 @@
 [provider/tacplus/auth]
 tacplus_service = str, None, false
 tacplus_proto = str, None, false
+tacplus_secrets = str, None, false
--- a/src/providers/tacplus/tacplus_common.c
+++ b/src/providers/tacplus/tacplus_common.c
@@ -26,6 +26,7 @@
     { "tacplus_shell", DP_OPT_STRING, { "/bin/bash" }, NULL_STRING },
     { "tacplus_service", DP_OPT_STRING, { "shell" }, NULL_STRING },
     { "tacplus_proto", DP_OPT_STRING, { "login" }, NULL_STRING },
+    { "tacplus_secrets", DP_OPT_STRING, NULL_STRING, NULL_STRING },
     { "tacplus_user_gid", DP_OPT_NUMBER, { .number = 100 }, NULL_NUMBER },
     { "tacplus_homedir", DP_OPT_STRING, { "/home/%u" }, NULL_STRING },
 };
@@ -36,8 +37,9 @@
     be_req_terminate(req, dp_err, error, errstr);
 }
 
-int tacplus_author(const char *user, const char *service, const char *proto, const char *tty, const char *rhost,
-                   char **level, int *delete_user) {
+int tacplus_author(const char *user, const char *service, const char *proto,
+                   const char *secrets, const char *tty, const char *rhost,
+                   char **level, int *delete_user, bool *secrets_group) {
 
    int ret = TAC_PLUS_AUTHOR_STATUS_ERROR;
     DBusConnection *dconn;
@@ -48,6 +50,7 @@
     DBusMessageIter dictIter, dictEntryIter;
     const char *protocol = "protocol";
     const char *serv = "service";
+    const char *secr = "secrets";
     int status;
     const char *key;
     const char *sig = "{ss}";
@@ -96,6 +99,15 @@
     dbus_message_iter_append_basic (&dict, DBUS_TYPE_STRING, &service);
     dbus_message_iter_close_container(&array, &dict);
 
+    /* ...and now secrets...*/
+    if (secrets) {
+        dbus_message_iter_open_container (&array, DBUS_TYPE_DICT_ENTRY,
+                                          NULL, &dict);
+        dbus_message_iter_append_basic (&dict, DBUS_TYPE_STRING, &secr);
+        dbus_message_iter_append_basic (&dict, DBUS_TYPE_STRING, &secrets);
+        dbus_message_iter_close_container(&array, &dict);
+    }
+
     /* ...done. */
     dbus_message_iter_close_container(&iter, &array);
 
@@ -130,6 +142,33 @@
                     *level = strdup(tmp);
                 }
             }
+            else if (strcmp("secrets*", key) == 0) {
+                dbus_message_iter_next(&dictEntryIter);
+                dbus_message_iter_get_basic(&dictEntryIter, &tmp);
+                if (secrets_group)
+                    *secrets_group = !strcmp(tmp, "true");
+            }
+            else if ((strcmp("protocol=", key) == 0) ||
+                     strcmp("service=", key) == 0) {
+                /*
+                 * When request contains optional attributes, the server may
+                 * return all of our original supplied mandatory attributes.
+                 * Ignore them if their values are identical to those we
+                 * provided on the request.
+                 */
+                const char *input_val = (key[0] == 'p') ?
+                    proto : service;
+                dbus_message_iter_next(&dictEntryIter);
+                dbus_message_iter_get_basic(&dictEntryIter, &tmp);
+                if (strcmp(tmp, input_val) != 0) {
+                    sss_log(SSS_LOG_WARNING,
+                            "Unsupported value for mandatory TACACS+ "
+                            "attribute '%s:%s'",
+                            key, tmp);
+                    status = TAC_PLUS_AUTHOR_STATUS_FAIL;
+                    break;
+                }
+            }
             else {
                 char *key_nosep = NULL;
                 if (strlen(key) > 1)
--- a/src/providers/tacplus/tacplus_common.h
+++ b/src/providers/tacplus/tacplus_common.h
@@ -75,6 +75,7 @@
     TACPLUS_SHELL,
     TACPLUS_SERVICE,
     TACPLUS_PROTO,
+    TACPLUS_SECRETS,
     TACPLUS_USER_GID,
     TACPLUS_HOMEDIR,
 
@@ -101,7 +102,9 @@
 
 /* tacplus AAA */
 int tacplus_author(const char *user, const char *service, const char *proto,
-               const char *tty, const char *rhost, char **level, int *delete_user);
+                   const char *secrets,
+                   const char *tty, const char *rhost, char **level,
+                   int *delete_user, bool *secrets_group);
 
 DBusConnection * tacplus_connect_daemon(void);
 int tacplus_validate_reply_msg(DBusError *);
--- a/src/providers/tacplus/tacplus_id.c
+++ b/src/providers/tacplus/tacplus_id.c
@@ -228,7 +228,7 @@
 static int vyatta_extension(struct sss_domain_info *dom,
                             const char *name, int uid, int gid,
                             const char *shell, const char *homedir,
-                            const char *level) {
+                            const char *level, bool secrets_group) {
 
     int i, ret;
     struct sysdb_attrs *attrs = NULL;
@@ -264,6 +264,14 @@
        return ret;
     }
 
+    if (secrets_group)
+        ret = add_string_to_list(tmpctx, "secrets", &level_groups);
+    else
+        ret = add_string_to_list(tmpctx, "secrets", &delete_groups);
+
+    if (ret)
+        return ret;
+
     /* Create the required local groups in the SYSDB on-the-fly */
     if (level_groups) {
         for (i=0; level_groups[i]; i++) {
@@ -328,12 +336,13 @@
                        const char *name)
 {
     int ret;
-    char *service, *proto, *homedir_template, *homedir, *shell;
+    char *service, *proto, *homedir_template, *homedir, *shell, *secrets;
     char *level = NULL;
     TALLOC_CTX *tmpctx;
     struct sysdb_attrs *attrs = NULL;
     int gid, uid = 0;
     int delete_user;
+    bool secrets_group = false;
     struct sss_nss_homedir_ctx homedir_ctx;
 
 
@@ -349,6 +358,7 @@
     shell = dp_opt_get_string(ctx->opts->basic, TACPLUS_SHELL);
     service = dp_opt_get_string(ctx->opts->basic, TACPLUS_SERVICE);
     proto = dp_opt_get_string(ctx->opts->basic, TACPLUS_PROTO);
+    secrets = dp_opt_get_string(ctx->opts->basic, TACPLUS_SECRETS);
     gid = dp_opt_get_int(ctx->opts->basic, TACPLUS_USER_GID);
     homedir_template = dp_opt_get_string(ctx->opts->basic, TACPLUS_HOMEDIR);
 
@@ -365,7 +375,8 @@
         goto done;
     }
 
-    ret = tacplus_author(name, service, proto, "" /*tty*/, "" /*rhost*/, &level, &delete_user);
+    ret = tacplus_author(name, service, proto, secrets, "" /*tty*/,
+                         "" /*rhost*/, &level, &delete_user, &secrets_group);
 
     DEBUG(SSSDBG_TRACE_FUNC,
           "tacplus -> authorization for '%s' status: <%d>",
@@ -387,7 +398,8 @@
 
 
 #ifndef NO_VYATTA_EXTENSION
-    ret = vyatta_extension(dom, name, uid, gid, shell, homedir, level);
+    ret = vyatta_extension(dom, name, uid, gid, shell,
+                           homedir, level, secrets_group);
 #else
     attrs = sysdb_new_attrs(NULL);
     if (!attrs) {
