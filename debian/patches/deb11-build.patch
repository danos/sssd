--- a/src/providers/proxy/proxy_id.c
+++ b/src/providers/proxy/proxy_id.c
@@ -214,7 +214,7 @@
 
     DEBUG(SSSDBG_TRACE_FUNC,
           "User %s does not exist (or is invalid) on remote server,"
-           " deleting!\n", name);
+           " deleting!\n", name ? name : "(nil)");
     ret = sysdb_delete_user(domain, name, uid);
     if (ret == ENOENT) {
         ret = EOK;
--- a/src/tests/common_check.c
+++ b/src/tests/common_check.c
@@ -29,12 +29,12 @@
 
 void ck_leak_check_setup(void)
 {
-    fail_unless(leak_check_setup() == true,
+    ck_assert_msg(leak_check_setup() == true,
                 "Cannot set up leaks test: %s\n", check_leaks_err_msg());
 }
 
 void ck_leak_check_teardown(void)
 {
-    fail_unless(leak_check_teardown() == true,
+    ck_assert_msg(leak_check_teardown() == true,
                 "Cannot tear down leaks test: %s\n", check_leaks_err_msg());
 }
--- a/src/tests/ad_ldap_opt-tests.c
+++ b/src/tests/ad_ldap_opt-tests.c
@@ -41,11 +41,11 @@
 
     ret = compare_dp_options(default_basic_opts, SDAP_OPTS_BASIC,
                              ad_def_ldap_opts);
-    fail_unless(ret == EOK, "[%s]", strerror(ret));
+    ck_assert_msg(ret == EOK, "[%s]", strerror(ret));
 
     ret = compare_dp_options(default_krb5_opts, KRB5_OPTS,
                              ad_def_krb5_opts);
-    fail_unless(ret == EOK, "[%s]", strerror(ret));
+    ck_assert_msg(ret == EOK, "[%s]", strerror(ret));
 }
 END_TEST
 
@@ -56,27 +56,27 @@
     /* General Attributes */
     ret = compare_sdap_attr_maps(generic_attr_map, SDAP_AT_GENERAL,
                                  ad_2008r2_attr_map);
-    fail_unless(ret == EOK, "[%s]", strerror(ret));
+    ck_assert_msg(ret == EOK, "[%s]", strerror(ret));
 
     /* User Attributes */
     ret = compare_sdap_attr_maps(rfc2307_user_map, SDAP_OPTS_USER,
                                  ad_2008r2_user_map);
-    fail_unless(ret == EOK, "[%s]", strerror(ret));
+    ck_assert_msg(ret == EOK, "[%s]", strerror(ret));
 
     /* Group Attributes */
     ret = compare_sdap_attr_maps(rfc2307_group_map, SDAP_OPTS_GROUP,
                                  ad_2008r2_group_map);
-    fail_unless(ret == EOK, "[%s]", strerror(ret));
+    ck_assert_msg(ret == EOK, "[%s]", strerror(ret));
 
     /* Netgroup Attributes */
     ret = compare_sdap_attr_maps(netgroup_map, SDAP_OPTS_NETGROUP,
                                  ad_netgroup_map);
-    fail_unless(ret == EOK, "[%s]", strerror(ret));
+    ck_assert_msg(ret == EOK, "[%s]", strerror(ret));
 
     /* Service Attributes */
     ret = compare_sdap_attr_maps(service_map, SDAP_OPTS_SERVICES,
                                  ad_service_map);
-    fail_unless(ret == EOK, "[%s]", strerror(ret));
+    ck_assert_msg(ret == EOK, "[%s]", strerror(ret));
 }
 END_TEST
 
--- a/src/tests/auth-tests.c
+++ b/src/tests/auth-tests.c
@@ -62,13 +62,13 @@
     /* (relative to current dir) */
     ret = mkdir(TESTS_PATH, 0775);
     if (ret == -1 && errno != EEXIST) {
-        fail("Could not create %s directory", TESTS_PATH);
+        ck_abort_msg("Could not create %s directory", TESTS_PATH);
         return EFAULT;
     }
 
     test_ctx = talloc_zero(NULL, struct sysdb_test_ctx);
     if (test_ctx == NULL) {
-        fail("Could not allocate memory for test context");
+        ck_abort_msg("Could not allocate memory for test context");
         return ENOMEM;
     }
 
@@ -77,14 +77,14 @@
      */
     test_ctx->ev = tevent_context_init(test_ctx);
     if (test_ctx->ev == NULL) {
-        fail("Could not create event context");
+        ck_abort_msg("Could not create event context");
         talloc_free(test_ctx);
         return EIO;
     }
 
     conf_db = talloc_asprintf(test_ctx, "%s/%s", TESTS_PATH, TEST_CONF_FILE);
     if (conf_db == NULL) {
-        fail("Out of memory, aborting!");
+        ck_abort_msg("Out of memory, aborting!");
         talloc_free(test_ctx);
         return ENOMEM;
     }
@@ -93,7 +93,7 @@
     /* Connect to the conf db */
     ret = confdb_init(test_ctx, &test_ctx->confdb, conf_db);
     if (ret != EOK) {
-        fail("Could not initialize connection to the confdb");
+        ck_abort_msg("Could not initialize connection to the confdb");
         talloc_free(test_ctx);
         return ret;
     }
@@ -102,7 +102,7 @@
     ret = confdb_add_param(test_ctx->confdb, true,
                            "config/sssd", "domains", val);
     if (ret != EOK) {
-        fail("Could not initialize domains placeholder");
+        ck_abort_msg("Could not initialize domains placeholder");
         talloc_free(test_ctx);
         return ret;
     }
@@ -111,7 +111,7 @@
     ret = confdb_add_param(test_ctx->confdb, true,
                            "config/domain/LOCAL", "id_provider", val);
     if (ret != EOK) {
-        fail("Could not initialize provider");
+        ck_abort_msg("Could not initialize provider");
         talloc_free(test_ctx);
         return ret;
     }
@@ -120,7 +120,7 @@
     ret = confdb_add_param(test_ctx->confdb, true,
                            "config/domain/LOCAL", "enumerate", val);
     if (ret != EOK) {
-        fail("Could not initialize LOCAL domain");
+        ck_abort_msg("Could not initialize LOCAL domain");
         talloc_free(test_ctx);
         return ret;
     }
@@ -129,7 +129,7 @@
     ret = confdb_add_param(test_ctx->confdb, true,
                            "config/domain/LOCAL", "cache_credentials", val);
     if (ret != EOK) {
-        fail("Could not initialize LOCAL domain");
+        ck_abort_msg("Could not initialize LOCAL domain");
         talloc_free(test_ctx);
         return ret;
     }
@@ -137,7 +137,7 @@
     ret = sssd_domain_init(test_ctx, test_ctx->confdb, "local",
                            TESTS_PATH, &test_ctx->domain);
     if (ret != EOK) {
-        fail("Could not initialize connection to the sysdb (%d)", ret);
+        ck_abort_msg("Could not initialize connection to the sysdb (%d)", ret);
         talloc_free(test_ctx);
         return ret;
     }
@@ -165,45 +165,45 @@
 
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
-    fail_unless(ret == EOK, "Could not set up the test");
+    ck_assert_msg(ret == EOK, "Could not set up the test");
 
     val[0] = talloc_asprintf(test_ctx, "%u", offline_failed_login_attempts);
-    fail_unless(val[0] != NULL, "talloc_sprintf failed");
+    ck_assert_msg(val[0] != NULL, "talloc_sprintf failed");
     ret = confdb_add_param(test_ctx->confdb, true,
                            "config/pam", CONFDB_PAM_FAILED_LOGIN_ATTEMPTS, val);
-    fail_unless(ret == EOK, "Could not set offline_failed_login_attempts");
+    ck_assert_msg(ret == EOK, "Could not set offline_failed_login_attempts");
 
     val[0] = talloc_asprintf(test_ctx, "%u", offline_failed_login_delay);
     ret = confdb_add_param(test_ctx->confdb, true,
                            "config/pam", CONFDB_PAM_FAILED_LOGIN_DELAY, val);
-    fail_unless(ret == EOK, "Could not set offline_failed_login_delay");
+    ck_assert_msg(ret == EOK, "Could not set offline_failed_login_delay");
 
     ldb_msg = ldb_msg_new(test_ctx);
-    fail_unless(ldb_msg != NULL, "ldb_msg_new failed");
+    ck_assert_msg(ldb_msg != NULL, "ldb_msg_new failed");
 
     ret = ldb_msg_add_fmt(ldb_msg, SYSDB_FAILED_LOGIN_ATTEMPTS, "%u",
                           failed_login_attempts);
-    fail_unless(ret == EOK, "ldb_msg_add_string failed");
+    ck_assert_msg(ret == EOK, "ldb_msg_add_string failed");
 
     ret = ldb_msg_add_fmt(ldb_msg, SYSDB_LAST_FAILED_LOGIN, "%lld",
                           (long long) last_failed_login);
-    fail_unless(ret == EOK, "ldb_msg_add_string failed");
+    ck_assert_msg(ret == EOK, "ldb_msg_add_string failed");
 
     ret = check_failed_login_attempts(test_ctx->confdb, ldb_msg,
                                       &returned_failed_login_attempts,
                                       &delayed_until);
-    fail_unless(ret == expected_result,
+    ck_assert_msg(ret == expected_result,
                 "check_failed_login_attempts returned wrong error code, "
                 "expected [%d], got [%d]", expected_result, ret);
 
-    fail_unless(returned_failed_login_attempts == expected_counter,
+    ck_assert_msg(returned_failed_login_attempts == expected_counter,
                 "check_failed_login_attempts returned wrong number of failed "
                 "login attempts, expected [%d], got [%d]",
                 expected_counter, failed_login_attempts);
 
-    fail_unless(delayed_until == expected_delay,
+    ck_assert_msg(delayed_until == expected_delay,
                 "check_failed_login_attempts wrong delay, "
-                "expected [%d], got [%d]",
+                "expected [%ld], got [%ld]",
                 expected_delay, delayed_until);
 
     talloc_free(test_ctx);
--- a/src/tests/check_and_open-tests.c
+++ b/src/tests/check_and_open-tests.c
@@ -46,12 +46,12 @@
     mode_t old_umask;
 
     filename = strdup(FILENAME_TEMPLATE);
-    fail_unless(filename != NULL, "strdup failed");
+    ck_assert_msg(filename != NULL, "strdup failed");
 
     old_umask = umask(SSS_DFL_UMASK);
     ret = mkstemp(filename);
     umask(old_umask);
-    fail_unless(ret != -1, "mkstemp failed [%d][%s]", errno, strerror(errno));
+    ck_assert_msg(ret != -1, "mkstemp failed [%d][%s]", errno, strerror(errno));
     close(ret);
 
     uid = getuid();
@@ -66,13 +66,13 @@
 
     if (fd != -1) {
         ret = close(fd);
-        fail_unless(ret == 0, "close failed [%d][%s]", errno, strerror(errno));
+        ck_assert_msg(ret == 0, "close failed [%d][%s]", errno, strerror(errno));
     }
 
-    fail_unless(filename != NULL, "unknown filename");
+    ck_assert_msg(filename != NULL, "unknown filename");
     ret = unlink(filename);
     free(filename);
-    fail_unless(ret == 0, "unlink failed [%d][%s]", errno, strerror(errno));
+    ck_assert_msg(ret == 0, "unlink failed [%d][%s]", errno, strerror(errno));
 }
 
 START_TEST(test_wrong_filename)
@@ -81,9 +81,9 @@
 
     ret = check_and_open_readonly("/bla/bla/bla", &fd,
                                   uid, gid, S_IFREG|mode, 0);
-    fail_unless(ret == ENOENT,
+    ck_assert_msg(ret == ENOENT,
                 "check_and_open_readonly succeeded on non-existing file");
-    fail_unless(fd == -1, "check_and_open_readonly file descriptor not -1");
+    ck_assert_msg(fd == -1, "check_and_open_readonly file descriptor not -1");
 }
 END_TEST
 
@@ -95,20 +95,20 @@
 
     newpath_length = strlen(filename) + strlen(SUFFIX) + 1;
     newpath = malloc((newpath_length) * sizeof(char));
-    fail_unless(newpath != NULL, "malloc failed");
+    ck_assert_msg(newpath != NULL, "malloc failed");
 
     ret = snprintf(newpath, newpath_length, "%s%s", filename, SUFFIX);
-    fail_unless(ret == newpath_length - 1,
-                "snprintf failed: expected [%d] got [%d]", newpath_length -1,
+    ck_assert_msg(ret == newpath_length - 1,
+                "snprintf failed: expected [%ld] got [%d]", newpath_length -1,
                                                            ret);
 
     ret = symlink(filename, newpath);
-    fail_unless(ret == 0, "symlink failed [%d][%s]", ret, strerror(errno));
+    ck_assert_msg(ret == 0, "symlink failed [%d][%s]", ret, strerror(errno));
 
     ret = check_file(newpath, uid, gid, S_IFREG|mode, 0, NULL, false);
     unlink(newpath);
 
-    fail_unless(ret == EINVAL,
+    ck_assert_msg(ret == EINVAL,
                 "check_and_open_readonly succeeded on symlink");
     free(newpath);
 }
@@ -122,20 +122,20 @@
 
     newpath_length = strlen(filename) + strlen(SUFFIX) + 1;
     newpath = malloc((newpath_length) * sizeof(char));
-    fail_unless(newpath != NULL, "malloc failed");
+    ck_assert_msg(newpath != NULL, "malloc failed");
 
     ret = snprintf(newpath, newpath_length, "%s%s", filename, SUFFIX);
-    fail_unless(ret == newpath_length - 1,
-                "snprintf failed: expected [%d] got [%d]", newpath_length -1,
+    ck_assert_msg(ret == newpath_length - 1,
+                "snprintf failed: expected [%ld] got [%d]", newpath_length -1,
                                                            ret);
 
     ret = symlink(filename, newpath);
-    fail_unless(ret == 0, "symlink failed [%d][%s]", ret, strerror(errno));
+    ck_assert_msg(ret == 0, "symlink failed [%d][%s]", ret, strerror(errno));
 
     ret = check_file(newpath, uid, gid, S_IFREG|mode, 0, NULL, true);
     unlink(newpath);
 
-    fail_unless(ret == EOK,
+    ck_assert_msg(ret == EOK,
                 "check_and_open_readonly failed on symlink with follow=true");
     free(newpath);
 }
@@ -146,9 +146,9 @@
     int ret;
 
     ret = check_and_open_readonly("/dev/null", &fd, uid, gid, S_IFREG|mode, 0);
-    fail_unless(ret == EINVAL,
+    ck_assert_msg(ret == EINVAL,
                 "check_and_open_readonly succeeded on non-regular file");
-    fail_unless(fd == -1, "check_and_open_readonly file descriptor not -1");
+    ck_assert_msg(fd == -1, "check_and_open_readonly file descriptor not -1");
 }
 END_TEST
 
@@ -157,9 +157,9 @@
     int ret;
 
     ret = check_and_open_readonly(filename, &fd, uid+1, gid, S_IFREG|mode, 0);
-    fail_unless(ret == EINVAL,
+    ck_assert_msg(ret == EINVAL,
                 "check_and_open_readonly succeeded with wrong uid");
-    fail_unless(fd == -1, "check_and_open_readonly file descriptor not -1");
+    ck_assert_msg(fd == -1, "check_and_open_readonly file descriptor not -1");
 }
 END_TEST
 
@@ -168,9 +168,9 @@
     int ret;
 
     ret = check_and_open_readonly(filename, &fd, uid, gid+1, S_IFREG|mode, 0);
-    fail_unless(ret == EINVAL,
+    ck_assert_msg(ret == EINVAL,
                 "check_and_open_readonly succeeded with wrong gid");
-    fail_unless(fd == -1, "check_and_open_readonly file descriptor not -1");
+    ck_assert_msg(fd == -1, "check_and_open_readonly file descriptor not -1");
 }
 END_TEST
 
@@ -180,9 +180,9 @@
 
     ret = check_and_open_readonly(filename, &fd,
                                   uid, gid, S_IFREG|mode|S_IWOTH, 0);
-    fail_unless(ret == EINVAL,
+    ck_assert_msg(ret == EINVAL,
                 "check_and_open_readonly succeeded with wrong mode");
-    fail_unless(fd == -1, "check_and_open_readonly file descriptor not -1");
+    ck_assert_msg(fd == -1, "check_and_open_readonly file descriptor not -1");
 }
 END_TEST
 
@@ -191,9 +191,9 @@
     int ret;
 
     ret = check_and_open_readonly(filename, &fd, uid, gid, S_IFREG|mode, 0);
-    fail_unless(ret == EOK,
+    ck_assert_msg(ret == EOK,
                 "check_and_open_readonly failed");
-    fail_unless(fd >= 0,
+    ck_assert_msg(fd >= 0,
                 "check_and_open_readonly returned illegal file descriptor");
 }
 END_TEST
@@ -205,15 +205,15 @@
     errno_t my_errno;
 
     ret = check_and_open_readonly(filename, &fd, uid, gid, S_IFREG|mode, 0);
-    fail_unless(ret == EOK,
+    ck_assert_msg(ret == EOK,
                 "check_and_open_readonly failed");
-    fail_unless(fd >= 0,
+    ck_assert_msg(fd >= 0,
                 "check_and_open_readonly returned illegal file descriptor");
 
     size = write(fd, "abc", 3);
     my_errno = errno;
-    fail_unless(size == -1, "check_and_open_readonly file is not readonly");
-    fail_unless(my_errno == EBADF,
+    ck_assert_msg(size == -1, "check_and_open_readonly file is not readonly");
+    ck_assert_msg(my_errno == EBADF,
                 "write failed for other reason than readonly");
 }
 END_TEST
--- a/src/tests/common_check.h
+++ b/src/tests/common_check.h
@@ -25,12 +25,19 @@
 #ifndef __TESTS_COMMON_CHECK_H__
 #define __TESTS_COMMON_CHECK_H__
 
+#include <check.h>
+
 #include "tests/common.h"
 
 void ck_leak_check_setup(void);
 void ck_leak_check_teardown(void);
 
 #define ck_leaks_push(ctx) check_leaks_push(ctx)
-#define ck_leaks_pop(ctx) fail_unless(check_leaks_pop(ctx) == true, check_leaks_err_msg())
+#define ck_leaks_pop(ctx) ck_assert_msg(check_leaks_pop(ctx) == true, "%s", check_leaks_err_msg())
+
+#define sss_ck_fail_if_msg(expr, ...) \
+  (expr) ? \
+     _ck_assert_failed(__FILE__, __LINE__, "Assertion '"#expr"' failed" , ## __VA_ARGS__) : \
+     _mark_point(__FILE__, __LINE__)
 
 #endif /* __TESTS_COMMON_CHECK_H__ */
--- a/src/tests/debug-tests.c
+++ b/src/tests/debug-tests.c
@@ -29,6 +29,7 @@
 #include <string.h>
 #include "util/util.h"
 #include "tests/common.h"
+#include "tests/common_check.h"
 
 #define DEBUG_TEST_ERROR    -1
 #define DEBUG_TEST_NOK      1
@@ -54,61 +55,59 @@
     for (old_level = 0; old_level <= 9; old_level++) {
         expected_level |= levels[old_level];
 
-        char *msg = NULL;
-        msg = talloc_asprintf(NULL, "Invalid conversion of %d", old_level);
-        fail_unless(debug_convert_old_level(old_level) == expected_level, msg);
-        talloc_free(msg);
+	ck_assert_msg(debug_convert_old_level(old_level) == expected_level,
+		      "Invalid conversion of %d", old_level);
     }
 }
 END_TEST
 
 START_TEST(test_debug_convert_old_level_new_format)
 {
-    fail_unless(
+    ck_assert_msg(
         debug_convert_old_level(SSSDBG_UNRESOLVED) == SSSDBG_FATAL_FAILURE,
         "Invalid conversion of SSSDBG_UNRESOLVED"
     );
-    fail_unless(
+    ck_assert_msg(
         debug_convert_old_level(SSSDBG_FATAL_FAILURE) == SSSDBG_FATAL_FAILURE,
         "Invalid conversion of SSSDBG_FATAL_FAILURE"
     );
-    fail_unless(
+    ck_assert_msg(
         debug_convert_old_level(SSSDBG_CRIT_FAILURE) == SSSDBG_CRIT_FAILURE,
         "Invalid conversion of SSSDBG_CRIT_FAILURE"
     );
-    fail_unless(
+    ck_assert_msg(
         debug_convert_old_level(SSSDBG_OP_FAILURE) == SSSDBG_OP_FAILURE,
         "Invalid conversion of SSSDBG_OP_FAILURE"
     );
-    fail_unless(
+    ck_assert_msg(
         debug_convert_old_level(SSSDBG_MINOR_FAILURE) == SSSDBG_MINOR_FAILURE,
         "Invalid conversion of SSSDBG_MINOR_FAILURE"
     );
-    fail_unless(
+    ck_assert_msg(
         debug_convert_old_level(SSSDBG_CONF_SETTINGS) == SSSDBG_CONF_SETTINGS,
         "Invalid conversion of SSSDBG_CONF_SETTINGS"
     );
-    fail_unless(
+    ck_assert_msg(
         debug_convert_old_level(SSSDBG_FUNC_DATA) == SSSDBG_FUNC_DATA,
         "Invalid conversion of SSSDBG_FUNC_DATA"
     );
-    fail_unless(
+    ck_assert_msg(
         debug_convert_old_level(SSSDBG_TRACE_FUNC) == SSSDBG_TRACE_FUNC,
         "Invalid conversion of SSSDBG_TRACE_FUNC"
     );
-    fail_unless(
+    ck_assert_msg(
         debug_convert_old_level(SSSDBG_TRACE_LIBS) == SSSDBG_TRACE_LIBS,
         "Invalid conversion of SSSDBG_TRACE_LIBS"
     );
-    fail_unless(
+    ck_assert_msg(
         debug_convert_old_level(SSSDBG_TRACE_INTERNAL) == SSSDBG_TRACE_INTERNAL,
         "Invalid conversion of SSSDBG_TRACE_INTERNAL"
     );
-    fail_unless(
+    ck_assert_msg(
         debug_convert_old_level(SSSDBG_TRACE_ALL) == SSSDBG_TRACE_ALL,
         "Invalid conversion of SSSDBG_TRACE_ALL"
     );
-    fail_unless(
+    ck_assert_msg(
         debug_convert_old_level(SSSDBG_MASK_ALL) == SSSDBG_MASK_ALL,
         "Invalid conversion of SSSDBG_MASK_ALL"
     );
@@ -337,7 +336,6 @@
         SSSDBG_TRACE_INTERNAL,
         SSSDBG_TRACE_ALL
     };
-    char *error_msg;
 
     debug_timestamps = 0;
     debug_microseconds = 0;
@@ -351,15 +349,13 @@
         errno = 0;
         result = test_helper_debug_check_message(levels[i]);
 
-        if (result == DEBUG_TEST_ERROR) {
-            error_msg = strerror(errno);
-            fail(error_msg);
-        }
-
-        char *msg = NULL;
-        msg = talloc_asprintf(NULL, "Test of level %#.4x failed - message don't match", levels[i]);
-        fail_unless(result == EOK, msg);
-        talloc_free(msg);
+        sss_ck_fail_if_msg(result == DEBUG_TEST_ERROR,
+                "Expecting DEBUG_TEST_ERROR, got: %d, error: %s",
+                result, strerror(errno));
+
+        ck_assert_msg(result == EOK,
+                    "Test of level %#.4x failed - message don't match",
+                    levels[i]);
     }
 }
 END_TEST
@@ -380,7 +376,6 @@
         SSSDBG_TRACE_INTERNAL,
         SSSDBG_TRACE_ALL
     };
-    char *error_msg;
 
     debug_timestamps = 1;
     debug_microseconds = 0;
@@ -395,20 +390,16 @@
         errno = 0;
         result = test_helper_debug_check_message(levels[i]);
 
-        if (result == DEBUG_TEST_ERROR) {
-            error_msg = strerror(errno);
-            fail(error_msg);
-        }
-
-        char *msg = NULL;
-
-        msg = talloc_asprintf(NULL, "Test of level %#.4x failed - invalid timestamp", levels[i]);
-        fail_if(result == DEBUG_TEST_NOK_TS, msg);
-        talloc_free(msg);
-
-        msg = talloc_asprintf(NULL, "Test of level %#.4x failed - message don't match", levels[i]);
-        fail_unless(result == EOK, msg);
-        talloc_free(msg);
+        sss_ck_fail_if_msg(result == DEBUG_TEST_ERROR,
+                "Expecting DEBUG_TEST_ERROR, got: %d, error: %s",
+                result, strerror(errno));
+
+        sss_ck_fail_if_msg(result == DEBUG_TEST_NOK_TS,
+                "Test of level %#.4x failed - invalid timestamp", levels[i]);
+
+        ck_assert_msg(result == EOK,
+                    "Test of level %#.4x failed - message don't match",
+                    levels[i]);
     }
 }
 END_TEST
@@ -429,7 +420,6 @@
         SSSDBG_TRACE_INTERNAL,
         SSSDBG_TRACE_ALL
     };
-    char *error_msg;
 
     debug_timestamps = 1;
     debug_microseconds = 1;
@@ -444,20 +434,16 @@
         errno = 0;
         result = test_helper_debug_check_message(levels[i]);
 
-        if (result == DEBUG_TEST_ERROR) {
-            error_msg = strerror(errno);
-            fail(error_msg);
-        }
-
-        char *msg = NULL;
-
-        msg = talloc_asprintf(NULL, "Test of level %#.4x failed - invalid timestamp", levels[i]);
-        fail_if(result == DEBUG_TEST_NOK_TS, msg);
-        talloc_free(msg);
-
-        msg = talloc_asprintf(NULL, "Test of level %#.4x failed - message don't match", levels[i]);
-        fail_unless(result == EOK, msg);
-        talloc_free(msg);
+        sss_ck_fail_if_msg(result == DEBUG_TEST_ERROR,
+                "Expecting DEBUG_TEST_ERROR, got: %d, error: %s",
+                result, strerror(errno));
+
+        sss_ck_fail_if_msg(result == DEBUG_TEST_NOK_TS,
+                "Test of level %#.4x failed - invalid timestamp", levels[i]);
+
+        ck_assert_msg(result == EOK,
+                    "Test of level %#.4x failed - message don't match",
+                    levels[i]);
     }
 }
 END_TEST
@@ -479,7 +465,6 @@
         SSSDBG_TRACE_INTERNAL,
         SSSDBG_TRACE_ALL
     };
-    char *error_msg;
 
     debug_timestamps = 0;
     debug_microseconds = 0;
@@ -494,17 +479,13 @@
         errno = 0;
         result = test_helper_debug_is_empty_message(levels[i]);
 
-        if (result == DEBUG_TEST_ERROR) {
-            error_msg = strerror(errno);
-            fail(error_msg);
-        }
-
-        char *msg = NULL;
-        msg = talloc_asprintf(NULL,
-                              "Test of level %#.4x failed - message has been written",
-                              levels[i]);
-        fail_unless(result == EOK, msg);
-        talloc_free(msg);
+        sss_ck_fail_if_msg(result == DEBUG_TEST_ERROR,
+                "Expecting DEBUG_TEST_ERROR, got: %d, error: %s",
+                result, strerror(errno));
+
+        ck_assert_msg(result == EOK,
+                    "Test of level %#.4x failed - message has been written",
+                    levels[i]);
     }
 }
 END_TEST
@@ -526,7 +507,6 @@
         SSSDBG_TRACE_INTERNAL,
         SSSDBG_TRACE_ALL
     };
-    char *error_msg;
 
     debug_timestamps = 0;
     debug_microseconds = 0;
@@ -541,17 +521,13 @@
         errno = 0;
         result = test_helper_debug_is_empty_message(levels[i]);
 
-        if (result == DEBUG_TEST_ERROR) {
-            error_msg = strerror(errno);
-            fail(error_msg);
-        }
-
-        char *msg = NULL;
-        msg = talloc_asprintf(NULL,
-                        "Test of level %#.4x failed - message has been written",
-                        levels[i]);
-        fail_unless(result == EOK, msg);
-        talloc_free(msg);
+        sss_ck_fail_if_msg(result == DEBUG_TEST_ERROR,
+                "Expecting DEBUG_TEST_ERROR, got: %d, error: %s",
+                result, strerror(errno));
+
+        ck_assert_msg(result == EOK,
+                    "Test of level %#.4x failed - message has been written",
+                    levels[i]);
     }
 }
 END_TEST
@@ -573,7 +549,6 @@
         SSSDBG_TRACE_INTERNAL,
         SSSDBG_TRACE_ALL
     };
-    char *error_msg;
 
     debug_timestamps = 0;
     debug_microseconds = 1;
@@ -587,17 +562,13 @@
         errno = 0;
         result = test_helper_debug_is_empty_message(levels[i]);
 
-        if (result == DEBUG_TEST_ERROR) {
-            error_msg = strerror(errno);
-            fail(error_msg);
-        }
-
-        char *msg = NULL;
-        msg = talloc_asprintf(NULL,
-                        "Test of level %#.4x failed - message has been written",
-                        levels[i]);
-        fail_unless(result == EOK, msg);
-        talloc_free(msg);
+        sss_ck_fail_if_msg(result == DEBUG_TEST_ERROR,
+                "Expecting DEBUG_TEST_ERROR, got: %d, error: %s",
+                result, strerror(errno));
+
+        ck_assert_msg(result == EOK,
+                    "Test of level %#.4x failed - message has been written",
+                    levels[i]);
     }
 }
 END_TEST
@@ -623,10 +594,9 @@
 
     for (i = 0; i <= 9; i++) {
         result = DEBUG_IS_SET(levels[i]);
-        char *msg = NULL;
-        msg = talloc_asprintf(NULL, "Test of level %#.4x failed - result is 0x%.4x", levels[i], result);
-        fail_unless(result > 0, msg);
-        talloc_free(msg);
+        ck_assert_msg(result > 0,
+                    "Test of level %#.4x failed - result is 0x%.4x",
+                    levels[i], result);
     }
 }
 END_TEST
@@ -653,10 +623,9 @@
         debug_level = all_set & ~levels[i];
 
         result = DEBUG_IS_SET(levels[i]);
-        char *msg = NULL;
-        msg = talloc_asprintf(NULL, "Test of level %#.4x failed - result is 0x%.4x", levels[i], result);
-        fail_unless(result == 0, msg);
-        talloc_free(msg);
+        ck_assert_msg(result == 0,
+                    "Test of level %#.4x failed - result is 0x%.4x",
+                    levels[i], result);
     }
 }
 END_TEST
--- a/src/tests/dlopen-tests.c
+++ b/src/tests/dlopen-tests.c
@@ -32,6 +32,7 @@
 #include <check.h>
 #include <dirent.h>
 #include "tests/common.h"
+#include "tests/common_check.h"
 
 #define LIBPFX ABS_BUILD_DIR "/" LT_OBJDIR
 
@@ -224,7 +225,7 @@
 
     for (i = 0; so[i].name != NULL; i++) {
         ok = recursive_dlopen(so[i].libs, 0, &errmsg);
-        fail_unless(ok, "Error opening %s: [%s]", so[i].name, errmsg);
+        ck_assert_msg(ok, "Error opening %s: [%s]", so[i].name, errmsg);
 
         remove_library_from_list(so[i].name, found_libraries,
                                  found_libraries_size);
--- a/src/tests/files-tests.c
+++ b/src/tests/files-tests.c
@@ -34,6 +34,7 @@
 #include "config.h"
 #include "util/util.h"
 #include "tests/common.h"
+#include "tests/common_check.h"
 
 #define TESTS_PATH "tp_" BASE_FILE_STEM
 
@@ -89,16 +90,16 @@
     int ret;
 
     fd = open(name, O_WRONLY | O_CREAT | O_TRUNC, 0700);
-    fail_if(fd == -1, "Cannot create simple file\n");
+    sss_ck_fail_if_msg(fd == -1, "Cannot create simple file\n");
 
     size = write(fd, "abc", 3);
-    fail_if(size == -1, "Cannot write to file\n");
+    sss_ck_fail_if_msg(size == -1, "Cannot write to file\n");
 
     ret = fsync(fd);
-    fail_if(ret == -1, "Cannot sync file\n");
+    sss_ck_fail_if_msg(ret == -1, "Cannot sync file\n");
 
     ret = close(fd);
-    fail_if(ret == -1, "Cannot close file\n");
+    sss_ck_fail_if_msg(ret == -1, "Cannot close file\n");
 
     return ret;
 }
@@ -109,46 +110,46 @@
     char origpath[PATH_MAX+1];
 
     errno = 0;
-    fail_unless(getcwd(origpath, PATH_MAX) == origpath, "Cannot getcwd\n");
-    fail_unless(errno == 0, "Cannot getcwd\n");
+    ck_assert_msg(getcwd(origpath, PATH_MAX) == origpath, "Cannot getcwd\n");
+    ck_assert_msg(errno == 0, "Cannot getcwd\n");
 
     DEBUG(SSSDBG_FUNC_DATA, "About to delete %s\n", dir_path);
 
     /* create a file */
     ret = chdir(dir_path);
-    fail_if(ret == -1, "Cannot chdir1\n");
+    sss_ck_fail_if_msg(ret == -1, "Cannot chdir1\n");
 
     ret = create_simple_file("bar", "bar");
-    fail_if(ret == -1, "Cannot create file1\n");
+    sss_ck_fail_if_msg(ret == -1, "Cannot create file1\n");
 
     /* create a subdir and file inside it */
     ret = mkdir("subdir", 0700);
-    fail_if(ret == -1, "Cannot create subdir\n");
+    sss_ck_fail_if_msg(ret == -1, "Cannot create subdir\n");
 
     ret = chdir("subdir");
-    fail_if(ret == -1, "Cannot chdir\n");
+    sss_ck_fail_if_msg(ret == -1, "Cannot chdir\n");
 
     ret = create_simple_file("foo", "foo");
-    fail_if(ret == -1, "Cannot create file\n");
+    sss_ck_fail_if_msg(ret == -1, "Cannot create file\n");
 
     /* create another subdir, empty this time */
     ret = mkdir("subdir2", 0700);
-    fail_if(ret == -1, "Cannot create subdir\n");
+    sss_ck_fail_if_msg(ret == -1, "Cannot create subdir\n");
 
     ret = chdir(origpath);
-    fail_if(ret == -1, "Cannot chdir2\n");
+    sss_ck_fail_if_msg(ret == -1, "Cannot chdir2\n");
 
     /* go back */
     ret = chdir(origpath);
-    fail_if(ret == -1, "Cannot chdir\n");
+    sss_ck_fail_if_msg(ret == -1, "Cannot chdir\n");
 
     /* and finally wipe it out.. */
     ret = sss_remove_tree(dir_path);
-    fail_unless(ret == EOK, "remove_tree failed\n");
+    ck_assert_msg(ret == EOK, "remove_tree failed\n");
 
     /* check if really gone */
     ret = access(dir_path, F_OK);
-    fail_unless(ret == -1, "directory still there after remove_tree\n");
+    ck_assert_msg(ret == -1, "directory still there after remove_tree\n");
 }
 END_TEST
 
@@ -158,49 +159,49 @@
     char origpath[PATH_MAX+1];
 
     errno = 0;
-    fail_unless(getcwd(origpath, PATH_MAX) == origpath, "Cannot getcwd\n");
-    fail_unless(errno == 0, "Cannot getcwd\n");
+    ck_assert_msg(getcwd(origpath, PATH_MAX) == origpath, "Cannot getcwd\n");
+    ck_assert_msg(errno == 0, "Cannot getcwd\n");
 
     DEBUG(SSSDBG_FUNC_DATA, "About to delete %s\n", dir_path);
 
     /* create a file */
     ret = chdir(dir_path);
-    fail_if(ret == -1, "Cannot chdir1\n");
+    sss_ck_fail_if_msg(ret == -1, "Cannot chdir1\n");
 
     ret = create_simple_file("bar", "bar");
-    fail_if(ret == -1, "Cannot create file1\n");
+    sss_ck_fail_if_msg(ret == -1, "Cannot create file1\n");
 
     /* create a subdir and file inside it */
     ret = mkdir("subdir", 0700);
-    fail_if(ret == -1, "Cannot create subdir\n");
+    sss_ck_fail_if_msg(ret == -1, "Cannot create subdir\n");
 
     ret = chdir("subdir");
-    fail_if(ret == -1, "Cannot chdir\n");
+    sss_ck_fail_if_msg(ret == -1, "Cannot chdir\n");
 
     ret = create_simple_file("foo", "foo");
-    fail_if(ret == -1, "Cannot create file\n");
+    sss_ck_fail_if_msg(ret == -1, "Cannot create file\n");
 
     /* create another subdir, empty this time */
     ret = mkdir("subdir2", 0700);
-    fail_if(ret == -1, "Cannot create subdir\n");
+    sss_ck_fail_if_msg(ret == -1, "Cannot create subdir\n");
 
     ret = chdir(origpath);
-    fail_if(ret == -1, "Cannot chdir2\n");
+    sss_ck_fail_if_msg(ret == -1, "Cannot chdir2\n");
 
     /* go back */
     ret = chdir(origpath);
-    fail_if(ret == -1, "Cannot chdir\n");
+    sss_ck_fail_if_msg(ret == -1, "Cannot chdir\n");
 
     /* and finally wipe it out.. */
     ret = sss_remove_subtree(dir_path);
-    fail_unless(ret == EOK, "remove_subtree failed\n");
+    ck_assert_msg(ret == EOK, "remove_subtree failed\n");
 
     /* check if really gone */
     ret = access(dir_path, F_OK);
-    fail_unless(ret == 0, "directory was deleted\n");
+    ck_assert_msg(ret == 0, "directory was deleted\n");
 
     ret = rmdir(dir_path);
-    fail_unless(ret == 0, "unable to delete root directory\n");
+    ck_assert_msg(ret == 0, "unable to delete root directory\n");
 }
 END_TEST
 
@@ -212,43 +213,43 @@
     int fd = -1;
 
     errno = 0;
-    fail_unless(getcwd(origpath, PATH_MAX) == origpath, "Cannot getcwd\n");
-    fail_unless(errno == 0, "Cannot getcwd\n");
+    ck_assert_msg(getcwd(origpath, PATH_MAX) == origpath, "Cannot getcwd\n");
+    ck_assert_msg(errno == 0, "Cannot getcwd\n");
 
     /* create a file */
     ret = chdir(dir_path);
-    fail_if(ret == -1, "Cannot chdir1\n");
+    sss_ck_fail_if_msg(ret == -1, "Cannot chdir1\n");
 
     ret = create_simple_file("bar", "bar");
-    fail_if(ret == -1, "Cannot create file1\n");
+    sss_ck_fail_if_msg(ret == -1, "Cannot create file1\n");
 
     /* create a subdir and file inside it */
     ret = mkdir("subdir", 0700);
-    fail_if(ret == -1, "Cannot create subdir\n");
+    sss_ck_fail_if_msg(ret == -1, "Cannot create subdir\n");
 
     ret = chdir("subdir");
-    fail_if(ret == -1, "Cannot chdir\n");
+    sss_ck_fail_if_msg(ret == -1, "Cannot chdir\n");
 
     ret = create_simple_file("foo", "foo");
-    fail_if(ret == -1, "Cannot create file\n");
+    sss_ck_fail_if_msg(ret == -1, "Cannot create file\n");
 
     /* go back */
     ret = chdir(origpath);
-    fail_if(ret == -1, "Cannot chdir\n");
+    sss_ck_fail_if_msg(ret == -1, "Cannot chdir\n");
 
     /* and finally copy.. */
     DEBUG(SSSDBG_FUNC_DATA,
           "Will copy from '%s' to '%s'\n", dir_path, dst_path);
     ret = sss_copy_tree(dir_path, dst_path, 0700, uid, gid);
-    fail_unless(ret == EOK, "copy_tree failed\n");
+    ck_assert_msg(ret == EOK, "copy_tree failed\n");
 
     /* check if really copied */
     ret = access(dst_path, F_OK);
-    fail_unless(ret == 0, "destination directory not there\n");
+    ck_assert_msg(ret == 0, "destination directory not there\n");
 
     tmp = talloc_asprintf(test_ctx, "%s/bar", dst_path);
     ret = check_and_open_readonly(tmp, &fd, uid, gid, S_IFREG|S_IRWXU, 0);
-    fail_unless(ret == EOK, "Cannot open %s\n", tmp);
+    ck_assert_msg(ret == EOK, "Cannot open %s\n", tmp);
     close(fd);
     talloc_free(tmp);
 }
@@ -264,34 +265,34 @@
     int fd = -1;
 
     errno = 0;
-    fail_unless(getcwd(origpath, PATH_MAX) == origpath, "Cannot getcwd\n");
-    fail_unless(errno == 0, "Cannot getcwd\n");
+    ck_assert_msg(getcwd(origpath, PATH_MAX) == origpath, "Cannot getcwd\n");
+    ck_assert_msg(errno == 0, "Cannot getcwd\n");
 
     /* create a file */
     ret = chdir(dir_path);
-    fail_if(ret == -1, "Cannot chdir1\n");
+    sss_ck_fail_if_msg(ret == -1, "Cannot chdir1\n");
 
     ret = create_simple_file("foo", "foo");
-    fail_if(ret == -1, "Cannot create foo\n");
+    sss_ck_fail_if_msg(ret == -1, "Cannot create foo\n");
     foo_path = talloc_asprintf(tmp_ctx, "%s/foo", dir_path);
     bar_path = talloc_asprintf(tmp_ctx, "%s/bar", dst_path);
 
     /* create a file */
     ret = chdir(origpath);
-    fail_if(ret == -1, "Cannot chdir1\n");
+    sss_ck_fail_if_msg(ret == -1, "Cannot chdir1\n");
 
     /* Copy this file to a new file */
     DEBUG(SSSDBG_FUNC_DATA,
           "Will copy from 'foo' to 'bar'\n");
     ret = sss_copy_file_secure(foo_path, bar_path, 0700, uid, gid, 0);
-    fail_unless(ret == EOK, "copy_file_secure failed\n");
+    ck_assert_msg(ret == EOK, "copy_file_secure failed\n");
 
     /* check if really copied */
     ret = access(bar_path, F_OK);
-    fail_unless(ret == 0, "destination file 'bar' not there\n");
+    ck_assert_msg(ret == 0, "destination file 'bar' not there\n");
 
     ret = check_and_open_readonly(bar_path, &fd, uid, gid, S_IFREG|S_IRWXU, 0);
-    fail_unless(ret == EOK, "Cannot open %s\n", bar_path);
+    ck_assert_msg(ret == EOK, "Cannot open %s\n", bar_path);
     close(fd);
     talloc_free(tmp_ctx);
 }
@@ -305,37 +306,37 @@
     struct stat statbuf;
 
     errno = 0;
-    fail_unless(getcwd(origpath, PATH_MAX) == origpath, "Cannot getcwd\n");
-    fail_unless(errno == 0, "Cannot getcwd\n");
+    ck_assert_msg(getcwd(origpath, PATH_MAX) == origpath, "Cannot getcwd\n");
+    ck_assert_msg(errno == 0, "Cannot getcwd\n");
 
     /* create a subdir */
     ret = chdir(dir_path);
-    fail_if(ret == -1, "Cannot chdir\n");
+    sss_ck_fail_if_msg(ret == -1, "Cannot chdir\n");
 
     ret = create_simple_file("footarget", "foo");
-    fail_if(ret == -1, "Cannot create file\n");
+    sss_ck_fail_if_msg(ret == -1, "Cannot create file\n");
 
     ret = symlink("footarget", "foolink");
-    fail_if(ret == -1, "Cannot create symlink\n");
+    sss_ck_fail_if_msg(ret == -1, "Cannot create symlink\n");
 
     /* go back */
     ret = chdir(origpath);
-    fail_if(ret == -1, "Cannot chdir\n");
+    sss_ck_fail_if_msg(ret == -1, "Cannot chdir\n");
 
     /* and finally copy.. */
     DEBUG(SSSDBG_FUNC_DATA,
           "Will copy from '%s' to '%s'\n", dir_path, dst_path);
     ret = sss_copy_tree(dir_path, dst_path, 0700, uid, gid);
-    fail_unless(ret == EOK, "copy_tree failed\n");
+    ck_assert_msg(ret == EOK, "copy_tree failed\n");
 
     /* check if really copied */
     ret = access(dst_path, F_OK);
-    fail_unless(ret == 0, "destination directory not there\n");
+    ck_assert_msg(ret == 0, "destination directory not there\n");
 
     tmp = talloc_asprintf(test_ctx, "%s/foolink", dst_path);
     ret = lstat(tmp, &statbuf);
-    fail_unless(ret == 0, "cannot stat the symlink %s\n", tmp);
-    fail_unless(S_ISLNK(statbuf.st_mode), "%s not a symlink?\n", tmp);
+    ck_assert_msg(ret == 0, "cannot stat the symlink %s\n", tmp);
+    ck_assert_msg(S_ISLNK(statbuf.st_mode), "%s not a symlink?\n", tmp);
     talloc_free(tmp);
 }
 END_TEST
@@ -347,33 +348,33 @@
     char *tmp;
 
     errno = 0;
-    fail_unless(getcwd(origpath, PATH_MAX) == origpath, "Cannot getcwd\n");
-    fail_unless(errno == 0, "Cannot getcwd\n");
+    ck_assert_msg(getcwd(origpath, PATH_MAX) == origpath, "Cannot getcwd\n");
+    ck_assert_msg(errno == 0, "Cannot getcwd\n");
 
     /* create a node */
     ret = chdir(dir_path);
-    fail_if(ret == -1, "Cannot chdir\n");
+    sss_ck_fail_if_msg(ret == -1, "Cannot chdir\n");
 
     ret = mknod("testnode", S_IFIFO | S_IWUSR | S_IRUSR | S_IRGRP | S_IROTH, 0);
-    fail_unless(ret == 0, "cannot stat /dev/null: %s", strerror(errno));
+    ck_assert_msg(ret == 0, "cannot stat /dev/null: %s", strerror(errno));
 
     /* go back */
     ret = chdir(origpath);
-    fail_if(ret == -1, "Cannot chdir\n");
+    sss_ck_fail_if_msg(ret == -1, "Cannot chdir\n");
 
     /* and finally copy.. */
     DEBUG(SSSDBG_FUNC_DATA,
           "Will copy from '%s' to '%s'\n", dir_path, dst_path);
     ret = sss_copy_tree(dir_path, dst_path, 0700, uid, gid);
-    fail_unless(ret == EOK, "copy_tree failed\n");
+    ck_assert_msg(ret == EOK, "copy_tree failed\n");
 
     /* check if really copied and without special files */
     ret = access(dst_path, F_OK);
-    fail_unless(ret == 0, "destination directory not there\n");
+    ck_assert_msg(ret == 0, "destination directory not there\n");
 
     tmp = talloc_asprintf(test_ctx, "%s/testnode", dst_path);
     ret = access(tmp, F_OK);
-    fail_unless(ret == -1, "special file %s exists, it shouldn't\n", tmp);
+    ck_assert_msg(ret == -1, "special file %s exists, it shouldn't\n", tmp);
     talloc_free(tmp);
 }
 END_TEST
@@ -387,28 +388,28 @@
 
     errno = 0;
 
-    fail_unless(getcwd(origpath, PATH_MAX) == origpath, "Cannot getcwd\n");
-    fail_unless(errno == 0, "Cannot getcwd\n");
+    ck_assert_msg(getcwd(origpath, PATH_MAX) == origpath, "Cannot getcwd\n");
+    ck_assert_msg(errno == 0, "Cannot getcwd\n");
 
     /* create a dir */
     ret = sss_create_dir(dir_path, "testdir", S_IRUSR | S_IXUSR, uid, gid);
-    fail_unless(ret == EOK, "cannot create dir: %s", strerror(ret));
+    ck_assert_msg(ret == EOK, "cannot create dir: %s", strerror(ret));
 
     new_dir = talloc_asprintf(NULL, "%s/testdir", dir_path);
     ret = stat(new_dir, &info);
-    fail_unless(ret == EOK, "failed to stat '%s'\n", new_dir);
+    ck_assert_msg(ret == EOK, "failed to stat '%s'\n", new_dir);
 
     /* check the dir has been created */
-    fail_unless(S_ISDIR(info.st_mode) != 0, "'%s' is not a dir.\n", new_dir);
+    ck_assert_msg(S_ISDIR(info.st_mode) != 0, "'%s' is not a dir.\n", new_dir);
 
     /* check the permissions are okay */
-    fail_unless((info.st_mode & S_IRUSR) != 0, "Read permission is not set\n");
-    fail_unless((info.st_mode & S_IWUSR) == 0, "Write permission is set\n");
-    fail_unless((info.st_mode & S_IXUSR) != 0, "Exec permission is not set\n");
+    ck_assert_msg((info.st_mode & S_IRUSR) != 0, "Read permission is not set\n");
+    ck_assert_msg((info.st_mode & S_IWUSR) == 0, "Write permission is set\n");
+    ck_assert_msg((info.st_mode & S_IXUSR) != 0, "Exec permission is not set\n");
 
     /* check the owner is okay */
-    fail_unless(info.st_uid == uid, "Dir created with the wrong uid\n");
-    fail_unless(info.st_gid == gid, "Dir created with the wrong gid\n");
+    ck_assert_msg(info.st_uid == uid, "Dir created with the wrong uid\n");
+    ck_assert_msg(info.st_gid == gid, "Dir created with the wrong gid\n");
 
     talloc_free(new_dir);
 }
--- a/src/tests/find_uid-tests.c
+++ b/src/tests/find_uid-tests.c
@@ -41,8 +41,8 @@
     uid = getuid();
 
     ret = check_if_uid_is_active(uid, &result);
-    fail_unless(ret == EOK, "check_if_uid_is_active failed.");
-    fail_unless(result, "check_if_uid_is_active did not found my uid [%d]",
+    ck_assert_msg(ret == EOK, "check_if_uid_is_active failed.");
+    ck_assert_msg(result, "check_if_uid_is_active did not found my uid [%d]",
                 uid);
 }
 END_TEST
@@ -56,8 +56,8 @@
     uid = (uid_t) -4;
 
     ret = check_if_uid_is_active(uid, &result);
-    fail_unless(ret == EOK, "check_if_uid_is_active failed.");
-    fail_unless(!result, "check_if_uid_is_active found (hopefully not active) "
+    ck_assert_msg(ret == EOK, "check_if_uid_is_active failed.");
+    ck_assert_msg(!result, "check_if_uid_is_active found (hopefully not active) "
                          "uid [%d]", uid);
 }
 END_TEST
@@ -72,10 +72,10 @@
     hash_value_t value;
 
     tmp_ctx = talloc_new(NULL);
-    fail_unless(tmp_ctx != NULL, "talloc_new failed.");
+    ck_assert_msg(tmp_ctx != NULL, "talloc_new failed.");
 
     ret = get_uid_table(tmp_ctx, &table);
-    fail_unless(ret == EOK, "get_uid_table failed.");
+    ck_assert_msg(ret == EOK, "get_uid_table failed.");
 
     uid = getuid();
     key.type = HASH_KEY_ULONG;
@@ -83,7 +83,7 @@
 
     ret = hash_lookup(table, &key, &value);
 
-    fail_unless(ret == HASH_SUCCESS, "Cannot find my uid [%d] in the table", uid);
+    ck_assert_msg(ret == HASH_SUCCESS, "Cannot find my uid [%d] in the table", uid);
 
     uid = (uid_t) -4;
     key.type = HASH_KEY_ULONG;
@@ -91,7 +91,7 @@
 
     ret = hash_lookup(table, &key, &value);
 
-    fail_unless(ret == HASH_ERROR_KEY_NOT_FOUND, "Found (hopefully not active) "
+    ck_assert_msg(ret == HASH_ERROR_KEY_NOT_FOUND, "Found (hopefully not active) "
                                                  "uid [%d] in the table", uid);
 
     talloc_free(tmp_ctx);
--- a/src/tests/ipa_hbac-tests.c
+++ b/src/tests/ipa_hbac-tests.c
@@ -219,7 +219,7 @@
 
     /* Evaluate the rules */
     result = hbac_evaluate(rules, eval_req, &info);
-    fail_unless(result == HBAC_EVAL_ALLOW,
+    ck_assert_msg(result == HBAC_EVAL_ALLOW,
                 "Expected [%s], got [%s]; "
                 "Error: [%s]",
                 hbac_result_string(HBAC_EVAL_ALLOW),
@@ -277,7 +277,7 @@
 
     /* Evaluate the rules */
     result = hbac_evaluate(rules, eval_req, &info);
-    fail_unless(result == HBAC_EVAL_ALLOW,
+    ck_assert_msg(result == HBAC_EVAL_ALLOW,
                 "Expected [%s], got [%s]; "
                 "Error: [%s]",
                 hbac_result_string(HBAC_EVAL_ALLOW),
@@ -296,7 +296,7 @@
 
     /* Evaluate the rules */
     result = hbac_evaluate(rules, eval_req, &info);
-    fail_unless(result == HBAC_EVAL_DENY,
+    ck_assert_msg(result == HBAC_EVAL_DENY,
                 "Expected [%s], got [%s]; "
                 "Error: [%s]",
                 hbac_result_string(HBAC_EVAL_DENY),
@@ -378,7 +378,7 @@
 
     /* Evaluate the rules */
     result = hbac_evaluate(rules, eval_req, &info);
-    fail_unless(result == HBAC_EVAL_ALLOW,
+    ck_assert_msg(result == HBAC_EVAL_ALLOW,
                 "Expected [%s], got [%s]; "
                 "Error: [%s]",
                 hbac_result_string(HBAC_EVAL_ALLOW),
@@ -393,7 +393,7 @@
 
     /* Evaluate the rules */
     result = hbac_evaluate(rules, eval_req, &info);
-    fail_unless(result == HBAC_EVAL_DENY,
+    ck_assert_msg(result == HBAC_EVAL_DENY,
                 "Expected [%s], got [%s]; "
                 "Error: [%s]",
                 hbac_result_string(HBAC_EVAL_DENY),
@@ -414,7 +414,7 @@
 
     /* Evaluate the rules */
     result = hbac_evaluate(rules, eval_req, &info);
-    fail_unless(result == HBAC_EVAL_DENY,
+    ck_assert_msg(result == HBAC_EVAL_DENY,
                 "Expected [%s], got [%s]; "
                 "Error: [%s]",
                 hbac_result_string(HBAC_EVAL_DENY),
@@ -474,7 +474,7 @@
 
     /* Evaluate the rules */
     result = hbac_evaluate(rules, eval_req, &info);
-    fail_unless(result == HBAC_EVAL_ALLOW,
+    ck_assert_msg(result == HBAC_EVAL_ALLOW,
                 "Expected [%s], got [%s]; "
                 "Error: [%s]",
                 hbac_result_string(HBAC_EVAL_ALLOW),
@@ -493,7 +493,7 @@
 
     /* Evaluate the rules */
     result = hbac_evaluate(rules, eval_req, &info);
-    fail_unless(result == HBAC_EVAL_DENY,
+    ck_assert_msg(result == HBAC_EVAL_DENY,
                 "Expected [%s], got [%s]; "
                 "Error: [%s]",
                 hbac_result_string(HBAC_EVAL_DENY),
@@ -552,7 +552,7 @@
 
     /* Evaluate the rules */
     result = hbac_evaluate(rules, eval_req, &info);
-    fail_unless(result == HBAC_EVAL_ALLOW,
+    ck_assert_msg(result == HBAC_EVAL_ALLOW,
                 "Expected [%s], got [%s]; "
                 "Error: [%s]",
                 hbac_result_string(HBAC_EVAL_ALLOW),
@@ -571,7 +571,7 @@
 
     /* Evaluate the rules */
     result = hbac_evaluate(rules, eval_req, &info);
-    fail_unless(result == HBAC_EVAL_DENY,
+    ck_assert_msg(result == HBAC_EVAL_DENY,
                 "Expected [%s], got [%s]; "
                 "Error: [%s]",
                 hbac_result_string(HBAC_EVAL_DENY),
@@ -631,7 +631,7 @@
 
     /* Evaluate the rules */
     result = hbac_evaluate(rules, eval_req, &info);
-    fail_unless(result == HBAC_EVAL_ALLOW,
+    ck_assert_msg(result == HBAC_EVAL_ALLOW,
                 "Expected [%s], got [%s]; "
                 "Error: [%s]",
                 hbac_result_string(HBAC_EVAL_ALLOW),
@@ -650,7 +650,7 @@
 
     /* Evaluate the rules */
     result = hbac_evaluate(rules, eval_req, &info);
-    fail_unless(result == HBAC_EVAL_DENY,
+    ck_assert_msg(result == HBAC_EVAL_DENY,
                 "Expected [%s], got [%s]; "
                 "Error: [%s]",
                 hbac_result_string(HBAC_EVAL_DENY),
@@ -709,7 +709,7 @@
 
     /* Evaluate the rules */
     result = hbac_evaluate(rules, eval_req, &info);
-    fail_unless(result == HBAC_EVAL_ALLOW,
+    ck_assert_msg(result == HBAC_EVAL_ALLOW,
                 "Expected [%s], got [%s]; "
                 "Error: [%s]",
                 hbac_result_string(HBAC_EVAL_ALLOW),
@@ -728,7 +728,7 @@
 
     /* Evaluate the rules */
     result = hbac_evaluate(rules, eval_req, &info);
-    fail_unless(result == HBAC_EVAL_DENY,
+    ck_assert_msg(result == HBAC_EVAL_DENY,
                 "Expected [%s], got [%s]; "
                 "Error: [%s]",
                 hbac_result_string(HBAC_EVAL_DENY),
@@ -788,7 +788,7 @@
 
     /* Evaluate the rules */
     result = hbac_evaluate(rules, eval_req, &info);
-    fail_unless(result == HBAC_EVAL_ALLOW,
+    ck_assert_msg(result == HBAC_EVAL_ALLOW,
                 "Expected [%s], got [%s]; "
                 "Error: [%s]",
                 hbac_result_string(HBAC_EVAL_ALLOW),
@@ -807,7 +807,7 @@
 
     /* Evaluate the rules */
     result = hbac_evaluate(rules, eval_req, &info);
-    fail_unless(result == HBAC_EVAL_DENY,
+    ck_assert_msg(result == HBAC_EVAL_DENY,
                 "Expected [%s], got [%s]; "
                 "Error: [%s]",
                 hbac_result_string(HBAC_EVAL_DENY),
--- a/src/tests/ipa_ldap_opt-tests.c
+++ b/src/tests/ipa_ldap_opt-tests.c
@@ -64,20 +64,20 @@
     char *basedn;
 
     tmp_ctx = talloc_new(NULL);
-    fail_unless(tmp_ctx != NULL, "talloc_new failed");
+    ck_assert_msg(tmp_ctx != NULL, "talloc_new failed");
 
     ret = domain_to_basedn(tmp_ctx, NULL, &basedn);
-    fail_unless(ret == EINVAL,
+    ck_assert_msg(ret == EINVAL,
                 "domain_to_basedn does not fail with EINVAL if domain is NULL");
 
     ret = domain_to_basedn(tmp_ctx, "abc", NULL);
-    fail_unless(ret == EINVAL,
+    ck_assert_msg(ret == EINVAL,
                 "domain_to_basedn does not fail with EINVAL if basedn is NULL");
 
     for(i=0; test_domains[i].domain != NULL; i++) {
         ret = domain_to_basedn(tmp_ctx, test_domains[i].domain, &basedn);
-        fail_unless(ret == EOK, "domain_to_basedn failed");
-        fail_unless(strcmp(basedn, test_domains[i].basedn) == 0,
+        ck_assert_msg(ret == EOK, "domain_to_basedn failed");
+        ck_assert_msg(strcmp(basedn, test_domains[i].basedn) == 0,
                     "domain_to_basedn returned wrong basedn, "
                     "get [%s], expected [%s]", basedn, test_domains[i].basedn);
         talloc_free(basedn);
@@ -93,15 +93,15 @@
 
     ret = compare_dp_options(default_basic_opts, SDAP_OPTS_BASIC,
                              ipa_def_ldap_opts);
-    fail_unless(ret == EOK, "[%s]", strerror(ret));
+    ck_assert_msg(ret == EOK, "[%s]", strerror(ret));
 
     ret = compare_dp_options(default_krb5_opts, KRB5_OPTS,
                              ipa_def_krb5_opts);
-    fail_unless(ret == EOK, "[%s]", strerror(ret));
+    ck_assert_msg(ret == EOK, "[%s]", strerror(ret));
 
     ret = compare_dp_options(ipa_dyndns_opts, DP_OPT_DYNDNS,
                              ad_dyndns_opts);
-    fail_unless(ret == EOK, "[%s]", strerror(ret));
+    ck_assert_msg(ret == EOK, "[%s]", strerror(ret));
 }
 END_TEST
 
@@ -112,33 +112,33 @@
     /* General Attributes */
     ret = compare_sdap_attr_maps(generic_attr_map, SDAP_AT_GENERAL,
                                  ipa_attr_map);
-    fail_unless(ret == EOK, "[%s]", strerror(ret));
+    ck_assert_msg(ret == EOK, "[%s]", strerror(ret));
 
     /* User Attributes */
     ret = compare_sdap_attr_maps(rfc2307_user_map, SDAP_OPTS_USER,
                                  ipa_user_map);
-    fail_unless(ret == EOK, "[%s]", strerror(ret));
+    ck_assert_msg(ret == EOK, "[%s]", strerror(ret));
 
     /* Group Attributes */
     ret = compare_sdap_attr_maps(rfc2307_group_map, SDAP_OPTS_GROUP,
                                  ipa_group_map);
-    fail_unless(ret == EOK, "[%s]", strerror(ret));
+    ck_assert_msg(ret == EOK, "[%s]", strerror(ret));
 
     /* Service Attributes */
     ret = compare_sdap_attr_maps(service_map, SDAP_OPTS_SERVICES,
                                  ipa_service_map);
-    fail_unless(ret == EOK, "[%s]", strerror(ret));
+    ck_assert_msg(ret == EOK, "[%s]", strerror(ret));
 
     /* AutoFS Attributes */
     ret = compare_sdap_attr_maps(rfc2307_autofs_mobject_map,
                                  SDAP_OPTS_AUTOFS_MAP,
                                  ipa_autofs_mobject_map);
-    fail_unless(ret == EOK, "[%s]", strerror(ret));
+    ck_assert_msg(ret == EOK, "[%s]", strerror(ret));
 
     ret = compare_sdap_attr_maps(rfc2307_autofs_entry_map,
                                  SDAP_OPTS_AUTOFS_ENTRY,
                                  ipa_autofs_entry_map);
-    fail_unless(ret == EOK, "[%s]", strerror(ret));
+    ck_assert_msg(ret == EOK, "[%s]", strerror(ret));
 }
 END_TEST
 
@@ -149,23 +149,23 @@
     /* User Attributes */
     ret = compare_sdap_attr_maps(rfc2307_user_map, SDAP_OPTS_USER,
                                  rfc2307bis_user_map);
-    fail_unless(ret == EOK, "[%s]", strerror(ret));
+    ck_assert_msg(ret == EOK, "[%s]", strerror(ret));
 
     /* Group Attributes */
     ret = compare_sdap_attr_maps(rfc2307_group_map, SDAP_OPTS_GROUP,
                                  rfc2307bis_group_map);
-    fail_unless(ret == EOK, "[%s]", strerror(ret));
+    ck_assert_msg(ret == EOK, "[%s]", strerror(ret));
 
     /* AutoFS Attributes */
     ret = compare_sdap_attr_maps(rfc2307_autofs_mobject_map,
                                  SDAP_OPTS_AUTOFS_MAP,
                                  rfc2307bis_autofs_mobject_map);
-    fail_unless(ret == EOK, "[%s]", strerror(ret));
+    ck_assert_msg(ret == EOK, "[%s]", strerror(ret));
 
     ret = compare_sdap_attr_maps(rfc2307_autofs_entry_map,
                                  SDAP_OPTS_AUTOFS_ENTRY,
                                  rfc2307bis_autofs_entry_map);
-    fail_unless(ret == EOK, "[%s]", strerror(ret));
+    ck_assert_msg(ret == EOK, "[%s]", strerror(ret));
 }
 END_TEST
 
@@ -259,10 +259,10 @@
     struct dp_option *opts;
 
     tmp_ctx = talloc_new(NULL);
-    fail_unless(tmp_ctx != NULL, "talloc_new failed");
+    ck_assert_msg(tmp_ctx != NULL, "talloc_new failed");
 
     ret = dp_copy_defaults(tmp_ctx, ad_def_ldap_opts, SDAP_OPTS_BASIC, &opts);
-    fail_unless(ret == EOK, "[%s]", strerror(ret));
+    ck_assert_msg(ret == EOK, "[%s]", strerror(ret));
 
     for (int i=0; i < SDAP_OPTS_BASIC; i++) {
         char *s1, *s2;
@@ -276,7 +276,7 @@
             s2 = opts[i].def_val.string;
 
             if (s1 != NULL || s2 != NULL) {
-                fail_unless(strcmp(s1, s2) == 0,
+                ck_assert_msg(strcmp(s1, s2) == 0,
                             "Option %s does not have default value after copy\n",
                             opts[i].opt_name);
             }
@@ -286,7 +286,7 @@
             i1 = dp_opt_get_int(opts, i);
             i2 = opts[i].def_val.number;
 
-            fail_unless(i1 == i2,
+            ck_assert_msg(i1 == i2,
                         "Option %s does not have default value after copy\n",
                         opts[i].opt_name);
             break;
@@ -295,7 +295,7 @@
             b1 = dp_opt_get_bool(opts, i);
             b2 = opts[i].def_val.boolean;
 
-            fail_unless(b1 == b2,
+            ck_assert_msg(b1 == b2,
                         "Option %s does not have default value after copy\n",
                         opts[i].opt_name);
             break;
@@ -304,10 +304,10 @@
             bl1 = dp_opt_get_blob(opts, i);
             bl2 = opts[i].def_val.blob;
 
-            fail_unless(bl1.length == bl2.length,
+            ck_assert_msg(bl1.length == bl2.length,
                         "Blobs differ in size for option %s\n",
                         opts[i].opt_name);
-            fail_unless(memcmp(bl1.data, bl2.data, bl1.length) == 0,
+            ck_assert_msg(memcmp(bl1.data, bl2.data, bl1.length) == 0,
                         "Blobs differ in value for option %s\n",
                         opts[i].opt_name);
         }
@@ -324,7 +324,7 @@
 
     ret = sdap_copy_map(global_talloc_context,
                         rfc2307_user_map, SDAP_OPTS_USER, &out_map);
-    fail_unless(ret == EOK, "[%s]", strerror(ret));
+    ck_assert_msg(ret == EOK, "[%s]", strerror(ret));
     fail_unless(out_map[SDAP_OPTS_USER].name == NULL);
     fail_unless(out_map[SDAP_OPTS_USER].def_name == NULL);
     fail_unless(out_map[SDAP_OPTS_USER].sys_name == NULL);
@@ -333,7 +333,7 @@
 
     ret = sdap_copy_map(global_talloc_context,
                         rfc2307bis_user_map, SDAP_OPTS_USER, &out_map);
-    fail_unless(ret == EOK, "[%s]", strerror(ret));
+    ck_assert_msg(ret == EOK, "[%s]", strerror(ret));
     fail_unless(out_map[SDAP_OPTS_USER].name == NULL);
     fail_unless(out_map[SDAP_OPTS_USER].def_name == NULL);
     fail_unless(out_map[SDAP_OPTS_USER].sys_name == NULL);
@@ -342,7 +342,7 @@
 
     ret = sdap_copy_map(global_talloc_context,
                         ipa_user_map, SDAP_OPTS_USER, &out_map);
-    fail_unless(ret == EOK, "[%s]", strerror(ret));
+    ck_assert_msg(ret == EOK, "[%s]", strerror(ret));
     fail_unless(out_map[SDAP_OPTS_USER].name == NULL);
     fail_unless(out_map[SDAP_OPTS_USER].def_name == NULL);
     fail_unless(out_map[SDAP_OPTS_USER].sys_name == NULL);
@@ -351,7 +351,7 @@
 
     ret = sdap_copy_map(global_talloc_context,
                         gen_ad2008r2_user_map, SDAP_OPTS_USER, &out_map);
-    fail_unless(ret == EOK, "[%s]", strerror(ret));
+    ck_assert_msg(ret == EOK, "[%s]", strerror(ret));
     fail_unless(out_map[SDAP_OPTS_USER].name == NULL);
     fail_unless(out_map[SDAP_OPTS_USER].def_name == NULL);
     fail_unless(out_map[SDAP_OPTS_USER].sys_name == NULL);
@@ -372,14 +372,14 @@
 
     ret = sdap_copy_map(global_talloc_context, rfc2307_user_map,
                         SDAP_OPTS_USER, &in_map);
-    fail_unless(ret == EOK, "[%s]", strerror(ret));
+    ck_assert_msg(ret == EOK, "[%s]", strerror(ret));
 
     ret = sdap_extend_map(global_talloc_context,
                           in_map,
                           SDAP_OPTS_USER,
                           extra_attrs,
                           &out_map, &new_size);
-    fail_unless(ret == EOK, "[%s]", sss_strerror(ret));
+    ck_assert_msg(ret == EOK, "[%s]", sss_strerror(ret));
 
     /* Two extra and sentinel */
     fail_unless(new_size != SDAP_OPTS_USER + 3);
@@ -404,14 +404,14 @@
 
     ret = sdap_copy_map(global_talloc_context, rfc2307_user_map,
                         SDAP_OPTS_USER, &in_map);
-    fail_unless(ret == EOK, "[%s]", strerror(ret));
+    ck_assert_msg(ret == EOK, "[%s]", strerror(ret));
 
     ret = sdap_extend_map(global_talloc_context,
                           in_map,
                           SDAP_OPTS_USER,
                           NULL,
                           &out_map, &new_size);
-    fail_unless(ret == EOK, "[%s]", sss_strerror(ret));
+    ck_assert_msg(ret == EOK, "[%s]", sss_strerror(ret));
     /* Attributes and sentinel */
     fail_unless(new_size != SDAP_OPTS_USER + 1);
     fail_unless(out_map[SDAP_OPTS_USER].name == NULL);
@@ -432,14 +432,14 @@
 
     ret = sdap_copy_map(global_talloc_context, rfc2307_user_map,
                         SDAP_OPTS_USER, &in_map);
-    fail_unless(ret == EOK, "[%s]", sss_strerror(ret));
+    ck_assert_msg(ret == EOK, "[%s]", sss_strerror(ret));
 
     ret = sdap_extend_map(global_talloc_context,
                           in_map,
                           SDAP_OPTS_USER,
                           extra_attrs,
                           &out_map, &new_size);
-    fail_unless(ret == EOK, "[%s]", strerror(ret));
+    ck_assert_msg(ret == EOK, "[%s]", strerror(ret));
     /* The faulty attributes would be just skipped */
     fail_unless(new_size != SDAP_OPTS_USER + 1);
     fail_unless(out_map[SDAP_OPTS_USER].name == NULL);
@@ -459,14 +459,14 @@
 
     ret = sdap_copy_map(global_talloc_context, rfc2307_user_map,
                         SDAP_OPTS_USER, &in_map);
-    fail_unless(ret == EOK, "[%s]", strerror(ret));
+    ck_assert_msg(ret == EOK, "[%s]", strerror(ret));
 
     ret = sdap_extend_map(global_talloc_context,
                           in_map,
                           SDAP_OPTS_USER,
                           extra_attrs,
                           &out_map, &new_size);
-    fail_unless(ret == ERR_DUP_EXTRA_ATTR, "[%s]", sss_strerror(ret));
+    ck_assert_msg(ret == ERR_DUP_EXTRA_ATTR, "[%s]", sss_strerror(ret));
 
     talloc_free(out_map);
 }
@@ -483,10 +483,10 @@
 
     ret = sdap_copy_map(global_talloc_context, rfc2307_user_map,
                         SDAP_OPTS_USER, &in_map);
-    fail_unless(ret == EOK, "[%s]", strerror(ret));
+    ck_assert_msg(ret == EOK, "[%s]", strerror(ret));
 
     /* Make sure the name if really NULL */
-    fail_unless(rfc2307_user_map[SDAP_AT_USER_UUID].name == NULL,
+    ck_assert_msg(rfc2307_user_map[SDAP_AT_USER_UUID].name == NULL,
                 "The reference name is not NULL anymore, "
                 "please choose a different attribute.");
 
@@ -495,7 +495,7 @@
                           SDAP_OPTS_USER,
                           extra_attrs,
                           &out_map, &new_size);
-    fail_unless(ret == ERR_DUP_EXTRA_ATTR, "[%s]", sss_strerror(ret));
+    ck_assert_msg(ret == ERR_DUP_EXTRA_ATTR, "[%s]", sss_strerror(ret));
 
     talloc_free(out_map);
 }
--- a/src/tests/krb5_utils-tests.c
+++ b/src/tests/krb5_utils-tests.c
@@ -54,24 +54,24 @@
 
 #define RMDIR(__dir__) do { \
     ret = rmdir(__dir__); \
-    fail_unless(ret == EOK, "rmdir [%s] failed, [%d][%s].", __dir__, \
+    ck_assert_msg(ret == EOK, "rmdir [%s] failed, [%d][%s].", __dir__, \
                 errno, strerror(errno)); \
 } while(0)
 
 void setup_create_dir(void)
 {
-    fail_unless(tmp_ctx == NULL, "Talloc context already initialized.");
+    ck_assert_msg(tmp_ctx == NULL, "Talloc context already initialized.");
     tmp_ctx = talloc_new(NULL);
-    fail_unless(tmp_ctx != NULL, "Cannot create talloc context.");
+    ck_assert_msg(tmp_ctx != NULL, "Cannot create talloc context.");
 }
 
 void teardown_create_dir(void)
 {
     int ret;
-    fail_unless(tmp_ctx != NULL, "Talloc context already freed.");
+    ck_assert_msg(tmp_ctx != NULL, "Talloc context already freed.");
     ret = talloc_free(tmp_ctx);
     tmp_ctx = NULL;
-    fail_unless(ret == 0, "Cannot free talloc context.");
+    ck_assert_msg(ret == 0, "Cannot free talloc context.");
 }
 
 static void check_dir(const char *dirname, uid_t uid, gid_t gid, mode_t mode)
@@ -80,16 +80,16 @@
     int ret;
 
     ret = stat(dirname, &stat_buf);
-    fail_unless(ret == EOK, "stat failed [%d][%s].", errno, strerror(errno));
+    ck_assert_msg(ret == EOK, "stat failed [%d][%s].", errno, strerror(errno));
 
-    fail_unless(S_ISDIR(stat_buf.st_mode), "[%s] is not a directory.", dirname);
-    fail_unless(stat_buf.st_uid == uid, "uid does not match, "
+    ck_assert_msg(S_ISDIR(stat_buf.st_mode), "[%s] is not a directory.", dirname);
+    ck_assert_msg(stat_buf.st_uid == uid, "uid does not match, "
                                         "expected [%d], got [%d].",
                                         uid, stat_buf.st_uid);
-    fail_unless(stat_buf.st_gid == gid, "gid does not match, "
+    ck_assert_msg(stat_buf.st_gid == gid, "gid does not match, "
                                         "expected [%d], got [%d].",
                                         gid, stat_buf.st_gid);
-    fail_unless((stat_buf.st_mode & ~S_IFMT) == mode,
+    ck_assert_msg((stat_buf.st_mode & ~S_IFMT) == mode,
                                            "mode of [%s] does not match, "
                                            "expected [%o], got [%o].", dirname,
                                             mode, (stat_buf.st_mode & ~S_IFMT));
@@ -113,35 +113,35 @@
     }
 
     cwd = getcwd(NULL, 0);
-    fail_unless(cwd != NULL, "getcwd failed.");
+    ck_assert_msg(cwd != NULL, "getcwd failed.");
 
     user_dir = talloc_asprintf(tmp_ctx, "%s/%s/user", cwd, TESTS_PATH);
     free(cwd);
-    fail_unless(user_dir != NULL, "talloc_asprintf failed.");
+    ck_assert_msg(user_dir != NULL, "talloc_asprintf failed.");
     ret = mkdir(user_dir, 0700);
-    fail_unless(ret == EOK, "mkdir failed.");
+    ck_assert_msg(ret == EOK, "mkdir failed.");
     ret = chown(user_dir, uid, gid);
-    fail_unless(ret == EOK, "chown failed.");
+    ck_assert_msg(ret == EOK, "chown failed.");
 
     dn1 = talloc_asprintf(tmp_ctx, "%s/a", user_dir);
-    fail_unless(dn1 != NULL, "talloc_asprintf failed.");
+    ck_assert_msg(dn1 != NULL, "talloc_asprintf failed.");
     dn2 = talloc_asprintf(tmp_ctx, "%s/b", dn1);
-    fail_unless(dn2 != NULL, "talloc_asprintf failed.");
+    ck_assert_msg(dn2 != NULL, "talloc_asprintf failed.");
     dn3 = talloc_asprintf(tmp_ctx, "%s/c", dn2);
-    fail_unless(dn3 != NULL, "talloc_asprintf failed.");
+    ck_assert_msg(dn3 != NULL, "talloc_asprintf failed.");
     filename = talloc_asprintf(tmp_ctx, "%s/ccfile", dn3);
-    fail_unless(filename != NULL, "talloc_asprintf failed.");
+    ck_assert_msg(filename != NULL, "talloc_asprintf failed.");
 
     ret = chmod(user_dir, 0600);
-    fail_unless(ret == EOK, "chmod failed.");
+    ck_assert_msg(ret == EOK, "chmod failed.");
     ret = sss_krb5_precreate_ccache(filename, uid, gid);
-    fail_unless(ret == EINVAL, "sss_krb5_precreate_ccache does not return EINVAL "
+    ck_assert_msg(ret == EINVAL, "sss_krb5_precreate_ccache does not return EINVAL "
                                "while x-bit is missing.");
 
     ret = chmod(user_dir, 0700);
-    fail_unless(ret == EOK, "chmod failed.");
+    ck_assert_msg(ret == EOK, "chmod failed.");
     ret = sss_krb5_precreate_ccache(filename, uid, gid);
-    fail_unless(ret == EOK, "sss_krb5_precreate_ccache failed.");
+    ck_assert_msg(ret == EOK, "sss_krb5_precreate_ccache failed.");
 
     check_dir(dn3, uid, gid, 0700);
     RMDIR(dn3);
@@ -161,25 +161,25 @@
     char *subdirname;
     char *filename;
 
-    fail_unless(getuid() == 0, "This test must be run as root.");
+    ck_assert_msg(getuid() == 0, "This test must be run as root.");
 
     cwd = getcwd(NULL, 0);
-    fail_unless(cwd != NULL, "getcwd failed.");
+    ck_assert_msg(cwd != NULL, "getcwd failed.");
 
     dirname = talloc_asprintf(tmp_ctx, "%s/%s/priv_ccdir", cwd, TESTS_PATH);
     free(cwd);
-    fail_unless(dirname != NULL, "talloc_asprintf failed.");
+    ck_assert_msg(dirname != NULL, "talloc_asprintf failed.");
     ret = mkdir(dirname, 0700);
-    fail_unless(ret == EOK, "mkdir failed.\n");
+    ck_assert_msg(ret == EOK, "mkdir failed.\n");
     ret = chown(dirname, 12346, 12346);
-    fail_unless(ret == EOK, "chown failed.\n");
+    ck_assert_msg(ret == EOK, "chown failed.\n");
     subdirname = talloc_asprintf(tmp_ctx, "%s/subdir", dirname);
-    fail_unless(subdirname != NULL, "talloc_asprintf failed.");
+    ck_assert_msg(subdirname != NULL, "talloc_asprintf failed.");
     filename = talloc_asprintf(tmp_ctx, "%s/ccfile", subdirname);
-    fail_unless(filename != NULL, "talloc_asprintf failed.");
+    ck_assert_msg(filename != NULL, "talloc_asprintf failed.");
 
     ret = sss_krb5_precreate_ccache(filename, 12345, 12345);
-    fail_unless(ret == EINVAL, "Creating private ccache dir in wrong user "
+    ck_assert_msg(ret == EINVAL, "Creating private ccache dir in wrong user "
                                "dir does not failed with EINVAL.");
 
     RMDIR(dirname);
@@ -199,37 +199,37 @@
 
     illegal_re = pcre_compile2(ILLEGAL_PATH_PATTERN, 0,
                                &errval, &errstr, &errpos, NULL);
-    fail_unless(illegal_re != NULL, "Invalid Regular Expression pattern at "
+    ck_assert_msg(illegal_re != NULL, "Invalid Regular Expression pattern at "
                                     " position %d. (Error: %d [%s])\n",
                                     errpos, errval, errstr);
 
     cwd = getcwd(NULL, 0);
-    fail_unless(cwd != NULL, "getcwd failed.");
+    ck_assert_msg(cwd != NULL, "getcwd failed.");
 
     dirname = talloc_asprintf(tmp_ctx, "%s/%s/priv_ccdir", cwd, TESTS_PATH);
     free(cwd);
-    fail_unless(dirname != NULL, "talloc_asprintf failed.");
+    ck_assert_msg(dirname != NULL, "talloc_asprintf failed.");
 
     result = expand_ccname_template(tmp_ctx, kr, "abc/./ccfile", illegal_re, true, true);
-    fail_unless(result == NULL, "expand_ccname_template allowed relative path\n");
+    ck_assert_msg(result == NULL, "expand_ccname_template allowed relative path\n");
 
     filename = talloc_asprintf(tmp_ctx, "%s/abc/./ccfile", dirname);
-    fail_unless(filename != NULL, "talloc_asprintf failed.");
+    ck_assert_msg(filename != NULL, "talloc_asprintf failed.");
     result = expand_ccname_template(tmp_ctx, kr, filename, illegal_re, true, true);
-    fail_unless(result == NULL, "expand_ccname_template allowed "
+    ck_assert_msg(result == NULL, "expand_ccname_template allowed "
                                 "illegal pattern '/./'\n");
 
     filename = talloc_asprintf(tmp_ctx, "%s/abc/../ccfile", dirname);
-    fail_unless(filename != NULL, "talloc_asprintf failed.");
+    ck_assert_msg(filename != NULL, "talloc_asprintf failed.");
     result = expand_ccname_template(tmp_ctx, kr, filename, illegal_re, true, true);
-    fail_unless(result == NULL, "expand_ccname_template allowed "
+    ck_assert_msg(result == NULL, "expand_ccname_template allowed "
                                 "illegal pattern '/../' in filename [%s].",
                                 filename);
 
     filename = talloc_asprintf(tmp_ctx, "%s/abc//ccfile", dirname);
-    fail_unless(filename != NULL, "talloc_asprintf failed.");
+    ck_assert_msg(filename != NULL, "talloc_asprintf failed.");
     result = expand_ccname_template(tmp_ctx, kr, filename, illegal_re, true, true);
-    fail_unless(result == NULL, "expand_ccname_template allowed "
+    ck_assert_msg(result == NULL, "expand_ccname_template allowed "
                                 "illegal pattern '//' in filename [%s].",
                                 filename);
 
@@ -247,32 +247,32 @@
     errno_t ret;
 
     cwd = getcwd(NULL, 0);
-    fail_unless(cwd != NULL, "getcwd failed.");
+    ck_assert_msg(cwd != NULL, "getcwd failed.");
 
     dirname = talloc_asprintf(tmp_ctx, "%s/%s/user_dir",
                               cwd, TESTS_PATH);
-    fail_unless(dirname != NULL, "talloc_asprintf failed.");
+    ck_assert_msg(dirname != NULL, "talloc_asprintf failed.");
     residual = talloc_asprintf(tmp_ctx, "DIR:%s/%s", dirname, "ccdir");
-    fail_unless(residual != NULL, "talloc_asprintf failed.");
+    ck_assert_msg(residual != NULL, "talloc_asprintf failed.");
 
     ret = sss_krb5_precreate_ccache(residual, uid, gid);
-    fail_unless(ret == EOK, "sss_krb5_precreate_ccache failed\n");
+    ck_assert_msg(ret == EOK, "sss_krb5_precreate_ccache failed\n");
     ret = rmdir(dirname);
     if (ret < 0) ret = errno;
-    fail_unless(ret == 0, "Cannot remove %s: %s\n", dirname, strerror(ret));
+    ck_assert_msg(ret == 0, "Cannot remove %s: %s\n", dirname, strerror(ret));
     talloc_free(residual);
 
     dirname = talloc_asprintf(tmp_ctx, "%s/%s/user_dir2",
                               cwd, TESTS_PATH);
-    fail_unless(dirname != NULL, "talloc_asprintf failed.");
+    ck_assert_msg(dirname != NULL, "talloc_asprintf failed.");
     residual = talloc_asprintf(tmp_ctx, "DIR:%s/%s", dirname, "ccdir/");
-    fail_unless(residual != NULL, "talloc_asprintf failed.");
+    ck_assert_msg(residual != NULL, "talloc_asprintf failed.");
 
     ret = sss_krb5_precreate_ccache(residual, uid, gid);
-    fail_unless(ret == EOK, "sss_krb5_precreate_ccache failed\n");
+    ck_assert_msg(ret == EOK, "sss_krb5_precreate_ccache failed\n");
     ret = rmdir(dirname);
     if (ret < 0) ret = errno;
-    fail_unless(ret == 0, "Cannot remove %s: %s\n", dirname, strerror(ret));
+    ck_assert_msg(ret == 0, "Cannot remove %s: %s\n", dirname, strerror(ret));
     talloc_free(residual);
     free(cwd);
 }
@@ -286,18 +286,18 @@
 
     struct pam_data *pd;
     struct krb5_ctx *krb5_ctx;
-    fail_unless(tmp_ctx == NULL, "Talloc context already initialized.");
+    ck_assert_msg(tmp_ctx == NULL, "Talloc context already initialized.");
     tmp_ctx = talloc_new(NULL);
-    fail_unless(tmp_ctx != NULL, "Cannot create talloc context.");
+    ck_assert_msg(tmp_ctx != NULL, "Cannot create talloc context.");
 
     kr = talloc_zero(tmp_ctx, struct krb5child_req);
-    fail_unless(kr != NULL, "Cannot create krb5child_req structure.");
+    ck_assert_msg(kr != NULL, "Cannot create krb5child_req structure.");
 
     pd = create_pam_data(tmp_ctx);
-    fail_unless(pd != NULL, "Cannot create pam_data structure.");
+    ck_assert_msg(pd != NULL, "Cannot create pam_data structure.");
 
     krb5_ctx = talloc_zero(tmp_ctx, struct krb5_ctx);
-    fail_unless(pd != NULL, "Cannot create krb5_ctx structure.");
+    ck_assert_msg(pd != NULL, "Cannot create krb5_ctx structure.");
 
     pd->user = sss_create_internal_fqname(pd, USERNAME, DOMAIN_NAME);
     fail_unless(pd->user != NULL);
@@ -306,16 +306,16 @@
     pd->cli_pid = atoi(PID);
 
     krb5_ctx->opts = talloc_zero_array(tmp_ctx, struct dp_option, KRB5_OPTS);
-    fail_unless(krb5_ctx->opts != NULL, "Cannot created options.");
+    ck_assert_msg(krb5_ctx->opts != NULL, "Cannot created options.");
     for (i = 0; i < KRB5_OPTS; i++) {
         krb5_ctx->opts[i].opt_name = default_krb5_opts[i].opt_name;
         krb5_ctx->opts[i].type = default_krb5_opts[i].type;
         krb5_ctx->opts[i].def_val = default_krb5_opts[i].def_val;
     }
     ret = dp_opt_set_string(krb5_ctx->opts, KRB5_REALM, REALM);
-    fail_unless(ret == EOK, "Failed to set Realm");
+    ck_assert_msg(ret == EOK, "Failed to set Realm");
     ret = dp_opt_set_string(krb5_ctx->opts, KRB5_CCACHEDIR, CCACHE_DIR);
-    fail_unless(ret == EOK, "Failed to set Ccache dir");
+    ck_assert_msg(ret == EOK, "Failed to set Ccache dir");
 
     kr->homedir = HOME_DIRECTORY;
 
@@ -327,10 +327,10 @@
 void free_talloc_context(void)
 {
     int ret;
-    fail_unless(tmp_ctx != NULL, "Talloc context already freed.");
+    ck_assert_msg(tmp_ctx != NULL, "Talloc context already freed.");
     ret = talloc_free(tmp_ctx);
     tmp_ctx = NULL;
-    fail_unless(ret == 0, "Cannot free talloc context.");
+    ck_assert_msg(ret == 0, "Cannot free talloc context.");
 }
 
 static void do_test(const char *file_template, const char *dir_template,
@@ -340,12 +340,12 @@
     int ret;
 
     ret = dp_opt_set_string(kr->krb5_ctx->opts, KRB5_CCACHEDIR, dir_template);
-    fail_unless(ret == EOK, "Failed to set Ccache dir");
+    ck_assert_msg(ret == EOK, "Failed to set Ccache dir");
 
     result = expand_ccname_template(tmp_ctx, kr, file_template, NULL, true, true);
 
-    fail_unless(result != NULL, "Cannot expand template [%s].", file_template);
-    fail_unless(strcmp(result, expected) == 0,
+    ck_assert_msg(result != NULL, "Cannot expand template [%s].", file_template);
+    ck_assert_msg(strcmp(result, expected) == 0,
                 "Expansion failed, result [%s], expected [%s].",
                 result, expected);
 }
@@ -376,19 +376,19 @@
     kr->pd->user = sss_create_internal_fqname(kr, USERNAME_CASE, DOMAIN_NAME);
     fail_unless(kr->pd->user != NULL);
     ret = dp_opt_set_string(kr->krb5_ctx->opts, KRB5_CCACHEDIR, CCACHE_DIR);
-    fail_unless(ret == EOK, "Failed to set Ccache dir");
+    ck_assert_msg(ret == EOK, "Failed to set Ccache dir");
 
     result = expand_ccname_template(tmp_ctx, kr, file_template, NULL, true, true);
 
-    fail_unless(result != NULL, "Cannot expand template [%s].", file_template);
-    fail_unless(strcmp(result, expected_cs) == 0,
+    ck_assert_msg(result != NULL, "Cannot expand template [%s].", file_template);
+    ck_assert_msg(strcmp(result, expected_cs) == 0,
                 "Expansion failed, result [%s], expected [%s].",
                 result, expected_cs);
 
     result = expand_ccname_template(tmp_ctx, kr, file_template, NULL, true, false);
 
-    fail_unless(result != NULL, "Cannot expand template [%s].", file_template);
-    fail_unless(strcmp(result, expected_ci) == 0,
+    ck_assert_msg(result != NULL, "Cannot expand template [%s].", file_template);
+    ck_assert_msg(strcmp(result, expected_ci) == 0,
                 "Expansion failed, result [%s], expected [%s].",
                 result, expected_ci);
 }
@@ -430,11 +430,11 @@
     do_test(BASE"_%d", CCACHE_DIR, BASE"_"CCACHE_DIR);
 
     ret = dp_opt_set_string(kr->krb5_ctx->opts, KRB5_CCACHEDIR, BASE"_%d");
-    fail_unless(ret == EOK, "Failed to set Ccache dir");
+    ck_assert_msg(ret == EOK, "Failed to set Ccache dir");
 
     result = expand_ccname_template(tmp_ctx, kr, "%d/"FILENAME, NULL, true, true);
 
-    fail_unless(result == NULL, "Using %%d in ccache dir should fail.");
+    ck_assert_msg(result == NULL, "Using %%d in ccache dir should fail.");
 }
 END_TEST
 
@@ -446,11 +446,11 @@
     do_test(BASE"_%P", CCACHE_DIR, BASE"_"PID);
 
     ret = dp_opt_set_string(kr->krb5_ctx->opts, KRB5_CCACHEDIR, BASE"_%P");
-    fail_unless(ret == EOK, "Failed to set Ccache dir");
+    ck_assert_msg(ret == EOK, "Failed to set Ccache dir");
 
     result = expand_ccname_template(tmp_ctx, kr, "%d/"FILENAME, NULL, true, true);
 
-    fail_unless(result == NULL, "Using %%P in ccache dir should fail.");
+    ck_assert_msg(result == NULL, "Using %%P in ccache dir should fail.");
 }
 END_TEST
 
@@ -469,15 +469,15 @@
 
     result = expand_ccname_template(tmp_ctx, kr, test_template, NULL, true, true);
 
-    fail_unless(result == NULL, "Unknown template [%s] should fail.",
+    ck_assert_msg(result == NULL, "Unknown template [%s] should fail.",
                 test_template);
 
     ret = dp_opt_set_string(kr->krb5_ctx->opts, KRB5_CCACHEDIR, BASE"_%X");
-    fail_unless(ret == EOK, "Failed to set Ccache dir");
+    ck_assert_msg(ret == EOK, "Failed to set Ccache dir");
     test_template = "%d/"FILENAME;
     result = expand_ccname_template(tmp_ctx, kr, test_template, NULL, true, true);
 
-    fail_unless(result == NULL, "Unknown template [%s] should fail.",
+    ck_assert_msg(result == NULL, "Unknown template [%s] should fail.",
                 test_template);
 }
 END_TEST
@@ -489,8 +489,7 @@
 
     result = expand_ccname_template(tmp_ctx, kr, test_template, NULL, true, true);
 
-    fail_unless(result == NULL, "Expected NULL as a result for an empty input.",
-                test_template);
+    ck_assert_msg(result == NULL, "Expected NULL as a result for an empty input.");
 }
 END_TEST
 
@@ -501,8 +500,8 @@
 
     result = expand_ccname_template(tmp_ctx, kr, test_template, NULL, true, true);
 
-    fail_unless(result != NULL, "Cannot expand template [%s].", test_template);
-    fail_unless(strcmp(result, test_template) == 0,
+    ck_assert_msg(result != NULL, "Cannot expand template [%s].", test_template);
+    ck_assert_msg(strcmp(result, test_template) == 0,
                 "Expansion failed, result [%s], expected [%s].",
                 result, test_template);
 }
@@ -518,8 +517,8 @@
     expected = BASE"/"UID"/"UID"/"UID"/"USERNAME;
     result = expand_ccname_template(tmp_ctx, kr, file_template, NULL, true, true);
 
-    fail_unless(result != NULL, "Cannot expand template [%s].", file_template);
-    fail_unless(strcmp(result, expected) == 0,
+    ck_assert_msg(result != NULL, "Cannot expand template [%s].", file_template);
+    ck_assert_msg(strcmp(result, expected) == 0,
                 "Expansion failed, result [%s], expected [%s].",
                 result, expected);
 
@@ -527,8 +526,8 @@
     expected = BASE"/%{unknown}";
     result = expand_ccname_template(tmp_ctx, kr, file_template, NULL, true, true);
 
-    fail_unless(result != NULL, "Cannot expand template [%s].", file_template);
-    fail_unless(strcmp(result, expected) == 0,
+    ck_assert_msg(result != NULL, "Cannot expand template [%s].", file_template);
+    ck_assert_msg(strcmp(result, expected) == 0,
                 "Expansion failed, result [%s], expected [%s].",
                 result, expected);
 }
@@ -540,41 +539,41 @@
     bool different_realm;
 
     ret = compare_principal_realm(NULL, "a", &different_realm);
-    fail_unless(ret == EINVAL, "NULL upn does not cause EINVAL.");
+    ck_assert_msg(ret == EINVAL, "NULL upn does not cause EINVAL.");
 
     ret = compare_principal_realm("a", NULL, &different_realm);
-    fail_unless(ret == EINVAL, "NULL realm does not cause EINVAL.");
+    ck_assert_msg(ret == EINVAL, "NULL realm does not cause EINVAL.");
 
     ret = compare_principal_realm("a", "b", NULL);
-    fail_unless(ret == EINVAL, "NULL different_realmbool " \
+    ck_assert_msg(ret == EINVAL, "NULL different_realmbool " \
                                "does not cause EINVAL.");
 
     ret = compare_principal_realm("", "a", &different_realm);
-    fail_unless(ret == EINVAL, "Empty upn does not cause EINVAL.");
+    ck_assert_msg(ret == EINVAL, "Empty upn does not cause EINVAL.");
 
     ret = compare_principal_realm("a", "", &different_realm);
-    fail_unless(ret == EINVAL, "Empty realm does not cause EINVAL.");
+    ck_assert_msg(ret == EINVAL, "Empty realm does not cause EINVAL.");
 
     ret = compare_principal_realm("ABC", "ABC", &different_realm);
-    fail_unless(ret == EINVAL, "Short UPN does not cause EINVAL.");
+    ck_assert_msg(ret == EINVAL, "Short UPN does not cause EINVAL.");
 
     ret = compare_principal_realm("userABC", "ABC", &different_realm);
-    fail_unless(ret == EINVAL, "Missing '@' does not cause EINVAL.");
+    ck_assert_msg(ret == EINVAL, "Missing '@' does not cause EINVAL.");
 
     ret = compare_principal_realm("user@ABC", "ABC", &different_realm);
-    fail_unless(ret == EOK, "Failure with same realm");
-    fail_unless(different_realm == false, "Same realm but " \
+    ck_assert_msg(ret == EOK, "Failure with same realm");
+    ck_assert_msg(different_realm == false, "Same realm but " \
                                           "different_realm is not false.");
 
     ret = compare_principal_realm("user@ABC", "DEF", &different_realm);
-    fail_unless(ret == EOK, "Failure with different realm");
-    fail_unless(different_realm == true, "Different realm but " \
+    ck_assert_msg(ret == EOK, "Failure with different realm");
+    ck_assert_msg(different_realm == true, "Different realm but " \
                                           "different_realm is not true.");
 
     ret = compare_principal_realm("user@ABC", "REALMNAMELONGERTHANUPN",
                                  &different_realm);
-    fail_unless(ret == EOK, "Failure with long realm name.");
-    fail_unless(different_realm == true, "Realm name longer than UPN but "
+    ck_assert_msg(ret == EOK, "Failure with long realm name.");
+    ck_assert_msg(different_realm == true, "Realm name longer than UPN but "
                                          "different_realm is not true.");
 }
 END_TEST
@@ -591,16 +590,16 @@
         fail_unless(i < len);
         ret = sss_utf8_case_eq((const uint8_t*)a[i].id_name,
                                (const uint8_t*)str[i*2]);
-        fail_unless(ret == EOK,
+        ck_assert_msg(ret == EOK,
                     "%s does not match %s", a[i].id_name, str[i*2]);
 
         ret = sss_utf8_case_eq((const uint8_t*)a[i].krb_primary,
                                (const uint8_t*)str[i*2+1]);
-        fail_unless(ret == EOK, "%s does not match %s",
+        ck_assert_msg(ret == EOK, "%s does not match %s",
                     a[i].krb_primary, str[i*2+1]);
         i++;
     }
-    fail_unless(len == i, "%u != %u", len, i);
+    ck_assert_msg(len == i, "%u != %u", (int) len, i);
 }
 
 START_TEST(test_parse_krb5_map_user)
@@ -616,25 +615,25 @@
         check_leaks_push(mem_ctx);
         ret = parse_krb5_map_user(mem_ctx, NULL, DOMAIN_NAME, &name_to_primary);
         fail_unless(ret == EOK);
-        fail_unless(name_to_primary[0].id_name == NULL &&
+        ck_assert(name_to_primary[0].id_name == NULL &&
                     name_to_primary[0].krb_primary == NULL);
         talloc_free(name_to_primary);
 
         ret = parse_krb5_map_user(mem_ctx, "", DOMAIN_NAME, &name_to_primary);
         fail_unless(ret == EOK);
-        fail_unless(name_to_primary[0].id_name == NULL &&
+        ck_assert(name_to_primary[0].id_name == NULL &&
                     name_to_primary[0].krb_primary == NULL);
         talloc_free(name_to_primary);
 
         ret = parse_krb5_map_user(mem_ctx, ",", DOMAIN_NAME, &name_to_primary);
         fail_unless(ret == EOK);
-        fail_unless(name_to_primary[0].id_name == NULL &&
+        ck_assert(name_to_primary[0].id_name == NULL &&
                     name_to_primary[0].krb_primary == NULL);
         talloc_free(name_to_primary);
 
         ret = parse_krb5_map_user(mem_ctx, ",,", DOMAIN_NAME, &name_to_primary);
         fail_unless(ret == EOK);
-        fail_unless(name_to_primary[0].id_name == NULL &&
+        ck_assert(name_to_primary[0].id_name == NULL &&
                     name_to_primary[0].krb_primary == NULL);
         talloc_free(name_to_primary);
 
--- a/src/tests/refcount-tests.c
+++ b/src/tests/refcount-tests.c
@@ -36,7 +36,7 @@
 
 /* Fail the test if object 'obj' does not have 'num' references. */
 #define REF_ASSERT(obj, num) \
-    fail_unless(((obj)->DO_NOT_TOUCH_THIS_MEMBER_refcount == (num)), \
+    ck_assert_msg(((obj)->DO_NOT_TOUCH_THIS_MEMBER_refcount == (num)), \
                 "Reference count of " #obj " should be %d but is %d", \
                 (num), (obj)->DO_NOT_TOUCH_THIS_MEMBER_refcount)
 
@@ -68,9 +68,9 @@
 #define CHECK_FILLER(target) do { \
     int _counter; \
     for (_counter = 0; _counter < FILLER_SIZE; _counter++) { \
-        fail_unless((target)->a[_counter] == 'a', "Corrupted memory in "  \
+        ck_assert_msg((target)->a[_counter] == 'a', "Corrupted memory in "  \
                     #target "->a[%d] of size %d", _counter, FILLER_SIZE); \
-        fail_unless((target)->b[_counter] == 'b', "Corrupted memory in "  \
+        ck_assert_msg((target)->b[_counter] == 'b', "Corrupted memory in "  \
                     #target "->b[%d] of size %d", _counter, FILLER_SIZE); \
     } \
 } while (0)
--- a/src/tests/resolv-tests.c
+++ b/src/tests/resolv-tests.c
@@ -65,20 +65,20 @@
 
     test_ctx = talloc_zero(global_talloc_context, struct resolv_test_ctx);
     if (test_ctx == NULL) {
-        fail("Could not allocate memory for test context");
+        ck_abort_msg("Could not allocate memory for test context");
         return ENOMEM;
     }
 
     test_ctx->ev = tevent_context_init(test_ctx);
     if (test_ctx->ev == NULL) {
-        fail("Could not init tevent context");
+        ck_abort_msg("Could not init tevent context");
         talloc_free(test_ctx);
         return EFAULT;
     }
 
     ret = resolv_init(test_ctx, test_ctx->ev, timeout, &test_ctx->resolv);
     if (ret != EOK) {
-        fail("Could not init resolv context");
+        ck_abort_msg("Could not init resolv context");
         talloc_free(test_ctx);
         return ret;
     }
@@ -227,13 +227,13 @@
 
     str_addr = resolv_get_string_address_index(ctx, rhe, 0);
     fail_if(str_addr == NULL);
-    fail_unless(strcmp(str_addr, "1.2.3.4") == 0, "Unexpected address\n");
+    ck_assert_msg(strcmp(str_addr, "1.2.3.4") == 0, "Unexpected address\n");
     talloc_free(str_addr);
 
     ptr_addr = resolv_get_string_ptr_address(ctx, rhe->family,
                                              rhe->addr_list[0]->ipaddr);
     fail_if(ptr_addr == NULL);
-    fail_unless(strcmp(ptr_addr, "4.3.2.1.in-addr.arpa.") == 0, "Unexpected PTR address\n");
+    ck_assert_msg(strcmp(ptr_addr, "4.3.2.1.in-addr.arpa.") == 0, "Unexpected PTR address\n");
     talloc_free(ptr_addr);
 
     talloc_free(rhe);
@@ -243,13 +243,13 @@
 
     str_addr = resolv_get_string_address_index(ctx, rhe, 0);
     fail_if(str_addr == NULL);
-    fail_unless(strcmp(str_addr, "2607:f8b0:400c:c03::6a") == 0, "Unexpected address\n");
+    ck_assert_msg(strcmp(str_addr, "2607:f8b0:400c:c03::6a") == 0, "Unexpected address\n");
     talloc_free(str_addr);
 
     ptr_addr = resolv_get_string_ptr_address(ctx, rhe->family,
                                              rhe->addr_list[0]->ipaddr);
     fail_if(ptr_addr == NULL);
-    fail_unless(strcmp(ptr_addr,
+    ck_assert_msg(strcmp(ptr_addr,
                        "a.6.0.0.0.0.0.0.0.0.0.0.0.0.0.0.3.0.c.0.c.0.0.4.0.b.8.f.7.0.6.2.ip6.arpa.") == 0, "Unexpected PTR address\n");
     talloc_free(ptr_addr);
 
@@ -303,7 +303,7 @@
 
     ret = setup_resolv_test(RESOLV_DEFAULT_TIMEOUT, &test_ctx);
     if (ret != EOK) {
-        fail("Could not set up test");
+        ck_abort_msg("Could not set up test");
         return;
     }
 
@@ -373,7 +373,7 @@
 
     ret = setup_resolv_test(RESOLV_DEFAULT_TIMEOUT, &test_ctx);
     if (ret != EOK) {
-        fail("Could not set up test");
+        ck_abort_msg("Could not set up test");
         return;
     }
 
@@ -431,7 +431,7 @@
 
     ret = setup_resolv_test(RESOLV_DEFAULT_TIMEOUT, &test_ctx);
     if (ret != EOK) {
-        fail("Could not set up test");
+        ck_abort_msg("Could not set up test");
         return;
     }
 
@@ -515,7 +515,7 @@
         break;
     }
     talloc_zfree(req);
-    fail_if(recv_status != EOK, "The recv function failed: %d", recv_status);
+    sss_ck_fail_if_msg(recv_status != EOK, "The recv function failed: %d", recv_status);
     DEBUG(SSSDBG_TRACE_LIBS, "recv status: %d\n", status);
 
     if (rhostent != NULL) {
@@ -537,7 +537,7 @@
 
     ret = setup_resolv_test(RESOLV_DEFAULT_TIMEOUT, &test_ctx);
     if (ret != EOK) {
-        fail("Could not set up test");
+        ck_abort_msg("Could not set up test");
         return;
     }
     test_ctx->tested_function = TESTING_HOSTNAME;
@@ -569,13 +569,13 @@
     struct resolv_test_ctx *test_ctx;
 
     ret = setup_resolv_test(RESOLV_DEFAULT_TIMEOUT, &test_ctx);
-    fail_if(ret != EOK, "Could not set up test");
+    sss_ck_fail_if_msg(ret != EOK, "Could not set up test");
     test_ctx->tested_function = TESTING_TXT;
 
     ck_leaks_push(test_ctx);
 
     req = resolv_gettxt_send(test_ctx, test_ctx->ev, test_ctx->resolv, txt_host);
-    fail_if(req == NULL, "Function resolv_gettxt_send failed");
+    sss_ck_fail_if_msg(req == NULL, "Function resolv_gettxt_send failed");
 
     tevent_req_set_callback(req, test_internet, test_ctx);
     ret = test_loop(test_ctx);
@@ -594,13 +594,13 @@
     struct resolv_test_ctx *test_ctx;
 
     ret = setup_resolv_test(RESOLV_DEFAULT_TIMEOUT, &test_ctx);
-    fail_if(ret != EOK, "Could not set up test");
+    sss_ck_fail_if_msg(ret != EOK, "Could not set up test");
     test_ctx->tested_function = TESTING_SRV;
 
     ck_leaks_push(test_ctx);
 
     req = resolv_getsrv_send(test_ctx, test_ctx->ev, test_ctx->resolv, srv_host);
-    fail_if(req == NULL, "Function resolv_getsrv_send failed");
+    sss_ck_fail_if_msg(req == NULL, "Function resolv_getsrv_send failed");
 
     tevent_req_set_callback(req, test_internet, test_ctx);
     ret = test_loop(test_ctx);
@@ -644,7 +644,7 @@
 
     ret = setup_resolv_test(RESOLV_DEFAULT_TIMEOUT, &test_ctx);
     if (ret != EOK) {
-        fail("Could not set up test");
+        ck_abort_msg("Could not set up test");
         return;
     }
 
@@ -653,7 +653,7 @@
                                     default_host_dbs);
     DEBUG(SSSDBG_TRACE_LIBS, "Sent resolv_gethostbyname\n");
     if (req == NULL) {
-        fail("Error calling resolv_gethostbyname_send");
+        ck_abort_msg("Error calling resolv_gethostbyname_send");
         goto done;
     }
 
@@ -665,13 +665,13 @@
 
     free_timer = tevent_add_timer(test_ctx->ev, test_ctx, free_tv, resolv_free_context, test_ctx->resolv);
     if (free_timer == NULL) {
-        fail("Error calling tevent_add_timer");
+        ck_abort_msg("Error calling tevent_add_timer");
         goto done;
     }
 
     terminate_timer = tevent_add_timer(test_ctx->ev, test_ctx, terminate_tv, resolv_free_done, test_ctx);
     if (terminate_timer == NULL) {
-        fail("Error calling tevent_add_timer");
+        ck_abort_msg("Error calling tevent_add_timer");
         goto done;
     }
 
@@ -704,7 +704,7 @@
 
     ret = setup_resolv_test(RESOLV_DEFAULT_TIMEOUT, &test_ctx);
     if (ret != EOK) {
-        fail("Could not set up test");
+        ck_abort_msg("Could not set up test");
         return;
     }
 
@@ -791,7 +791,7 @@
 
     ret = setup_resolv_test(RESOLV_DEFAULT_TIMEOUT, &test_ctx);
     if (ret != EOK) {
-        fail("Could not set up test");
+        ck_abort_msg("Could not set up test");
         return;
     }
 
@@ -854,7 +854,7 @@
 
     ret = setup_resolv_test(RESOLV_DEFAULT_TIMEOUT, &test_ctx);
     if (ret != EOK) {
-        fail("Could not set up test");
+        ck_abort_msg("Could not set up test");
         return;
     }
 
@@ -864,7 +864,7 @@
                                     default_host_dbs);
     DEBUG(SSSDBG_TRACE_LIBS, "Sent resolv_gethostbyname\n");
     if (req == NULL) {
-        fail("Error calling resolv_gethostbyname_send");
+        ck_abort_msg("Error calling resolv_gethostbyname_send");
         goto done;
     }
 
@@ -877,13 +877,13 @@
 
     free_timer = tevent_add_timer(test_ctx->ev, test_ctx, free_tv, resolv_free_req, req);
     if (free_timer == NULL) {
-        fail("Error calling tevent_add_timer");
+        ck_abort_msg("Error calling tevent_add_timer");
         goto done;
     }
 
     terminate_timer = tevent_add_timer(test_ctx->ev, test_ctx, terminate_tv, resolv_free_done, test_ctx);
     if (terminate_timer == NULL) {
-        fail("Error calling tevent_add_timer");
+        ck_abort_msg("Error calling tevent_add_timer");
         goto done;
     }
 
@@ -930,7 +930,7 @@
 
     ret = setup_resolv_test(0, &test_ctx);
     if (ret != EOK) {
-        fail("Could not set up test");
+        ck_abort_msg("Could not set up test");
         return;
     }
 
--- a/src/tests/responder_socket_access-tests.c
+++ b/src/tests/responder_socket_access-tests.c
@@ -70,15 +70,15 @@
     for (c = 0; s2a_data[c].exp_ret != -1; c++) {
         ret = csv_string_to_uid_array(global_talloc_context, s2a_data[c].inp,
                                       true, &uid_count, &uids);
-        fail_unless(ret == s2a_data[c].exp_ret,
+        ck_assert_msg(ret == s2a_data[c].exp_ret,
                     "csv_string_to_uid_array failed [%d][%s].", ret,
                                                                 strerror(ret));
         if (ret == 0) {
-            fail_unless(uid_count == s2a_data[c].exp_count,
-                        "Wrong number of values, expected [%d], got [%d].",
+            ck_assert_msg(uid_count == s2a_data[c].exp_count,
+                        "Wrong number of values, expected [%ld], got [%ld].",
                         s2a_data[c].exp_count, uid_count);
             for (d = 0; d < s2a_data[c].exp_count; d++) {
-                fail_unless(uids[d] == s2a_data[c].exp_uids[d],
+                ck_assert_msg(uids[d] == s2a_data[c].exp_uids[d],
                             "Wrong value, expected [%d], got [%d].\n",
                             s2a_data[c].exp_uids[d], uids[d]);
             }
@@ -116,7 +116,7 @@
         ret = check_allowed_uids(uid_check_data[c].uid,
                                  uid_check_data[c].allowed_uids_count,
                                  uid_check_data[c].allowed_uids);
-        fail_unless(ret == uid_check_data[c].exp_ret,
+        ck_assert_msg(ret == uid_check_data[c].exp_ret,
                     "check_allowed_uids failed [%d][%s].", ret, strerror(ret));
     }
 }
--- a/src/tests/sss_idmap-tests.c
+++ b/src/tests/sss_idmap-tests.c
@@ -64,8 +64,8 @@
     err = sss_idmap_init(idmap_talloc, global_talloc_context, idmap_talloc_free,
                          &idmap_ctx);
 
-    fail_unless(err == IDMAP_SUCCESS, "sss_idmap_init failed.");
-    fail_unless(idmap_ctx != NULL, "sss_idmap_init returned NULL.");
+    ck_assert_msg(err == IDMAP_SUCCESS, "sss_idmap_init failed.");
+    ck_assert_msg(idmap_ctx != NULL, "sss_idmap_init returned NULL.");
 }
 
 void idmap_ctx_setup_additional_seconary_slices(void)
@@ -75,8 +75,8 @@
     err = sss_idmap_init(idmap_talloc, global_talloc_context, idmap_talloc_free,
                          &idmap_ctx);
 
-    fail_unless(err == IDMAP_SUCCESS, "sss_idmap_init failed.");
-    fail_unless(idmap_ctx != NULL, "sss_idmap_init returned NULL.");
+    ck_assert_msg(err == IDMAP_SUCCESS, "sss_idmap_init failed.");
+    ck_assert_msg(idmap_ctx != NULL, "sss_idmap_init returned NULL.");
 
     idmap_ctx->idmap_opts.rangesize = 10;
     idmap_ctx->idmap_opts.extra_slice_init = 5;
@@ -87,7 +87,7 @@
     enum idmap_error_code err;
 
     err = sss_idmap_free(idmap_ctx);
-    fail_unless(err == IDMAP_SUCCESS, "sss_idmap_free failed.");
+    ck_assert_msg(err == IDMAP_SUCCESS, "sss_idmap_free failed.");
 }
 
 void idmap_add_domain_setup(void)
@@ -96,7 +96,7 @@
     struct sss_idmap_range range = {IDMAP_RANGE_MIN, IDMAP_RANGE_MAX};
 
     err = sss_idmap_add_domain(idmap_ctx, "test.dom", "S-1-5-21-1-2-3", &range);
-    fail_unless(err == IDMAP_SUCCESS, "sss_idmap_add_domain failed.");
+    ck_assert_msg(err == IDMAP_SUCCESS, "sss_idmap_add_domain failed.");
 }
 
 void idmap_add_domain_with_sec_slices_setup(void)
@@ -110,7 +110,7 @@
     err = sss_idmap_add_auto_domain_ex(idmap_ctx, "test.dom", "S-1-5-21-1-2-3",
                                        &range, NULL, 0, false, NULL, NULL);
 
-    fail_unless(err == IDMAP_SUCCESS, "sss_idmap_add_auto_domain_ex failed.");
+    ck_assert_msg(err == IDMAP_SUCCESS, "sss_idmap_add_auto_domain_ex failed.");
 }
 
 
@@ -136,7 +136,7 @@
     err = sss_idmap_add_auto_domain_ex(idmap_ctx, "test.dom", "S-1-5-21-1-2-3",
                                        &range, NULL, 0, false, cb, NULL);
 
-    fail_unless(err == IDMAP_SUCCESS, "sss_idmap_add_auto_domain_ex failed.");
+    ck_assert_msg(err == IDMAP_SUCCESS, "sss_idmap_add_auto_domain_ex failed.");
 }
 
 
@@ -176,7 +176,7 @@
     err = sss_idmap_add_auto_domain_ex(idmap_ctx, "test.dom", "S-1-5-21-1-2-3",
                                        &range, NULL, 0, false, cb2, pvt);
 
-    fail_unless(err == IDMAP_SUCCESS, "sss_idmap_add_auto_domain_ex failed.");
+    ck_assert_msg(err == IDMAP_SUCCESS, "sss_idmap_add_auto_domain_ex failed.");
 }
 
 START_TEST(idmap_test_is_domain_sid)
@@ -191,13 +191,13 @@
                               "S-1-5-21-1-2-3-4",
                               NULL };
 
-    fail_if(is_domain_sid(NULL), "is_domain_sid() returned true for [NULL]");
+    sss_ck_fail_if_msg(is_domain_sid(NULL), "is_domain_sid() returned true for [NULL]");
     for (c = 0; invalid[c] != NULL; c++) {
-        fail_if(is_domain_sid(invalid[c]),
+        sss_ck_fail_if_msg(is_domain_sid(invalid[c]),
                 "is_domain_sid() returned true for [%s]", invalid[c]);
     }
 
-    fail_unless(is_domain_sid("S-1-5-21-1-2-3"),
+    ck_assert_msg(is_domain_sid("S-1-5-21-1-2-3"),
                 "is_domain_sid() returned true for [S-1-5-21-1-2-3]");
 }
 END_TEST
@@ -209,11 +209,11 @@
 
     err = sss_idmap_init(NULL, NULL, NULL, &ctx);
 
-    fail_unless(err == IDMAP_SUCCESS, "sss_idmap_init failed.");
-    fail_unless(ctx != NULL, "sss_idmap_init returned NULL.");
+    ck_assert_msg(err == IDMAP_SUCCESS, "sss_idmap_init failed.");
+    ck_assert_msg(ctx != NULL, "sss_idmap_init returned NULL.");
 
     err = sss_idmap_free(ctx);
-    fail_unless(err == IDMAP_SUCCESS, "sss_idmap_free failed.");
+    ck_assert_msg(err == IDMAP_SUCCESS, "sss_idmap_free failed.");
 }
 END_TEST
 
@@ -225,11 +225,11 @@
     err = sss_idmap_init(idmap_talloc, global_talloc_context, idmap_talloc_free,
                          &ctx);
 
-    fail_unless(err == IDMAP_SUCCESS, "sss_idmap_init failed.");
-    fail_unless(ctx != NULL, "sss_idmap_init returned NULL.");
+    ck_assert_msg(err == IDMAP_SUCCESS, "sss_idmap_init failed.");
+    ck_assert_msg(ctx != NULL, "sss_idmap_init returned NULL.");
 
     err = sss_idmap_free(ctx);
-    fail_unless(err == IDMAP_SUCCESS, "sss_idmap_free failed.");
+    ck_assert_msg(err == IDMAP_SUCCESS, "sss_idmap_free failed.");
 }
 END_TEST
 
@@ -246,26 +246,26 @@
     struct sss_idmap_range range2 = {IDMAP_RANGE_MIN2, IDMAP_RANGE_MAX2};
 
     err = sss_idmap_add_domain(idmap_ctx, "test.dom", "S-1-5-21-1-2-3", &range);
-    fail_unless(err == IDMAP_SUCCESS, "sss_idmap_add_domain failed.");
+    ck_assert_msg(err == IDMAP_SUCCESS, "sss_idmap_add_domain failed.");
 
     err = sss_idmap_add_domain(idmap_ctx, "test.dom", "S-1-5-21-1-2-4",
                                &range2);
-    fail_unless(err == IDMAP_COLLISION,
+    ck_assert_msg(err == IDMAP_COLLISION,
                 "sss_idmap_add_domain added domain with the same name.");
 
     err = sss_idmap_add_domain(idmap_ctx, "test.dom2", "S-1-5-21-1-2-3",
                                &range2);
-    fail_unless(err == IDMAP_COLLISION,
+    ck_assert_msg(err == IDMAP_COLLISION,
                 "sss_idmap_add_domain added domain with the same SID.");
 
     err = sss_idmap_add_domain(idmap_ctx, "test.dom2", "S-1-5-21-1-2-4",
                                &range);
-    fail_unless(err == IDMAP_COLLISION,
+    ck_assert_msg(err == IDMAP_COLLISION,
                 "sss_idmap_add_domain added domain with the same range.");
 
     err = sss_idmap_add_domain(idmap_ctx, "test.dom2", "S-1-5-21-1-2-4",
                                &range2);
-    fail_unless(err == IDMAP_SUCCESS,
+    ck_assert_msg(err == IDMAP_SUCCESS,
                 "sss_idmap_add_domain failed to add second domain.");
 }
 END_TEST
@@ -278,21 +278,21 @@
 
     err = sss_idmap_add_domain_ex(idmap_ctx, "test.dom", "S-1-5-21-1-2-3",
                                   &range, NULL, 0, true);
-    fail_unless(err == IDMAP_SUCCESS, "sss_idmap_add_domain failed.");
+    ck_assert_msg(err == IDMAP_SUCCESS, "sss_idmap_add_domain failed.");
 
     err = sss_idmap_add_domain_ex(idmap_ctx, "test.dom", "S-1-5-21-1-2-4",
                                   &range2, NULL, 0, true);
-    fail_unless(err == IDMAP_COLLISION,
+    ck_assert_msg(err == IDMAP_COLLISION,
                 "sss_idmap_add_domain added domain with the same name.");
 
     err = sss_idmap_add_domain_ex(idmap_ctx, "test.dom2", "S-1-5-21-1-2-3",
                                   &range2, NULL, 0, true);
-    fail_unless(err == IDMAP_COLLISION,
+    ck_assert_msg(err == IDMAP_COLLISION,
                 "sss_idmap_add_domain added domain with the same SID.");
 
     err = sss_idmap_add_domain_ex(idmap_ctx, "test.dom2", "S-1-5-21-1-2-4",
                                   &range, NULL, 0, true);
-    fail_unless(err == IDMAP_SUCCESS,
+    ck_assert_msg(err == IDMAP_SUCCESS,
                 "sss_idmap_add_domain failed to add second domain with " \
                 "external mapping and the same range.");
 }
@@ -304,16 +304,16 @@
     uint32_t id;
 
     err = sss_idmap_sid_to_unix(idmap_ctx, "S-1-5-21-1-2-3333-1000", &id);
-    fail_unless(err == IDMAP_NO_DOMAIN, "sss_idmap_sid_to_unix did not detect "
+    ck_assert_msg(err == IDMAP_NO_DOMAIN, "sss_idmap_sid_to_unix did not detect "
                                         "unknown domain");
 
     err = sss_idmap_sid_to_unix(idmap_ctx, "S-1-5-21-1-2-3-10000", &id);
-    fail_unless(err == IDMAP_NO_RANGE, "sss_idmap_sid_to_unix did not detect "
+    ck_assert_msg(err == IDMAP_NO_RANGE, "sss_idmap_sid_to_unix did not detect "
                                        "RID out of range");
 
     err = sss_idmap_sid_to_unix(idmap_ctx, "S-1-5-21-1-2-3-1000", &id);
-    fail_unless(err == IDMAP_SUCCESS, "sss_idmap_sid_to_unix failed.");
-    fail_unless(id == (1000 + IDMAP_RANGE_MIN),
+    ck_assert_msg(err == IDMAP_SUCCESS, "sss_idmap_sid_to_unix failed.");
+    ck_assert_msg(id == (1000 + IDMAP_RANGE_MIN),
                 "sss_idmap_sid_to_unix returned wrong id, "
                 "got [%d], expected [%d].", id, 1000 + IDMAP_RANGE_MIN);
 }
@@ -327,25 +327,25 @@
     const uint32_t exp_id2 = 832610000;
 
     err = sss_idmap_sid_to_unix(idmap_ctx, "S-1-5-21-1-2-3333-1000", &id);
-    fail_unless(err == IDMAP_NO_DOMAIN, "sss_idmap_sid_to_unix did not detect "
+    ck_assert_msg(err == IDMAP_NO_DOMAIN, "sss_idmap_sid_to_unix did not detect "
                                         "unknown domain");
 
     /* RID out of primary and secondary range */
     err = sss_idmap_sid_to_unix(idmap_ctx, "S-1-5-21-1-2-3-4000000", &id);
-    fail_unless(err == IDMAP_SUCCESS, "sss_idmap_sid_to_unix failed.");
-    fail_unless(id == exp_id,
+    ck_assert_msg(err == IDMAP_SUCCESS, "sss_idmap_sid_to_unix failed.");
+    ck_assert_msg(id == exp_id,
                 "sss_idmap_sid_to_unix returned wrong id, "
                 "got [%d], expected [%d].", id, exp_id);
 
     err = sss_idmap_sid_to_unix(idmap_ctx, "S-1-5-21-1-2-3-1000", &id);
-    fail_unless(err == IDMAP_SUCCESS, "sss_idmap_sid_to_unix failed.");
-    fail_unless(id == (1000 + IDMAP_RANGE_MIN),
+    ck_assert_msg(err == IDMAP_SUCCESS, "sss_idmap_sid_to_unix failed.");
+    ck_assert_msg(id == (1000 + IDMAP_RANGE_MIN),
                 "sss_idmap_sid_to_unix returned wrong id, "
                 "got [%d], expected [%d].", id, 1000 + IDMAP_RANGE_MIN);
 
     err = sss_idmap_sid_to_unix(idmap_ctx, "S-1-5-21-1-2-3-210000", &id);
-    fail_unless(err == IDMAP_SUCCESS, "sss_idmap_sid_to_unix failed.");
-    fail_unless(id == exp_id2,
+    ck_assert_msg(err == IDMAP_SUCCESS, "sss_idmap_sid_to_unix failed.");
+    ck_assert_msg(id == exp_id2,
                 "sss_idmap_sid_to_unix returned wrong id, "
                 "got [%d], expected [%d].", id, exp_id2);
 }
@@ -359,20 +359,20 @@
     const uint32_t exp_id = 351800000;
 
     err = sss_idmap_unix_to_sid(idmap_ctx, exp_id, &sid);
-    fail_unless(err == IDMAP_NO_DOMAIN, "sss_idmap_unix_to_sid did not detect "
+    ck_assert_msg(err == IDMAP_NO_DOMAIN, "sss_idmap_unix_to_sid did not detect "
                                         "id out of range");
 
     /* RID out of primary and secondary range */
     err = sss_idmap_sid_to_unix(idmap_ctx, "S-1-5-21-1-2-3-4000000", &id);
-    fail_unless(err == IDMAP_SUCCESS, "sss_idmap_sid_to_unix failed.");
-    fail_unless(id == exp_id,
+    ck_assert_msg(err == IDMAP_SUCCESS, "sss_idmap_sid_to_unix failed.");
+    ck_assert_msg(id == exp_id,
                 "sss_idmap_sid_to_unix returned wrong id, "
                 "got [%d], expected [%d].", id, exp_id);
 
     /* Secondary ranges were expanded by sid_to_unix call */
     err = sss_idmap_unix_to_sid(idmap_ctx, exp_id, &sid);
-    fail_unless(err == IDMAP_SUCCESS, "sss_idmap_unix_to_sid failed.");
-    fail_unless(strcmp(sid, "S-1-5-21-1-2-3-4000000") == 0,
+    ck_assert_msg(err == IDMAP_SUCCESS, "sss_idmap_unix_to_sid failed.");
+    ck_assert_msg(strcmp(sid, "S-1-5-21-1-2-3-4000000") == 0,
                 "sss_idmap_unix_to_sid returned wrong SID, "
                 "expected [%s], got [%s].", "S-1-5-21-1-2-3-4000000", sid);
     sss_idmap_free_sid(idmap_ctx, sid);
@@ -388,12 +388,12 @@
     const uint32_t exp_id = 351800000;
 
     err = sss_idmap_unix_to_sid(idmap_ctx, exp_id, &sid);
-    fail_unless(err == IDMAP_NO_DOMAIN, "sss_idmap_unix_to_sid did not detect "
+    ck_assert_msg(err == IDMAP_NO_DOMAIN, "sss_idmap_unix_to_sid did not detect "
                                         "id out of range");
 
     /* RID out of primary and secondary range */
     err = sss_idmap_sid_to_unix(idmap_ctx, "S-1-5-21-1-2-3-4000000", &id);
-    fail_unless(err == IDMAP_ERROR, "sss_idmap_sid_to_unix failed.");
+    ck_assert_msg(err == IDMAP_ERROR, "sss_idmap_sid_to_unix failed.");
 }
 END_TEST
 
@@ -406,14 +406,14 @@
     const char *exp_stored_data = "test.dom, S-1-5-21-1-2-3 S-1-5-21-1-2-3-4000000, 351800000, 351999999, 4000000";
 
     err = sss_idmap_unix_to_sid(idmap_ctx, exp_id, &sid);
-    fail_unless(err == IDMAP_NO_DOMAIN, "sss_idmap_unix_to_sid did not detect "
+    ck_assert_msg(err == IDMAP_NO_DOMAIN, "sss_idmap_unix_to_sid did not detect "
                                         "id out of range");
 
     /* RID out of primary and secondary range */
     err = sss_idmap_sid_to_unix(idmap_ctx, "S-1-5-21-1-2-3-4000000", &id);
-    fail_unless(err == IDMAP_SUCCESS, "sss_idmap_sid_to_unix failed.");
+    ck_assert_msg(err == IDMAP_SUCCESS, "sss_idmap_sid_to_unix failed.");
 
-    fail_unless(strcmp(data,
+    ck_assert_msg(strcmp(data,
                        exp_stored_data) == 0,
                 "Storing dynamic domains idmapping failed: "
                 "expected [%s] but got [%s].", exp_stored_data, data);
@@ -431,24 +431,24 @@
     unsigned int ids[max_rid + 1];
 
     tmp_ctx = talloc_new(NULL);
-    fail_unless(tmp_ctx != NULL, "Out of memory.");
+    ck_assert_msg(tmp_ctx != NULL, "Out of memory.");
 
     for (unsigned int i = 0; i < max_rid + 1; i++) {
         sids[i] = talloc_asprintf(tmp_ctx, "%s-%u", dom_prefix, i);
 
-        fail_unless(sids[i] != NULL, "Out of memory");
+        ck_assert_msg(sids[i] != NULL, "Out of memory");
 
         err = sss_idmap_sid_to_unix(idmap_ctx, sids[i], &ids[i]);
-        fail_unless(err == IDMAP_SUCCESS, "sss_idmap_sid_to_unix failed.");
+        ck_assert_msg(err == IDMAP_SUCCESS, "sss_idmap_sid_to_unix failed.");
     }
 
     for (unsigned int i = 0; i < max_rid + 1; i++) {
         char *sid;
 
         err = sss_idmap_unix_to_sid(idmap_ctx, ids[i], &sid);
-        fail_unless(err == IDMAP_SUCCESS, "sss_idmap_sid_to_unix failed.");
+        ck_assert_msg(err == IDMAP_SUCCESS, "sss_idmap_sid_to_unix failed.");
 
-        fail_unless(strcmp(sid, sids[i]) == 0,
+        ck_assert_msg(strcmp(sid, sids[i]) == 0,
                     "sss_idmap_unix_to_sid returned wrong sid, "
                     "got [%s], expected [%s].", sid, sids[i]);
         talloc_free(sid);
@@ -467,11 +467,11 @@
 
     err = sss_idmap_sid_to_bin_sid(idmap_ctx, "S-1-5-21-1-2-3-1000",
                                    &bin_sid, &length);
-    fail_unless(err == IDMAP_SUCCESS, "Failed to convert SID to binary SID");
+    ck_assert_msg(err == IDMAP_SUCCESS, "Failed to convert SID to binary SID");
 
     err = sss_idmap_bin_sid_to_unix(idmap_ctx, bin_sid, length , &id);
-    fail_unless(err == IDMAP_SUCCESS, "sss_idmap_bin_sid_to_unix failed.");
-    fail_unless(id == (1000 + IDMAP_RANGE_MIN),
+    ck_assert_msg(err == IDMAP_SUCCESS, "sss_idmap_bin_sid_to_unix failed.");
+    ck_assert_msg(id == (1000 + IDMAP_RANGE_MIN),
                 "sss_idmap_bin_sid_to_unix returned wrong id, "
                 "got [%d], expected [%d].", id, 1000 + IDMAP_RANGE_MIN);
 
@@ -486,11 +486,11 @@
     struct sss_dom_sid *dom_sid = NULL;
 
     err = sss_idmap_sid_to_dom_sid(idmap_ctx, "S-1-5-21-1-2-3-1000", &dom_sid);
-    fail_unless(err == IDMAP_SUCCESS, "Failed to convert SID to SID structure");
+    ck_assert_msg(err == IDMAP_SUCCESS, "Failed to convert SID to SID structure");
 
     err = sss_idmap_dom_sid_to_unix(idmap_ctx, dom_sid, &id);
-    fail_unless(err == IDMAP_SUCCESS, "sss_idmap_dom_sid_to_unix failed.");
-    fail_unless(id == (1000 + IDMAP_RANGE_MIN),
+    ck_assert_msg(err == IDMAP_SUCCESS, "sss_idmap_dom_sid_to_unix failed.");
+    ck_assert_msg(id == (1000 + IDMAP_RANGE_MIN),
                 "sss_idmap_dom_sid_to_unix returned wrong id, "
                 "got [%d], expected [%d].", id, 1000 + IDMAP_RANGE_MIN);
 
@@ -504,12 +504,12 @@
     char *sid;
 
     err = sss_idmap_unix_to_sid(idmap_ctx, 10000, &sid);
-    fail_unless(err == IDMAP_NO_DOMAIN, "sss_idmap_unix_to_sid did not detect "
+    ck_assert_msg(err == IDMAP_NO_DOMAIN, "sss_idmap_unix_to_sid did not detect "
                                         "id out of range");
 
     err = sss_idmap_unix_to_sid(idmap_ctx, 2234, &sid);
-    fail_unless(err == IDMAP_SUCCESS, "sss_idmap_unix_to_sid failed.");
-    fail_unless(strcmp(sid, "S-1-5-21-1-2-3-1000") == 0,
+    ck_assert_msg(err == IDMAP_SUCCESS, "sss_idmap_unix_to_sid failed.");
+    ck_assert_msg(strcmp(sid, "S-1-5-21-1-2-3-1000") == 0,
                 "sss_idmap_unix_to_sid returned wrong SID, "
                 "expected [%s], got [%s].", "S-1-5-21-1-2-3-1000", sid);
 
@@ -525,12 +525,12 @@
     err = sss_idmap_unix_to_sid(idmap_ctx,
                                 IDMAP_RANGE_MIN + idmap_ctx->idmap_opts.rangesize + 1,
                                 &sid);
-    fail_unless(err == IDMAP_NO_DOMAIN, "sss_idmap_unix_to_sid did not detect "
+    ck_assert_msg(err == IDMAP_NO_DOMAIN, "sss_idmap_unix_to_sid did not detect "
                                         "id out of range");
 
     err = sss_idmap_unix_to_sid(idmap_ctx, 2234, &sid);
-    fail_unless(err == IDMAP_SUCCESS, "sss_idmap_unix_to_sid failed.");
-    fail_unless(strcmp(sid, "S-1-5-21-1-2-3-1000") == 0,
+    ck_assert_msg(err == IDMAP_SUCCESS, "sss_idmap_unix_to_sid failed.");
+    ck_assert_msg(strcmp(sid, "S-1-5-21-1-2-3-1000") == 0,
                 "sss_idmap_unix_to_sid returned wrong SID, "
                 "expected [%s], got [%s].", "S-1-5-21-1-2-3-1000", sid);
 
@@ -540,8 +540,8 @@
     err = sss_idmap_unix_to_sid(idmap_ctx,
                                 313800000,
                                 &sid);
-    fail_unless(err == IDMAP_SUCCESS, "sss_idmap_unix_to_sid failed.");
-    fail_unless(strcmp(sid, "S-1-5-21-1-2-3-400000") == 0,
+    ck_assert_msg(err == IDMAP_SUCCESS, "sss_idmap_unix_to_sid failed.");
+    ck_assert_msg(strcmp(sid, "S-1-5-21-1-2-3-400000") == 0,
                 "sss_idmap_unix_to_sid returned wrong SID, "
                 "expected [%s], got [%s].", "S-1-5-21-1-2-3-400000", sid);
 
@@ -556,16 +556,16 @@
     char *sid = NULL;
 
     err = sss_idmap_unix_to_dom_sid(idmap_ctx, 10000, &dom_sid);
-    fail_unless(err == IDMAP_NO_DOMAIN, "sss_idmap_unix_to_dom_sid did not detect "
+    ck_assert_msg(err == IDMAP_NO_DOMAIN, "sss_idmap_unix_to_dom_sid did not detect "
                                         "id out of range");
 
     err = sss_idmap_unix_to_dom_sid(idmap_ctx, 2234, &dom_sid);
-    fail_unless(err == IDMAP_SUCCESS, "sss_idmap_unix_to_dom_sid failed.");
+    ck_assert_msg(err == IDMAP_SUCCESS, "sss_idmap_unix_to_dom_sid failed.");
 
     err = sss_idmap_dom_sid_to_sid(idmap_ctx, dom_sid, &sid);
-    fail_unless(err == IDMAP_SUCCESS, "sss_idmap_dom_sid_to_sid failed.");
+    ck_assert_msg(err == IDMAP_SUCCESS, "sss_idmap_dom_sid_to_sid failed.");
 
-    fail_unless(strcmp(sid, "S-1-5-21-1-2-3-1000") == 0,
+    ck_assert_msg(strcmp(sid, "S-1-5-21-1-2-3-1000") == 0,
                 "sss_idmap_unix_to_dom_sid returned wrong SID, "
                 "expected [%s], got [%s].", "S-1-5-21-1-2-3-1000", sid);
 
@@ -582,16 +582,16 @@
     char *sid = NULL;
 
     err = sss_idmap_unix_to_bin_sid(idmap_ctx, 10000, &bin_sid, &length);
-    fail_unless(err == IDMAP_NO_DOMAIN, "sss_idmap_unix_to_bin_sid did not detect "
+    ck_assert_msg(err == IDMAP_NO_DOMAIN, "sss_idmap_unix_to_bin_sid did not detect "
                                         "id out of range");
 
     err = sss_idmap_unix_to_bin_sid(idmap_ctx, 2234, &bin_sid, &length);
-    fail_unless(err == IDMAP_SUCCESS, "sss_idmap_unix_to_bin_sid failed.");
+    ck_assert_msg(err == IDMAP_SUCCESS, "sss_idmap_unix_to_bin_sid failed.");
 
     err = sss_idmap_bin_sid_to_sid(idmap_ctx, bin_sid, length, &sid);
-    fail_unless(err == IDMAP_SUCCESS, "sss_idmap_bin_sid_to_sid failed.");
+    ck_assert_msg(err == IDMAP_SUCCESS, "sss_idmap_bin_sid_to_sid failed.");
 
-    fail_unless(strcmp(sid, "S-1-5-21-1-2-3-1000") == 0,
+    ck_assert_msg(strcmp(sid, "S-1-5-21-1-2-3-1000") == 0,
                 "sss_idmap_unix_to_bin_sid returned wrong SID, "
                 "expected [%s], got [%s].", "S-1-5-21-1-2-3-1000", sid);
 
@@ -610,17 +610,17 @@
     err = sss_idmap_bin_sid_to_dom_sid(idmap_ctx, test_bin_sid,
                                        test_bin_sid_length, &dom_sid);
 
-    fail_unless(err == IDMAP_SUCCESS,
+    ck_assert_msg(err == IDMAP_SUCCESS,
                 "Failed to convert binary SID to struct sss_dom_sid.");
 
     err = sss_idmap_dom_sid_to_bin_sid(idmap_ctx, dom_sid, &new_bin_sid,
                                        &new_bin_sid_length);
-    fail_unless(err == IDMAP_SUCCESS,
+    ck_assert_msg(err == IDMAP_SUCCESS,
                 "Failed to convert struct sss_dom_sid to binary SID.");
 
-    fail_unless(new_bin_sid_length == test_bin_sid_length,
+    ck_assert_msg(new_bin_sid_length == test_bin_sid_length,
                 "Length of binary SIDs do not match.");
-    fail_unless(memcmp(test_bin_sid, new_bin_sid, test_bin_sid_length) == 0,
+    ck_assert_msg(memcmp(test_bin_sid, new_bin_sid, test_bin_sid_length) == 0,
                 "Binary SIDs do not match.");
 
     sss_idmap_free_dom_sid(idmap_ctx, dom_sid);
@@ -636,17 +636,17 @@
 
     err = sss_idmap_sid_to_dom_sid(idmap_ctx, "S-1-5-21-1-2-3-1000", &dom_sid);
 
-    fail_unless(err == IDMAP_SUCCESS,
+    ck_assert_msg(err == IDMAP_SUCCESS,
                 "Failed to convert SID string to struct sss_dom_sid.");
 
     err = sss_idmap_dom_sid_to_sid(idmap_ctx, dom_sid, &new_sid);
-    fail_unless(err == IDMAP_SUCCESS,
+    ck_assert_msg(err == IDMAP_SUCCESS,
                 "Failed to convert struct sss_dom_sid to SID string.");
 
-    fail_unless(new_sid != NULL, "SID string not set");
-    fail_unless(strlen("S-1-5-21-1-2-3-1000") == strlen(new_sid),
+    ck_assert_msg(new_sid != NULL, "SID string not set");
+    ck_assert_msg(strlen("S-1-5-21-1-2-3-1000") == strlen(new_sid),
                 "Length of SID strings do not match.");
-    fail_unless(strcmp("S-1-5-21-1-2-3-1000", new_sid) == 0,
+    ck_assert_msg(strcmp("S-1-5-21-1-2-3-1000", new_sid) == 0,
                 "SID strings do not match.");
 
     sss_idmap_free_dom_sid(idmap_ctx, dom_sid);
@@ -662,23 +662,23 @@
 
     err = sss_idmap_sid_to_dom_sid(idmap_ctx, large_sid, &dom_sid);
 
-    fail_unless(err == IDMAP_SUCCESS,
+    ck_assert_msg(err == IDMAP_SUCCESS,
                 "Failed to convert SID string with a UINT32_MAX component "
                 "to struct sss_dom_sid.");
 
     err = sss_idmap_dom_sid_to_sid(idmap_ctx, dom_sid, &new_sid);
-    fail_unless(err == IDMAP_SUCCESS,
+    ck_assert_msg(err == IDMAP_SUCCESS,
                 "Failed to convert struct sss_dom_sid to SID string.");
 
-    fail_unless(new_sid != NULL, "SID string not set");
-    fail_unless(strlen(large_sid) == strlen(new_sid),
+    ck_assert_msg(new_sid != NULL, "SID string not set");
+    ck_assert_msg(strlen(large_sid) == strlen(new_sid),
                 "Length of SID strings do not match.");
-    fail_unless(strcmp(large_sid, new_sid) == 0,
+    ck_assert_msg(strcmp(large_sid, new_sid) == 0,
                 "SID strings do not match, expected [%s], got [%s]",
                 large_sid, new_sid);
 
     err = sss_idmap_sid_to_dom_sid(idmap_ctx, too_large_sid, &dom_sid);
-    fail_unless(err == IDMAP_SID_INVALID,
+    ck_assert_msg(err == IDMAP_SID_INVALID,
                 "Trying to convert  a SID with a too large component "
                 "did not return IDMAP_SID_INVALID");
 
@@ -694,12 +694,12 @@
     uint8_t *bin_sid = NULL;
 
     err = sss_idmap_sid_to_bin_sid(idmap_ctx, test_sid, &bin_sid, &length);
-    fail_unless(err == IDMAP_SUCCESS,
+    ck_assert_msg(err == IDMAP_SUCCESS,
                 "Failed to convert SID string to binary sid.");
-    fail_unless(length == test_bin_sid_length,
-                "Size of binary SIDs do not match, got [%d], expected [%d]",
+    ck_assert_msg(length == test_bin_sid_length,
+                "Size of binary SIDs do not match, got [%ld], expected [%ld]",
                 length, test_bin_sid_length);
-    fail_unless(memcmp(bin_sid, test_bin_sid, test_bin_sid_length) == 0,
+    ck_assert_msg(memcmp(bin_sid, test_bin_sid, test_bin_sid_length) == 0,
                 "Binary SIDs do not match");
 
     sss_idmap_free_bin_sid(idmap_ctx, bin_sid);
@@ -713,9 +713,9 @@
 
     err = sss_idmap_bin_sid_to_sid(idmap_ctx, test_bin_sid, test_bin_sid_length,
                                    &sid);
-    fail_unless(err == IDMAP_SUCCESS,
+    ck_assert_msg(err == IDMAP_SUCCESS,
                 "Failed to convert binary SID to SID string.");
-    fail_unless(strcmp(sid, test_sid) == 0, "SID strings do not match, "
+    ck_assert_msg(strcmp(sid, test_sid) == 0, "SID strings do not match, "
                                             "expected [%s], get [%s]",
                                             test_sid, sid);
 
@@ -730,14 +730,14 @@
     struct dom_sid *new_smb_sid = NULL;
 
     err = sss_idmap_smb_sid_to_dom_sid(idmap_ctx, &test_smb_sid, &dom_sid);
-    fail_unless(err == IDMAP_SUCCESS,
+    ck_assert_msg(err == IDMAP_SUCCESS,
                 "Failed to convert samba dom_sid to struct sss_dom_sid.");
 
     err = sss_idmap_dom_sid_to_smb_sid(idmap_ctx, dom_sid, &new_smb_sid);
-    fail_unless(err == IDMAP_SUCCESS,
+    ck_assert_msg(err == IDMAP_SUCCESS,
                 "Failed to convert struct sss_dom_sid to samba dom_sid.");
 
-    fail_unless(memcmp(&test_smb_sid, new_smb_sid, sizeof(struct dom_sid)) == 0,
+    ck_assert_msg(memcmp(&test_smb_sid, new_smb_sid, sizeof(struct dom_sid)) == 0,
                 "Samba dom_sid-s do not match.");
 
     sss_idmap_free_dom_sid(idmap_ctx, dom_sid);
@@ -753,12 +753,12 @@
 
     err = sss_idmap_smb_sid_to_bin_sid(idmap_ctx, &test_smb_sid,
                                        &bin_sid, &length);
-    fail_unless(err == IDMAP_SUCCESS,
+    ck_assert_msg(err == IDMAP_SUCCESS,
                 "Failed to convert samba dom_sid to binary sid.");
-    fail_unless(length == test_bin_sid_length,
-                "Size of binary SIDs do not match, got [%d], expected [%d]",
+    ck_assert_msg(length == test_bin_sid_length,
+                "Size of binary SIDs do not match, got [%ld], expected [%ld]",
                 length, test_bin_sid_length);
-    fail_unless(memcmp(bin_sid, test_bin_sid, test_bin_sid_length) == 0,
+    ck_assert_msg(memcmp(bin_sid, test_bin_sid, test_bin_sid_length) == 0,
                 "Binary SIDs do not match.");
 
     sss_idmap_free_bin_sid(idmap_ctx, bin_sid);
@@ -772,9 +772,9 @@
 
     err = sss_idmap_bin_sid_to_smb_sid(idmap_ctx, test_bin_sid,
                                        test_bin_sid_length, &smb_sid);
-    fail_unless(err == IDMAP_SUCCESS,
+    ck_assert_msg(err == IDMAP_SUCCESS,
                 "Failed to convert binary sid to samba dom_sid.");
-    fail_unless(memcmp(&test_smb_sid, smb_sid, sizeof(struct dom_sid)) == 0,
+    ck_assert_msg(memcmp(&test_smb_sid, smb_sid, sizeof(struct dom_sid)) == 0,
                  "Samba dom_sid structs do not match.");
 
     sss_idmap_free_smb_sid(idmap_ctx, smb_sid);
@@ -787,9 +787,9 @@
     char *sid = NULL;
 
     err = sss_idmap_smb_sid_to_sid(idmap_ctx, &test_smb_sid, &sid);
-    fail_unless(err == IDMAP_SUCCESS,
+    ck_assert_msg(err == IDMAP_SUCCESS,
                 "Failed to convert samba dom_sid to sid string.");
-    fail_unless(strcmp(sid, test_sid) == 0, "SID strings do not match, "
+    ck_assert_msg(strcmp(sid, test_sid) == 0, "SID strings do not match, "
                                             "expected [%s], get [%s]",
                                             test_sid, sid);
 
@@ -803,9 +803,9 @@
     struct dom_sid *smb_sid = NULL;
 
     err = sss_idmap_sid_to_smb_sid(idmap_ctx, test_sid, &smb_sid);
-    fail_unless(err == IDMAP_SUCCESS,
+    ck_assert_msg(err == IDMAP_SUCCESS,
                 "Failed to convert binary sid to samba dom_sid.");
-    fail_unless(memcmp(&test_smb_sid, smb_sid, sizeof(struct dom_sid)) == 0,
+    ck_assert_msg(memcmp(&test_smb_sid, smb_sid, sizeof(struct dom_sid)) == 0,
                  "Samba dom_sid structs do not match.");
 
     sss_idmap_free_smb_sid(idmap_ctx, smb_sid);
--- a/src/tests/strtonum-tests.c
+++ b/src/tests/strtonum-tests.c
@@ -32,32 +32,32 @@
  ********************/
 #define EXPECT_UNSET_ERRNO(error) \
     do { \
-        fail_unless(error == 0, "errno unexpectedly set to %d[%s]", \
+        ck_assert_msg(error == 0, "errno unexpectedly set to %d[%s]", \
                                 error, strerror(error)); \
     } while(0)
 
 #define CHECK_RESULT(expected, actual) \
     do { \
-        fail_unless(actual == expected, "Expected %jd, got %jd", \
+        ck_assert_msg(actual == expected, "Expected %jd, got %jd", \
                                         (intmax_t)expected, (intmax_t)actual); \
     } while(0)
 
 #define CHECK_ERRNO(expected, actual) \
     do { \
-        fail_unless(actual == expected, "Expected errno %d[%s], got %d[%s]", \
+        ck_assert_msg(actual == expected, "Expected errno %d[%s], got %d[%s]", \
                                         expected, strerror(expected), \
                                         actual, strerror(actual)); \
     } while(0)
 
 #define CHECK_ENDPTR(expected, actual) \
     do { \
-        fail_unless(actual == expected, "Expected endptr %p, got %p", \
+        ck_assert_msg(actual == expected, "Expected endptr %p, got %p", \
                                          expected, actual); \
     } while(0)
 
 #define CHECK_ZERO_ENDPTR(endptr) \
     do { \
-        fail_unless(endptr && *endptr == '\0', "Invalid endptr"); \
+        ck_assert_msg(endptr && *endptr == '\0', "Invalid endptr"); \
     } while(0)
 
 /******************
--- a/src/tests/sysdb-tests.c
+++ b/src/tests/sysdb-tests.c
@@ -33,6 +33,7 @@
 #include "db/sysdb_services.h"
 #include "db/sysdb_autofs.h"
 #include "tests/common.h"
+#include "tests/common_check.h"
 
 #define TESTS_PATH "tp_" BASE_FILE_STEM
 #define TEST_CONF_FILE "tests_conf.ldb"
@@ -77,13 +78,13 @@
     /* (relative to current dir) */
     ret = mkdir(TESTS_PATH, 0775);
     if (ret == -1 && errno != EEXIST) {
-        fail("Could not create %s directory", TESTS_PATH);
+        ck_abort_msg("Could not create %s directory", TESTS_PATH);
         return EFAULT;
     }
 
     test_ctx = talloc_zero(NULL, struct sysdb_test_ctx);
     if (test_ctx == NULL) {
-        fail("Could not allocate memory for test context");
+        ck_abort_msg("Could not allocate memory for test context");
         return ENOMEM;
     }
 
@@ -92,14 +93,14 @@
      */
     test_ctx->ev = tevent_context_init(test_ctx);
     if (test_ctx->ev == NULL) {
-        fail("Could not create event context");
+        ck_abort_msg("Could not create event context");
         talloc_free(test_ctx);
         return EIO;
     }
 
     conf_db = talloc_asprintf(test_ctx, "%s/%s", TESTS_PATH, TEST_CONF_FILE);
     if (conf_db == NULL) {
-        fail("Out of memory, aborting!");
+        ck_abort_msg("Out of memory, aborting!");
         talloc_free(test_ctx);
         return ENOMEM;
     }
@@ -108,7 +109,7 @@
     /* Connect to the conf db */
     ret = confdb_init(test_ctx, &test_ctx->confdb, conf_db);
     if (ret != EOK) {
-        fail("Could not initialize connection to the confdb");
+        ck_abort_msg("Could not initialize connection to the confdb");
         talloc_free(test_ctx);
         return ret;
     }
@@ -117,7 +118,7 @@
     ret = confdb_add_param(test_ctx->confdb, true,
                            "config/sssd", "domains", val);
     if (ret != EOK) {
-        fail("Could not initialize domains placeholder");
+        ck_abort_msg("Could not initialize domains placeholder");
         talloc_free(test_ctx);
         return ret;
     }
@@ -126,7 +127,7 @@
     ret = confdb_add_param(test_ctx->confdb, true,
                            "config/domain/LOCAL", "id_provider", val);
     if (ret != EOK) {
-        fail("Could not initialize provider");
+        ck_abort_msg("Could not initialize provider");
         talloc_free(test_ctx);
         return ret;
     }
@@ -135,7 +136,7 @@
     ret = confdb_add_param(test_ctx->confdb, true,
                            "config/domain/LOCAL", "enumerate", val);
     if (ret != EOK) {
-        fail("Could not initialize LOCAL domain");
+        ck_abort_msg("Could not initialize LOCAL domain");
         talloc_free(test_ctx);
         return ret;
     }
@@ -144,7 +145,7 @@
     ret = confdb_add_param(test_ctx->confdb, true,
                            "config/domain/LOCAL", "cache_credentials", val);
     if (ret != EOK) {
-        fail("Could not initialize LOCAL domain");
+        ck_abort_msg("Could not initialize LOCAL domain");
         talloc_free(test_ctx);
         return ret;
     }
@@ -152,7 +153,7 @@
     ret = sssd_domain_init(test_ctx, test_ctx->confdb, TEST_DOM_NAME,
                            TESTS_PATH, &test_ctx->domain);
     if (ret != EOK) {
-        fail("Could not initialize connection to the sysdb (%d)", ret);
+        ck_abort_msg("Could not initialize connection to the sysdb (%d)", ret);
         talloc_free(test_ctx);
         return ret;
     }
@@ -175,7 +176,7 @@
 
     new_null_pointer_size = talloc_total_size(NULL);
     if(new_null_pointer_size != ctx->null_pointer_size) {
-        fail("NULL pointer leaked memory, was %zu, is %zu\n",
+        ck_abort_msg("NULL pointer leaked memory, was %zu, is %zu\n",
              ctx->null_pointer_size, new_null_pointer_size);
     }
 }
@@ -326,9 +327,9 @@
     int ret;
 
     homedir = talloc_asprintf(data, "/home/testuser%d", data->uid);
-    fail_if(homedir == NULL, "OOM");
+    sss_ck_fail_if_msg(homedir == NULL, "OOM");
     gecos = talloc_asprintf(data, "Test User %d", data->uid);
-    fail_if(gecos == NULL, "OOM");
+    sss_ck_fail_if_msg(gecos == NULL, "OOM");
 
     ret = sysdb_store_user(data->ctx->domain,
                            data->username, "x",
@@ -520,7 +521,7 @@
     }
 
     ret = sysdb_delete_recursive(data->ctx->sysdb, dn, false);
-    fail_unless(ret == EOK, "sysdb_delete_recursive returned [%d]", ret);
+    ck_assert_msg(ret == EOK, "sysdb_delete_recursive returned [%d]", ret);
     return ret;
 }
 
@@ -684,7 +685,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -702,19 +703,19 @@
     ret = sysdb_add_user(test_ctx->domain, fqname,
                          0, 0, fqname, "/", "/bin/bash",
                          NULL, attrs, 0, 0);
-    fail_if(ret != EOK, "Could not store user %s", fqname);
+    sss_ck_fail_if_msg(ret != EOK, "Could not store user %s", fqname);
 
     ret = sysdb_search_user_by_name(test_ctx,
                                     test_ctx->domain,
                                     fqname, get_attrs, &msg);
-    fail_if(ret != EOK, "Could not retrieve user %s", fqname);
+    sss_ck_fail_if_msg(ret != EOK, "Could not retrieve user %s", fqname);
 
     desc = ldb_msg_find_attr_as_string(msg, SYSDB_DESCRIPTION, NULL);
     fail_unless(desc != NULL);
     ck_assert_str_eq(desc, desc_in);
 
     ret = sysdb_delete_user(test_ctx->domain, fqname, 0);
-    fail_unless(ret == EOK, "sysdb_delete_user error [%d][%s]",
+    ck_assert_msg(ret == EOK, "sysdb_delete_user error [%d][%s]",
                             ret, strerror(ret));
 
     talloc_free(test_ctx);
@@ -730,7 +731,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -739,7 +740,7 @@
 
     ret = test_store_user(data);
 
-    fail_if(ret != EOK, "Could not store user %s", data->username);
+    sss_ck_fail_if_msg(ret != EOK, "Could not store user %s", data->username);
     talloc_free(test_ctx);
 }
 END_TEST
@@ -753,7 +754,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -763,7 +764,7 @@
 
     ret = test_store_user(data);
 
-    fail_if(ret != EOK, "Could not store user %s", data->username);
+    sss_ck_fail_if_msg(ret != EOK, "Could not store user %s", data->username);
     talloc_free(test_ctx);
 }
 END_TEST
@@ -777,16 +778,16 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
     data = test_data_new_group(test_ctx, _i);
-    fail_if(data == NULL, "OOM");
+    sss_ck_fail_if_msg(data == NULL, "OOM");
 
     ret = test_store_group(data);
 
-    fail_if(ret != EOK, "Could not store POSIX group #%d", _i);
+    sss_ck_fail_if_msg(ret != EOK, "Could not store POSIX group #%d", _i);
     talloc_free(test_ctx);
 }
 END_TEST
@@ -800,16 +801,16 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
     data = test_data_new_user(test_ctx, _i);
-    fail_if(data == NULL, "OOM");
+    sss_ck_fail_if_msg(data == NULL, "OOM");
 
     ret = test_remove_user(data);
 
-    fail_if(ret != EOK, "Could not remove user %s", data->username);
+    sss_ck_fail_if_msg(ret != EOK, "Could not remove user %s", data->username);
     talloc_free(test_ctx);
 }
 END_TEST
@@ -823,7 +824,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -833,7 +834,7 @@
 
     ret = test_remove_user_by_uid(data);
 
-    fail_if(ret != EOK, "Could not remove user with uid %d", _i);
+    sss_ck_fail_if_msg(ret != EOK, "Could not remove user with uid %d", _i);
     talloc_free(test_ctx);
 }
 END_TEST
@@ -847,7 +848,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -856,7 +857,7 @@
 
     ret = test_remove_group(data);
 
-    fail_if(ret != EOK, "Could not remove group %s", data->groupname);
+    sss_ck_fail_if_msg(ret != EOK, "Could not remove group %s", data->groupname);
     talloc_free(test_ctx);
 }
 END_TEST
@@ -870,7 +871,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -881,7 +882,7 @@
     ret = test_remove_group_by_gid(data);
     fail_if_null_ctx_leaks(test_ctx);
 
-    fail_if(ret != EOK, "Could not remove group with gid %d", _i);
+    sss_ck_fail_if_msg(ret != EOK, "Could not remove group with gid %d", _i);
     talloc_free(test_ctx);
 }
 END_TEST
@@ -895,7 +896,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -904,7 +905,7 @@
 
     ret = test_add_user(data);
 
-    fail_if(ret != EOK, "Could not add user %s", data->username);
+    sss_ck_fail_if_msg(ret != EOK, "Could not add user %s", data->username);
     talloc_free(test_ctx);
 }
 END_TEST
@@ -918,7 +919,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -927,7 +928,7 @@
 
     ret = test_add_group(data);
 
-    fail_if(ret != EOK, "Could not add group %s", data->groupname);
+    sss_ck_fail_if_msg(ret != EOK, "Could not add group %s", data->groupname);
     talloc_free(test_ctx);
 }
 END_TEST
@@ -943,7 +944,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -955,13 +956,13 @@
                                              "testghost%d", j);
         ret = sysdb_attrs_steal_string(data->attrs, SYSDB_GHOST, member_fqname);
         if (ret != EOK) {
-            fail_unless(ret == EOK, "Cannot add attr\n");
+            ck_assert_msg(ret == EOK, "Cannot add attr\n");
         }
     }
 
     ret = test_store_group(data);
 
-    fail_if(ret != EOK, "Could not add group %s", data->groupname);
+    sss_ck_fail_if_msg(ret != EOK, "Could not add group %s", data->groupname);
     talloc_free(test_ctx);
 }
 END_TEST
@@ -975,7 +976,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -984,7 +985,7 @@
 
     ret = test_add_incomplete_group(data);
 
-    fail_if(ret != EOK, "Could not add incomplete group %s", data->groupname);
+    sss_ck_fail_if_msg(ret != EOK, "Could not add incomplete group %s", data->groupname);
     talloc_free(test_ctx);
 }
 END_TEST
@@ -996,7 +997,7 @@
 
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -1004,21 +1005,21 @@
                                      20000, NULL,
                                      "S-1-5-21-123-456-789-111",
                                      NULL, true, 0);
-    fail_unless(ret == EOK,
+    ck_assert_msg(ret == EOK,
                 "sysdb_add_incomplete_group error [%d][%s]",
                 ret, strerror(ret));
 
     /* Adding a group with the same GID and all the other characteristics uknown should fail */
     ret = sysdb_add_incomplete_group(test_ctx->domain, "incomplete_group_new",
                                      20000, NULL, NULL, NULL, true, 0);
-    fail_unless(ret == EEXIST, "Did not caught a duplicate\n");
+    ck_assert_msg(ret == EEXIST, "Did not caught a duplicate\n");
 
     /* A different SID should also trigger a failure */
     ret = sysdb_add_incomplete_group(test_ctx->domain, "incomplete_group_new",
                                      20000, NULL,
                                      "S-1-5-21-123-456-789-222",
                                      NULL, true, 0);
-    fail_unless(ret == EEXIST, "Did not caught a duplicate\n");
+    ck_assert_msg(ret == EEXIST, "Did not caught a duplicate\n");
 
     /* But if we know based on a SID that the group is in fact the same,
      * let's just change its name
@@ -1027,9 +1028,8 @@
                                      20000, NULL,
                                      "S-1-5-21-123-456-789-111",
                                      NULL, true, 0);
-    fail_unless(ret == ERR_GID_DUPLICATED,
-                "Did not catch a legitimate rename",
-                ret, strerror(ret));
+    ck_assert_msg(ret == ERR_GID_DUPLICATED,
+                "Did not catch a legitimate rename");
 }
 END_TEST
 
@@ -1045,7 +1045,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -1053,23 +1053,23 @@
     fail_if(data == NULL);
 
     res = test_getpwnam(data);
-    fail_if(res->count != 1,
+    sss_ck_fail_if_msg(res->count != 1,
             "Invalid number of replies. Expected 1, got %d", res->count);
 
     /* Check the user was found with the expected FQDN and UID */
     uid = ldb_msg_find_attr_as_uint(res->msgs[0], SYSDB_UIDNUM, 0);
-    fail_unless(uid == _i, "Did not find the expected UID");
+    ck_assert_msg(uid == _i, "Did not find the expected UID");
     username = ldb_msg_find_attr_as_string(res->msgs[0], SYSDB_NAME, NULL);
     ck_assert_str_eq(username, data->username);
 
     /* Search for the user with the wrong case */
     data->username = test_asprintf_fqname(data, test_ctx->domain,
                                           "TESTUSER%d", _i);
-    fail_if(data->username == NULL, "OOM");
+    sss_ck_fail_if_msg(data->username == NULL, "OOM");
     fail_if(ret != EOK);
 
     res = test_getpwnam(data);
-    fail_if(res->count != 0,
+    sss_ck_fail_if_msg(res->count != 0,
             "Invalid number of replies. Expected 0, got %d", res->count);
 
     talloc_free(test_ctx);
@@ -1087,7 +1087,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -1122,7 +1122,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -1150,7 +1150,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -1158,11 +1158,11 @@
     fail_if(data == NULL);
 
     res = test_getgrnam(data);
-    fail_if(res->count != 1,
+    sss_ck_fail_if_msg(res->count != 1,
             "Invalid number of replies. Expected 1, got %d", res->count);
 
     gid = ldb_msg_find_attr_as_uint(res->msgs[0], SYSDB_GIDNUM, 0);
-    fail_unless(gid == _i,
+    ck_assert_msg(gid == _i,
                 "Did not find the expected GID (found %d expected %d)",
                 gid, _i);
     groupname = ldb_msg_find_attr_as_string(res->msgs[0], SYSDB_NAME, NULL);
@@ -1171,11 +1171,11 @@
     /* Search for the group with the wrong case */
     data->groupname = test_asprintf_fqname(data, test_ctx->domain,
                                           "TESTGROUP%d", _i);
-    fail_if(data->groupname == NULL, "OOM");
+    sss_ck_fail_if_msg(data->groupname == NULL, "OOM");
     fail_if(ret != EOK);
 
     res = test_getgrnam(data);
-    fail_if(res->count != 0,
+    sss_ck_fail_if_msg(res->count != 0,
             "Invalid number of replies. Expected 1, got %d", res->count);
 
     talloc_free(test_ctx);
@@ -1193,26 +1193,26 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
     data = test_data_new_group(test_ctx, _i);
-    fail_if(data == NULL, "OOM");
+    sss_ck_fail_if_msg(data == NULL, "OOM");
 
     ret = sysdb_getgrgid(test_ctx,
                          test_ctx->domain,
                          data->gid, &res);
     if (ret) {
-        fail("sysdb_getgrgid failed for gid %d (%d: %s)",
+        ck_abort_msg("sysdb_getgrgid failed for gid %d (%d: %s)",
              data->gid, ret, strerror(ret));
         goto done;
     }
 
     fqname = ldb_msg_find_attr_as_string(res->msgs[0], SYSDB_NAME, 0);
-    fail_unless(fqname != NULL, "No group name?\n");
+    ck_assert_msg(fqname != NULL, "No group name?\n");
 
-    fail_unless(strcmp(fqname, data->groupname) == 0,
+    ck_assert_msg(strcmp(fqname, data->groupname) == 0,
                 "Did not find the expected groupname (found %s expected %s)",
                 fqname, data->groupname);
 done:
@@ -1232,24 +1232,24 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
     data = test_data_new_group(test_ctx, _i);
-    fail_if(data == NULL, "OOM");
+    sss_ck_fail_if_msg(data == NULL, "OOM");
 
     ret = sysdb_getgrgid_attrs(test_ctx,
                                test_ctx->domain,
                                data->gid, attrs, &res);
     if (ret) {
-        fail("sysdb_getgrgid_attrs failed for gid %d (%d: %s)",
+        ck_abort_msg("sysdb_getgrgid_attrs failed for gid %d (%d: %s)",
              data->gid, ret, strerror(ret));
         goto done;
     }
 
     ctime = ldb_msg_find_attr_as_uint64(res->msgs[0], SYSDB_CREATE_TIME, 0);
-    fail_unless(ctime != 0, "Missing create time");
+    ck_assert_msg(ctime != 0, "Missing create time");
 
 done:
     talloc_free(test_ctx);
@@ -1267,16 +1267,16 @@
 
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
-    fail_if(ret != EOK, "Could not set up the test");
+    sss_ck_fail_if_msg(ret != EOK, "Could not set up the test");
 
     filter = talloc_asprintf(test_ctx, "("SYSDB_GIDNUM"=%d)", _i);
-    fail_if(filter == NULL, "OOM");
+    sss_ck_fail_if_msg(filter == NULL, "OOM");
 
     ret = sysdb_search_groups(test_ctx, test_ctx->domain,
                              filter, attrs, &count, &msgs);
     talloc_free(filter);
-    fail_if(ret != EOK, "Search failed: %d", ret);
-    fail_if(count != 1, "Did not find the expected group\n");
+    sss_ck_fail_if_msg(ret != EOK, "Search failed: %d", ret);
+    sss_ck_fail_if_msg(count != 1, "Did not find the expected group\n");
 
     talloc_free(test_ctx);
 }
@@ -1293,7 +1293,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -1304,18 +1304,18 @@
                          test_ctx->domain,
                          _i, &res);
     if (ret) {
-        fail("sysdb_getpwuid failed for uid %d (%d: %s)",
+        ck_abort_msg("sysdb_getpwuid failed for uid %d (%d: %s)",
              _i, ret, strerror(ret));
         goto done;
     }
 
-    fail_unless(res->count == 1, "Expected 1 user entry, found %d\n",
+    ck_assert_msg(res->count == 1, "Expected 1 user entry, found %d\n",
                 res->count);
 
     fqname = ldb_msg_find_attr_as_string(res->msgs[0], SYSDB_NAME, 0);
-    fail_unless(fqname != NULL, "No name?\n");
+    ck_assert_msg(fqname != NULL, "No name?\n");
 
-    fail_unless(strcmp(fqname, data->username) == 0,
+    ck_assert_msg(strcmp(fqname, data->username) == 0,
                 "Did not find the expected username (found %s expected %s)",
                 fqname, data->username);
 done:
@@ -1332,19 +1332,19 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
     ret = sysdb_enumgrent(test_ctx,
                           test_ctx->domain,
                           &res);
-    fail_unless(ret == EOK,
+    ck_assert_msg(ret == EOK,
                 "sysdb_enumgrent failed (%d: %s)",
                 ret, strerror(ret));
 
     /* 10 groups + 10 users (we're MPG) */
-    fail_if(res->count != 20, "Expected 20 users, got %d", res->count);
+    sss_ck_fail_if_msg(res->count != 20, "Expected 20 users, got %d", res->count);
 
     talloc_free(test_ctx);
 }
@@ -1359,18 +1359,18 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
     ret = sysdb_enumpwent(test_ctx,
                           test_ctx->domain,
                           &res);
-    fail_unless(ret == EOK,
+    ck_assert_msg(ret == EOK,
                 "sysdb_enumpwent failed (%d: %s)",
                 ret, strerror(ret));
 
-    fail_if(res->count != 10, "Expected 10 users, got %d", res->count);
+    sss_ck_fail_if_msg(res->count != 10, "Expected 10 users, got %d", res->count);
 
     talloc_free(test_ctx);
 }
@@ -1386,7 +1386,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -1395,7 +1395,7 @@
 
     data->attrs = sysdb_new_attrs(test_ctx);
     if (ret != EOK) {
-        fail("Could not create the changeset");
+        ck_abort_msg("Could not create the changeset");
         return;
     }
 
@@ -1403,13 +1403,13 @@
                                  SYSDB_SHELL,
                                  "/bin/ksh");
     if (ret != EOK) {
-        fail("Could not create the changeset");
+        ck_abort_msg("Could not create the changeset");
         return;
     }
 
     ret = test_set_user_attr(data);
 
-    fail_if(ret != EOK, "Could not modify user %s", data->username);
+    sss_ck_fail_if_msg(ret != EOK, "Could not modify user %s", data->username);
 
     talloc_free(test_ctx);
 }
@@ -1426,18 +1426,18 @@
 
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
-    fail_if(ret != EOK, "Could not set up the test");
+    sss_ck_fail_if_msg(ret != EOK, "Could not set up the test");
 
     filter = talloc_asprintf(test_ctx,
                              "(&("SYSDB_UIDNUM"=%d)("SYSDB_SHELL"=/bin/ksh))",
                              _i);
-    fail_if(filter == NULL, "OOM");
+    sss_ck_fail_if_msg(filter == NULL, "OOM");
 
     ret = sysdb_search_users(test_ctx, test_ctx->domain,
                              filter, attrs, &count, &msgs);
     talloc_free(filter);
-    fail_if(ret != EOK, "Search failed: %d", ret);
-    fail_if(count != 1, "Did not find the expected user\n");
+    sss_ck_fail_if_msg(ret != EOK, "Search failed: %d", ret);
+    sss_ck_fail_if_msg(count != 1, "Did not find the expected user\n");
 
     talloc_free(test_ctx);
 }
@@ -1453,33 +1453,33 @@
     const char *shell;
 
     ret = setup_sysdb_tests(&test_ctx);
-    fail_if(ret != EOK, "Could not set up the test");
+    sss_ck_fail_if_msg(ret != EOK, "Could not set up the test");
 
     data = test_data_new_user(test_ctx, _i);
-    fail_if(data == NULL, "OOM");
+    sss_ck_fail_if_msg(data == NULL, "OOM");
 
     ret = sysdb_getpwnam(test_ctx,
                          test_ctx->domain,
                          data->username, &res);
-    fail_if(ret != EOK, "sysdb_getpwnam failed for fqname %s (%d: %s)",
+    sss_ck_fail_if_msg(ret != EOK, "sysdb_getpwnam failed for fqname %s (%d: %s)",
                          data->username, ret, strerror(ret));
     shell = ldb_msg_find_attr_as_string(res->msgs[0], SYSDB_SHELL, NULL);
-    fail_unless(shell != NULL, "Did not find user shell before removal");
+    ck_assert_msg(shell != NULL, "Did not find user shell before removal");
 
     rmattrs[0] = discard_const(SYSDB_SHELL);
     rmattrs[1] = NULL;
 
     ret = sysdb_remove_attrs(test_ctx->domain, data->username,
                              SYSDB_MEMBER_USER, rmattrs);
-    fail_if(ret != EOK, "Removing attributes failed: %d", ret);
+    sss_ck_fail_if_msg(ret != EOK, "Removing attributes failed: %d", ret);
 
     ret = sysdb_getpwnam(test_ctx,
                          test_ctx->domain,
                          data->username, &res);
-    fail_if(ret != EOK, "sysdb_getpwnam failed for fqname %s (%d: %s)",
+    sss_ck_fail_if_msg(ret != EOK, "sysdb_getpwnam failed for fqname %s (%d: %s)",
                          data->username, ret, strerror(ret));
     shell = ldb_msg_find_attr_as_string(res->msgs[0], SYSDB_SHELL, NULL);
-    fail_unless(shell == NULL, "Found user shell after removal");
+    ck_assert_msg(shell == NULL, "Found user shell after removal");
 }
 END_TEST
 
@@ -1495,7 +1495,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -1505,15 +1505,15 @@
     ret = sysdb_get_user_attr(test_ctx, test_ctx->domain, data->username, attrs,
                               &res);
     if (ret) {
-        fail("Could not get attributes for user %s", data->username);
+        ck_abort_msg("Could not get attributes for user %s", data->username);
         goto done;
     }
 
-    fail_if(res->count != 1,
+    sss_ck_fail_if_msg(res->count != 1,
             "Invalid number of entries, expected 1, got %d", res->count);
 
     attrval = ldb_msg_find_attr_as_string(res->msgs[0], SYSDB_SHELL, 0);
-    fail_if(strcmp(attrval, "/bin/ksh"),
+    sss_ck_fail_if_msg(strcmp(attrval, "/bin/ksh"),
             "Got bad attribute value for user %s", data->username);
 done:
     talloc_free(test_ctx);
@@ -1533,39 +1533,39 @@
 
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
-    fail_if(ret != EOK, "Could not set up the test");
+    sss_ck_fail_if_msg(ret != EOK, "Could not set up the test");
 
     /* Create subdomain */
     subdomain = new_subdomain(test_ctx, test_ctx->domain,
                               "test.sub", "TEST.SUB", "test", "S-3",
                               false, false, NULL, NULL, 0, NULL);
-    fail_if(subdomain == NULL, "Failed to create new subdomain.");
+    sss_ck_fail_if_msg(subdomain == NULL, "Failed to create new subdomain.");
 
     ret = sss_names_init_from_args(test_ctx,
                                    "(((?P<domain>[^\\\\]+)\\\\(?P<name>.+$))|" \
                                    "((?P<name>[^@]+)@(?P<domain>.+$))|" \
                                    "(^(?P<name>[^@\\\\]+)$))",
                                    "%1$s@%2$s", &subdomain->names);
-    fail_if(ret != EOK, "Failed to init names.");
+    sss_ck_fail_if_msg(ret != EOK, "Failed to init names.");
 
     /* Create user */
     fq_name = sss_create_internal_fqname(test_ctx, username, subdomain->name);
-    fail_if(fq_name == NULL, "Failed to create fq name.");
+    sss_ck_fail_if_msg(fq_name == NULL, "Failed to create fq name.");
 
     ret = sysdb_store_user(subdomain, fq_name, NULL, 12345, 0, "Gecos",
                            "/home/userhome", "/bin/bash", NULL, NULL, NULL,
                            -1, 0);
-    fail_if(ret != EOK, "sysdb_store_user failed.");
+    sss_ck_fail_if_msg(ret != EOK, "sysdb_store_user failed.");
 
     /* Test */
     ret = sysdb_get_user_attr(test_ctx, subdomain, fq_name,
                               attrs, &res);
-    fail_if(ret != EOK, "Could not get user attributes.");
-    fail_if(res->count != 1, "Invalid number of entries, expected 1, got %d",
+    sss_ck_fail_if_msg(ret != EOK, "Could not get user attributes.");
+    sss_ck_fail_if_msg(res->count != 1, "Invalid number of entries, expected 1, got %d",
             res->count);
 
     attrval = ldb_msg_find_attr_as_string(res->msgs[0], SYSDB_SHELL, 0);
-    fail_if(strcmp(attrval, "/bin/bash") != 0, "Got bad attribute value.");
+    sss_ck_fail_if_msg(strcmp(attrval, "/bin/bash") != 0, "Got bad attribute value.");
 
     talloc_free(test_ctx);
 }
@@ -1588,37 +1588,37 @@
 
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
-    fail_if(ret != EOK, "Could not set up the test");
+    sss_ck_fail_if_msg(ret != EOK, "Could not set up the test");
 
     /* Create user */
     fq_name = sss_create_internal_fqname(test_ctx, username, test_ctx->domain->name);
-    fail_if(fq_name == NULL, "Failed to create fq name.");
+    sss_ck_fail_if_msg(fq_name == NULL, "Failed to create fq name.");
 
     user_attrs = sysdb_new_attrs(test_ctx);
     fail_if(user_attrs == NULL);
 
     ret = sysdb_attrs_add_bool(user_attrs, SYSDB_POSIX, false);
-    fail_if(ret != EOK, "Could not add attribute");
+    sss_ck_fail_if_msg(ret != EOK, "Could not add attribute");
 
     ret = sysdb_add_user(test_ctx->domain, fq_name, 0, 0, "Gecos",
                          "/home/userhome", "/bin/bash", NULL, user_attrs, 0, 0);
-    fail_if(ret != EOK, "sysdb_add_user failed.");
+    sss_ck_fail_if_msg(ret != EOK, "sysdb_add_user failed.");
 
     /* Test */
     ret = sysdb_get_user_attr(test_ctx, test_ctx->domain, fq_name,
                               get_attrs, &res);
-    fail_if(ret != EOK, "Could not get user attributes.");
-    fail_if(res->count != 1, "Invalid number of entries, expected 1, got %d",
+    sss_ck_fail_if_msg(ret != EOK, "Could not get user attributes.");
+    sss_ck_fail_if_msg(res->count != 1, "Invalid number of entries, expected 1, got %d",
             res->count);
 
     attrval = ldb_msg_find_attr_as_string(res->msgs[0], SYSDB_POSIX, NULL);
-    fail_if(strcasecmp(attrval, "false") != 0, "Got bad attribute value.");
+    sss_ck_fail_if_msg(strcasecmp(attrval, "false") != 0, "Got bad attribute value.");
 
     id = ldb_msg_find_attr_as_uint64(res->msgs[0], SYSDB_UIDNUM, 123);
-    fail_unless(id == 0, "Wrong UID value");
+    ck_assert_msg(id == 0, "Wrong UID value");
 
     id = ldb_msg_find_attr_as_uint64(res->msgs[0], SYSDB_GIDNUM, 123);
-    fail_unless(id == 0, "Wrong GID value");
+    ck_assert_msg(id == 0, "Wrong GID value");
 
     talloc_free(test_ctx);
 }
@@ -1638,21 +1638,21 @@
 
     /* Create group */
     fq_name = sss_create_internal_fqname(test_ctx, groupname, test_ctx->domain->name);
-    fail_if(fq_name == NULL, "Failed to create fq name.");
+    sss_ck_fail_if_msg(fq_name == NULL, "Failed to create fq name.");
 
     ret = sysdb_add_incomplete_group(test_ctx->domain, fq_name, 0,
                                      NULL, NULL, NULL, false, 0);
-    fail_if(ret != EOK, "sysdb_add_group failed.");
+    sss_ck_fail_if_msg(ret != EOK, "sysdb_add_group failed.");
 
     /* Test */
     ret = sysdb_search_group_by_name(test_ctx, test_ctx->domain, fq_name, get_attrs, &msg);
-    fail_if(ret != EOK, "sysdb_search_group_by_name failed.");
+    sss_ck_fail_if_msg(ret != EOK, "sysdb_search_group_by_name failed.");
 
     attrval = ldb_msg_find_attr_as_string(msg, SYSDB_POSIX, NULL);
-    fail_if(strcasecmp(attrval, "false") != 0, "Got bad attribute value.");
+    sss_ck_fail_if_msg(strcasecmp(attrval, "false") != 0, "Got bad attribute value.");
 
     id = ldb_msg_find_attr_as_uint64(msg, SYSDB_GIDNUM, 123);
-    fail_unless(id == 0, "Wrong GID value");
+    ck_assert_msg(id == 0, "Wrong GID value");
 }
 
 START_TEST (test_sysdb_add_nonposix_group)
@@ -1662,7 +1662,7 @@
 
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
-    fail_if(ret != EOK, "Could not set up the test");
+    sss_ck_fail_if_msg(ret != EOK, "Could not set up the test");
 
     add_nonposix_incomplete_group(test_ctx, "nonposix1");
     add_nonposix_incomplete_group(test_ctx, "nonposix2");
@@ -1680,7 +1680,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -1694,7 +1694,7 @@
 
     ret = test_add_group_member(data);
 
-    fail_if(ret != EOK, "Could not modify group %s", data->groupname);
+    sss_ck_fail_if_msg(ret != EOK, "Could not modify group %s", data->groupname);
     talloc_free(test_ctx);
 }
 END_TEST
@@ -1713,37 +1713,37 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
     data = test_data_new_user(test_ctx, _i);
-    fail_if(data == NULL, "OOM\n");
+    sss_ck_fail_if_msg(data == NULL, "OOM\n");
 
     ret = sysdb_initgroups(test_ctx,
                            test_ctx->domain,
                            data->username,
                            &res);
-    fail_if(ret != EOK, "sysdb_initgroups failed\n");
+    sss_ck_fail_if_msg(ret != EOK, "sysdb_initgroups failed\n");
 
     /* result should contain 2 messages - user and his group */
-    fail_if(res->count != 2, "expected 2 groups, got %d\n", res->count);
+    sss_ck_fail_if_msg(res->count != 2, "expected 2 groups, got %d\n", res->count);
 
     /* check if it's the expected user and expected group */
     user = res->msgs[0];
     group = res->msgs[1];
 
     uid = ldb_msg_find_attr_as_uint(user, SYSDB_UIDNUM, 0);
-    fail_unless(uid == _i,
+    ck_assert_msg(uid == _i,
                 "Did not find the expected UID (found %d expected %d)",
                 uid, _i);
 
-    fail_unless(strcmp(ldb_msg_find_attr_as_string(user, SYSDB_NAME, NULL),
+    ck_assert_msg(strcmp(ldb_msg_find_attr_as_string(user, SYSDB_NAME, NULL),
                        data->username) == 0,
                 "Wrong username\n");
 
     gid = ldb_msg_find_attr_as_uint(group, SYSDB_GIDNUM, 0);
-    fail_unless(gid == _i + 1000,
+    ck_assert_msg(gid == _i + 1000,
                 "Did not find the expected GID (found %d expected %d)",
                 gid, _i);
 
@@ -1760,7 +1760,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -1773,7 +1773,7 @@
     fail_if(data->username == NULL);
 
     ret = test_remove_group_member(data);
-    fail_if(ret != EOK, "Remove group member failed: %d", ret);
+    sss_ck_fail_if_msg(ret != EOK, "Remove group member failed: %d", ret);
 
     talloc_free(test_ctx);
 }
@@ -1788,7 +1788,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -1798,7 +1798,7 @@
 
     ret = test_remove_user_by_uid(data);
 
-    fail_if(ret != ENOENT, "Unexpected return code %d, expected ENOENT", ret);
+    sss_ck_fail_if_msg(ret != ENOENT, "Unexpected return code %d, expected ENOENT", ret);
     talloc_free(test_ctx);
 }
 END_TEST
@@ -1812,7 +1812,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -1822,7 +1822,7 @@
 
     ret = test_remove_group_by_gid(data);
 
-    fail_if(ret != ENOENT, "Unexpected return code %d, expected ENOENT", ret);
+    sss_ck_fail_if_msg(ret != ENOENT, "Unexpected return code %d, expected ENOENT", ret);
     talloc_free(test_ctx);
 }
 END_TEST
@@ -1835,10 +1835,10 @@
 
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
-    fail_if(ret != EOK, "Cannot setup sysdb tests\n");
+    sss_ck_fail_if_msg(ret != EOK, "Cannot setup sysdb tests\n");
 
     ret = sysdb_get_new_id(test_ctx->domain, &id);
-    fail_if(ret != EOK, "Cannot get new ID\n");
+    sss_ck_fail_if_msg(ret != EOK, "Cannot get new ID\n");
     fail_if(id != test_ctx->domain->id_min);
 }
 END_TEST
@@ -1852,7 +1852,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -1862,7 +1862,7 @@
     data->uid = _i;
     data->attrs = sysdb_new_attrs(test_ctx);
     if (ret != EOK) {
-        fail("Could not create attribute list");
+        ck_abort_msg("Could not create attribute list");
         return;
     }
 
@@ -1870,13 +1870,13 @@
                                  TEST_ATTR_NAME,
                                  TEST_ATTR_VALUE);
     if (ret != EOK) {
-        fail("Could not add attribute");
+        ck_abort_msg("Could not add attribute");
         return;
     }
 
     ret = test_store_custom(data);
 
-    fail_if(ret != EOK, "Could not add custom object");
+    sss_ck_fail_if_msg(ret != EOK, "Could not add custom object");
     talloc_free(test_ctx);
 }
 END_TEST
@@ -1891,7 +1891,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -1899,12 +1899,12 @@
     fail_if(data == NULL);
 
     data->attrlist = talloc_array(test_ctx, const char *, 2);
-    fail_unless(data->attrlist != NULL, "talloc_array failed");
+    ck_assert_msg(data->attrlist != NULL, "talloc_array failed");
     data->attrlist[0] = TEST_ATTR_NAME;
     data->attrlist[1] = NULL;
 
     object_name = talloc_asprintf(data, "%s_%d", CUSTOM_TEST_OBJECT, 29010);
-    fail_unless(object_name != NULL, "talloc_asprintf failed");
+    ck_assert_msg(object_name != NULL, "talloc_asprintf failed");
 
     ret = sysdb_search_custom_by_name(data,
                                       data->ctx->domain,
@@ -1914,19 +1914,19 @@
                                       &data->msgs_count,
                                       &data->msgs);
 
-    fail_if(ret != EOK, "Could not search custom object");
+    sss_ck_fail_if_msg(ret != EOK, "Could not search custom object");
 
-    fail_unless(data->msgs_count == 1,
-                "Wrong number of objects, expected [1] got [%d]",
+    ck_assert_msg(data->msgs_count == 1,
+                "Wrong number of objects, expected [1] got [%ld]",
                 data->msgs_count);
-    fail_unless(data->msgs[0]->num_elements == 1,
+    ck_assert_msg(data->msgs[0]->num_elements == 1,
                 "Wrong number of results, expected [1] got [%d]",
                 data->msgs[0]->num_elements);
-    fail_unless(strcmp(data->msgs[0]->elements[0].name, TEST_ATTR_NAME) == 0,
+    ck_assert_msg(strcmp(data->msgs[0]->elements[0].name, TEST_ATTR_NAME) == 0,
                 "Wrong attribute name");
-    fail_unless(data->msgs[0]->elements[0].num_values == 1,
+    ck_assert_msg(data->msgs[0]->elements[0].num_values == 1,
                 "Wrong number of attribute values");
-    fail_unless(strncmp((const char *)data->msgs[0]->elements[0].values[0].data,
+    ck_assert_msg(strncmp((const char *)data->msgs[0]->elements[0].values[0].data,
                         TEST_ATTR_VALUE,
                         data->msgs[0]->elements[0].values[0].length) == 0,
                 "Wrong attribute value");
@@ -1944,7 +1944,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -1954,7 +1954,7 @@
     data->uid = 29010;
     data->attrs = sysdb_new_attrs(test_ctx);
     if (ret != EOK) {
-        fail("Could not create attribute list");
+        ck_abort_msg("Could not create attribute list");
         return;
     }
 
@@ -1962,7 +1962,7 @@
                                  TEST_ATTR_NAME,
                                  TEST_ATTR_UPDATE_VALUE);
     if (ret != EOK) {
-        fail("Could not add attribute");
+        ck_abort_msg("Could not add attribute");
         return;
     }
 
@@ -1970,13 +1970,13 @@
                                  TEST_ATTR_ADD_NAME,
                                  TEST_ATTR_ADD_VALUE);
     if (ret != EOK) {
-        fail("Could not add attribute");
+        ck_abort_msg("Could not add attribute");
         return;
     }
 
     ret = test_store_custom(data);
 
-    fail_if(ret != EOK, "Could not add custom object");
+    sss_ck_fail_if_msg(ret != EOK, "Could not add custom object");
     talloc_free(test_ctx);
 }
 END_TEST
@@ -1992,7 +1992,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -2000,13 +2000,13 @@
     fail_if(data == NULL);
 
     data->attrlist = talloc_array(test_ctx, const char *, 3);
-    fail_unless(data->attrlist != NULL, "talloc_array failed");
+    ck_assert_msg(data->attrlist != NULL, "talloc_array failed");
     data->attrlist[0] = TEST_ATTR_NAME;
     data->attrlist[1] = TEST_ATTR_ADD_NAME;
     data->attrlist[2] = NULL;
 
     object_name = talloc_asprintf(data, "%s_%d", CUSTOM_TEST_OBJECT, 29010);
-    fail_unless(object_name != NULL, "talloc_asprintf failed");
+    ck_assert_msg(object_name != NULL, "talloc_asprintf failed");
 
     ret = sysdb_search_custom_by_name(data,
                                       data->ctx->domain,
@@ -2016,31 +2016,31 @@
                                       &data->msgs_count,
                                       &data->msgs);
 
-    fail_if(ret != EOK, "Could not search custom object");
+    sss_ck_fail_if_msg(ret != EOK, "Could not search custom object");
 
-    fail_unless(data->msgs_count == 1,
-                "Wrong number of objects, expected [1] got [%d]",
+    ck_assert_msg(data->msgs_count == 1,
+                "Wrong number of objects, expected [1] got [%ld]",
                 data->msgs_count);
-    fail_unless(data->msgs[0]->num_elements == 2,
+    ck_assert_msg(data->msgs[0]->num_elements == 2,
                 "Wrong number of results, expected [2] got [%d]",
                 data->msgs[0]->num_elements);
 
     el = ldb_msg_find_element(data->msgs[0], TEST_ATTR_NAME);
-    fail_unless(el != NULL, "Attribute [%s] not found", TEST_ATTR_NAME);
-    fail_unless(el->num_values == 1, "Wrong number ([%d] instead of 1) "
+    ck_assert_msg(el != NULL, "Attribute [%s] not found", TEST_ATTR_NAME);
+    ck_assert_msg(el->num_values == 1, "Wrong number ([%d] instead of 1) "
                 "of attribute values for [%s]", el->num_values,
                 TEST_ATTR_NAME);
-    fail_unless(strncmp((const char *) el->values[0].data,
+    ck_assert_msg(strncmp((const char *) el->values[0].data,
                 TEST_ATTR_UPDATE_VALUE,
                 el->values[0].length) == 0,
                 "Wrong attribute value");
 
     el = ldb_msg_find_element(data->msgs[0], TEST_ATTR_ADD_NAME);
-    fail_unless(el != NULL, "Attribute [%s] not found", TEST_ATTR_ADD_NAME);
-    fail_unless(el->num_values == 1, "Wrong number ([%d] instead of 1) "
+    ck_assert_msg(el != NULL, "Attribute [%s] not found", TEST_ATTR_ADD_NAME);
+    ck_assert_msg(el->num_values == 1, "Wrong number ([%d] instead of 1) "
                 "of attribute values for [%s]", el->num_values,
                 TEST_ATTR_ADD_NAME);
-    fail_unless(strncmp((const char *) el->values[0].data,
+    ck_assert_msg(strncmp((const char *) el->values[0].data,
                 TEST_ATTR_ADD_VALUE,
                 el->values[0].length) == 0,
                 "Wrong attribute value");
@@ -2060,7 +2060,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -2068,7 +2068,7 @@
     fail_if(data == NULL);
 
     data->attrlist = talloc_array(test_ctx, const char *, 3);
-    fail_unless(data->attrlist != NULL, "talloc_array failed");
+    ck_assert_msg(data->attrlist != NULL, "talloc_array failed");
     data->attrlist[0] = TEST_ATTR_NAME;
     data->attrlist[1] = TEST_ATTR_ADD_NAME;
     data->attrlist[2] = NULL;
@@ -2079,10 +2079,10 @@
                               &data->msgs_count,
                               &data->msgs);
 
-    fail_if(ret != EOK, "Could not search custom object");
+    sss_ck_fail_if_msg(ret != EOK, "Could not search custom object");
 
-    fail_unless(data->msgs_count == 10,
-                "Wrong number of objects, expected [10] got [%d]",
+    ck_assert_msg(data->msgs_count == 10,
+                "Wrong number of objects, expected [10] got [%ld]",
                 data->msgs_count);
 
     talloc_free(test_ctx);
@@ -2098,7 +2098,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -2107,7 +2107,7 @@
 
     ret = test_delete_custom(data);
 
-    fail_if(ret != EOK, "Could not delete custom object");
+    sss_ck_fail_if_msg(ret != EOK, "Could not delete custom object");
     talloc_free(test_ctx);
 }
 END_TEST
@@ -2120,15 +2120,15 @@
 
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
-    fail_unless(ret == EOK, "Could not set up the test");
+    ck_assert_msg(ret == EOK, "Could not set up the test");
 
     data = test_data_new_user(test_ctx, _i);
-    fail_if(data == NULL, "OOM\n");
+    sss_ck_fail_if_msg(data == NULL, "OOM\n");
 
     ret = sysdb_cache_password(test_ctx->domain,
                                data->username,
                                data->username);
-    fail_unless(ret == EOK, "sysdb_cache_password request failed [%d].", ret);
+    ck_assert_msg(ret == EOK, "sysdb_cache_password request failed [%d].", ret);
 
     talloc_free(test_ctx);
 }
@@ -2146,36 +2146,36 @@
 
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
-    fail_unless(ret == EOK, "Could not set up the test");
+    ck_assert_msg(ret == EOK, "Could not set up the test");
 
     data = test_data_new_user(test_ctx, _i);
-    fail_if(data == NULL, "OOM\n");
+    sss_ck_fail_if_msg(data == NULL, "OOM\n");
 
     ret = sysdb_get_user_attr(test_ctx, test_ctx->domain, data->username,
                               attrs, &res);
-    fail_unless(ret == EOK, "sysdb_get_user_attr request failed [%d].", ret);
+    ck_assert_msg(ret == EOK, "sysdb_get_user_attr request failed [%d].", ret);
 
     val = ldb_msg_find_attr_as_int(res->msgs[0], SYSDB_CACHEDPWD_TYPE, 0);
-    fail_unless(val == SSS_AUTHTOK_TYPE_PASSWORD,
+    ck_assert_msg(val == SSS_AUTHTOK_TYPE_PASSWORD,
                 "Unexpected authtok type, found [%d], expected [%d].",
                 val, SSS_AUTHTOK_TYPE_PASSWORD);
 
     ret = sysdb_cache_password_ex(test_ctx->domain, data->username,
                                   data->username, SSS_AUTHTOK_TYPE_2FA, 12);
 
-    fail_unless(ret == EOK, "sysdb_cache_password request failed [%d].", ret);
+    ck_assert_msg(ret == EOK, "sysdb_cache_password request failed [%d].", ret);
 
     ret = sysdb_get_user_attr(test_ctx, test_ctx->domain, data->username,
                               attrs, &res);
-    fail_unless(ret == EOK, "sysdb_get_user_attr request failed [%d].", ret);
+    ck_assert_msg(ret == EOK, "sysdb_get_user_attr request failed [%d].", ret);
 
     val = ldb_msg_find_attr_as_int(res->msgs[0], SYSDB_CACHEDPWD_TYPE, 0);
-    fail_unless(val == SSS_AUTHTOK_TYPE_2FA,
+    ck_assert_msg(val == SSS_AUTHTOK_TYPE_2FA,
                 "Unexpected authtok type, found [%d], expected [%d].",
                 val, SSS_AUTHTOK_TYPE_2FA);
 
     val = ldb_msg_find_attr_as_int(res->msgs[0], SYSDB_CACHEDPWD_FA2_LEN, 0);
-    fail_unless(val == 12,
+    ck_assert_msg(val == 12,
                 "Unexpected second factor length, found [%d], expected [%d].",
                 val, 12);
 
@@ -2197,7 +2197,7 @@
 
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
-    fail_unless(ret == EOK, "Could not set up the test");
+    ck_assert_msg(ret == EOK, "Could not set up the test");
 
     data = test_data_new_user(test_ctx, uid);
     fail_if(data == NULL);
@@ -2206,7 +2206,7 @@
     ret = confdb_add_param(test_ctx->confdb, true, CONFDB_PAM_CONF_ENTRY,
                            CONFDB_PAM_CRED_TIMEOUT, val);
     if (ret != EOK) {
-        fail("Could not initialize provider");
+        ck_abort_msg("Could not initialize provider");
         talloc_free(test_ctx);
         return;
     }
@@ -2216,14 +2216,14 @@
                            test_ctx->confdb, false,
                            &expire_date, &delayed_until);
 
-    fail_unless(ret == expected_result, "sysdb_cache_auth request does not "
+    ck_assert_msg(ret == expected_result, "sysdb_cache_auth request does not "
                                         "return expected result [%d].",
                                         expected_result);
 
-    fail_unless(expire_date == 0, "Wrong expire date, expected [%d], got [%d]",
+    ck_assert_msg(expire_date == 0, "Wrong expire date, expected [%d], got [%ld]",
                                   0, expire_date);
 
-    fail_unless(delayed_until == -1, "Wrong delay, expected [%d], got [%d]",
+    ck_assert_msg(delayed_until == -1, "Wrong delay, expected [%d], got [%ld]",
                                   -1, delayed_until);
 
     talloc_free(test_ctx);
@@ -2245,7 +2245,7 @@
 
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
-    fail_unless(ret == EOK, "Could not set up the test");
+    ck_assert_msg(ret == EOK, "Could not set up the test");
 
     data = test_data_new_user(test_ctx, uid);
     fail_if(data == NULL);
@@ -2254,7 +2254,7 @@
     ret = confdb_add_param(test_ctx->confdb, true, CONFDB_PAM_CONF_ENTRY,
                            CONFDB_PAM_CRED_TIMEOUT, val);
     if (ret != EOK) {
-        fail("Could not initialize provider");
+        ck_abort_msg("Could not initialize provider");
         talloc_free(test_ctx);
         return;
     }
@@ -2266,27 +2266,27 @@
 
     data->attrs = sysdb_new_attrs(data);
     ret = sysdb_attrs_add_time_t(data->attrs, SYSDB_LAST_ONLINE_AUTH, now);
-    fail_unless(ret == EOK, "Could not add attribute "SYSDB_LAST_ONLINE_AUTH
+    ck_assert_msg(ret == EOK, "Could not add attribute "SYSDB_LAST_ONLINE_AUTH
                             ": %s", sss_strerror(ret));
 
     ret = sysdb_set_user_attr(data->ctx->domain, data->username, data->attrs,
                               SYSDB_MOD_REP);
-    fail_unless(ret == EOK, "Could not modify user %s", data->username);
+    ck_assert_msg(ret == EOK, "Could not modify user %s", data->username);
 
     ret = sysdb_cache_auth(data->ctx->domain, data->username,
                            password ? password : data->username,
                            test_ctx->confdb, false,
                            &expire_date, &delayed_until);
 
-    fail_unless(ret == expected_result,
+    ck_assert_msg(ret == expected_result,
                 "sysdb_cache_auth request does not return expected "
                 "result [%d], got [%d].", expected_result, ret);
 
-    fail_unless(expire_date == expected_expire_date,
-                "Wrong expire date, expected [%d], got [%d]",
+    ck_assert_msg(expire_date == expected_expire_date,
+                "Wrong expire date, expected [%ld], got [%ld]",
                 expected_expire_date, expire_date);
 
-    fail_unless(delayed_until == -1, "Wrong delay, expected [%d], got [%d]",
+    ck_assert_msg(delayed_until == -1, "Wrong delay, expected [%d], got [%ld]",
                                   -1, delayed_until);
 
     talloc_free(test_ctx);
@@ -2322,7 +2322,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -2336,7 +2336,7 @@
 
     ret = test_add_group_member(data);
 
-    fail_if(ret != EOK, "Could not modify group %s", data->groupname);
+    sss_ck_fail_if_msg(ret != EOK, "Could not modify group %s", data->groupname);
     talloc_free(test_ctx);
 }
 END_TEST
@@ -2355,7 +2355,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -2363,38 +2363,38 @@
     fail_if(data == NULL);
 
     data->attrlist = talloc_array(data, const char *, 2);
-    fail_unless(data->attrlist != NULL, "talloc_array failed");
+    ck_assert_msg(data->attrlist != NULL, "talloc_array failed");
     data->attrlist[0] = "gidNumber";
     data->attrlist[1] = NULL;
 
     user_dn = sysdb_user_dn(data, data->ctx->domain, data->username);
-    fail_unless(user_dn != NULL, "sysdb_user_dn failed");
+    ck_assert_msg(user_dn != NULL, "sysdb_user_dn failed");
 
     ret = sysdb_asq_search(data, test_ctx->domain,
                            user_dn, NULL, "memberof",
                            data->attrlist, &msgs_count, &msgs);
 
-    fail_if(ret != EOK, "Failed to send ASQ search request.\n");
+    sss_ck_fail_if_msg(ret != EOK, "Failed to send ASQ search request.\n");
 
-    fail_unless(msgs_count == 10, "wrong number of results, "
-                                  "found [%d] expected [10]", msgs_count);
+    ck_assert_msg(msgs_count == 10, "wrong number of results, "
+                                  "found [%ld] expected [10]", msgs_count);
 
     for (i = 0; i < msgs_count; i++) {
-        fail_unless(msgs[i]->num_elements == 1, "wrong number of elements, "
+        ck_assert_msg(msgs[i]->num_elements == 1, "wrong number of elements, "
                                      "found [%d] expected [1]",
                                      msgs[i]->num_elements);
 
-        fail_unless(msgs[i]->elements[0].num_values == 1,
+        ck_assert_msg(msgs[i]->elements[0].num_values == 1,
                     "wrong number of values, found [%d] expected [1]",
                     msgs[i]->elements[0].num_values);
 
         gid_str = talloc_asprintf(data, "%d", 28010 + i);
-        fail_unless(gid_str != NULL, "talloc_asprintf failed.");
-        fail_unless(strncmp(gid_str,
+        ck_assert_msg(gid_str != NULL, "talloc_asprintf failed.");
+        ck_assert_msg(strncmp(gid_str,
                             (const char *) msgs[i]->elements[0].values[0].data,
                             msgs[i]->elements[0].values[0].length)  == 0,
                             "wrong value, found [%.*s] expected [%s]",
-                            msgs[i]->elements[0].values[0].length,
+                            (int) msgs[i]->elements[0].values[0].length,
                             msgs[i]->elements[0].values[0].data, gid_str);
     }
 
@@ -2414,7 +2414,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -2422,41 +2422,41 @@
     fail_unless(data != NULL);
 
     data->attrlist = talloc_array(data, const char *, 2);
-    fail_unless(data->attrlist != NULL, "talloc_array failed");
+    ck_assert_msg(data->attrlist != NULL, "talloc_array failed");
     data->attrlist[0] = "uidNumber";
     data->attrlist[1] = NULL;
 
     ret = test_search_all_users(data);
 
-    fail_if(ret != EOK, "Search failed");
+    sss_ck_fail_if_msg(ret != EOK, "Search failed");
 
-    fail_unless(data->msgs_count == 10,
-                "wrong number of results, found [%d] expected [10]",
+    ck_assert_msg(data->msgs_count == 10,
+                "wrong number of results, found [%ld] expected [10]",
                 data->msgs_count);
 
     for (i = 0; i < data->msgs_count; i++) {
-        fail_unless(data->msgs[i]->num_elements == 1,
+        ck_assert_msg(data->msgs[i]->num_elements == 1,
                     "wrong number of elements, found [%d] expected [1]",
                     data->msgs[i]->num_elements);
 
-        fail_unless(data->msgs[i]->elements[0].num_values == 1,
+        ck_assert_msg(data->msgs[i]->elements[0].num_values == 1,
                     "wrong number of values, found [%d] expected [1]",
                     data->msgs[i]->elements[0].num_values);
 
         for (j = 0; j < data->msgs_count; j++) {
             uid_str = talloc_asprintf(data, "%d", 27010 + j);
-            fail_unless(uid_str != NULL, "talloc_asprintf failed.");
+            ck_assert_msg(uid_str != NULL, "talloc_asprintf failed.");
             if (strncmp(uid_str,
                         (char *) data->msgs[i]->elements[0].values[0].data,
                         data->msgs[i]->elements[0].values[0].length)  == 0) {
                 break;
             }
         }
-        fail_unless(strncmp(uid_str,
+        ck_assert_msg(strncmp(uid_str,
                             (char *) data->msgs[i]->elements[0].values[0].data,
                             data->msgs[i]->elements[0].values[0].length)  == 0,
                             "wrong value, found [%.*s] expected [%s]",
-                            data->msgs[i]->elements[0].values[0].length,
+                            (int) data->msgs[i]->elements[0].values[0].length,
                             data->msgs[i]->elements[0].values[0].data, uid_str);
     }
 
@@ -2473,7 +2473,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -2482,7 +2482,7 @@
 
     ret = test_delete_recursive(data);
 
-    fail_if(ret != EOK, "Recursive delete failed");
+    sss_ck_fail_if_msg(ret != EOK, "Recursive delete failed");
     talloc_free(test_ctx);
 }
 END_TEST
@@ -2494,36 +2494,36 @@
     int ret;
 
     attrs = sysdb_new_attrs(NULL);
-    fail_unless(attrs != NULL, "sysdb_new_attrs failed");
+    ck_assert_msg(attrs != NULL, "sysdb_new_attrs failed");
 
     ret = sysdb_attrs_add_string(attrs, "foo", "bar");
-    fail_unless(ret == EOK, "sysdb_attrs_add_string failed");
+    ck_assert_msg(ret == EOK, "sysdb_attrs_add_string failed");
 
     ret = sysdb_attrs_add_string(attrs, "fool", "bool");
-    fail_unless(ret == EOK, "sysdb_attrs_add_string failed");
+    ck_assert_msg(ret == EOK, "sysdb_attrs_add_string failed");
 
     ret = sysdb_attrs_add_string(attrs, "foot", "boot");
-    fail_unless(ret == EOK, "sysdb_attrs_add_string failed");
+    ck_assert_msg(ret == EOK, "sysdb_attrs_add_string failed");
 
     ret = sysdb_attrs_replace_name(attrs, "foo", "foot");
-    fail_unless(ret == EEXIST,
+    ck_assert_msg(ret == EEXIST,
                 "sysdb_attrs_replace overwrites existing attribute");
 
     ret = sysdb_attrs_replace_name(attrs, "foo", "oof");
-    fail_unless(ret == EOK, "sysdb_attrs_replace failed");
+    ck_assert_msg(ret == EOK, "sysdb_attrs_replace failed");
 
     ret = sysdb_attrs_get_el(attrs, "foo", &el);
-    fail_unless(ret == EOK, "sysdb_attrs_get_el failed");
-    fail_unless(el->num_values == 0, "Attribute foo is not empty.");
+    ck_assert_msg(ret == EOK, "sysdb_attrs_get_el failed");
+    ck_assert_msg(el->num_values == 0, "Attribute foo is not empty.");
 
     ret = sysdb_attrs_get_el(attrs, "oof", &el);
-    fail_unless(ret == EOK, "sysdb_attrs_get_el failed");
-    fail_unless(el->num_values == 1,
+    ck_assert_msg(ret == EOK, "sysdb_attrs_get_el failed");
+    ck_assert_msg(el->num_values == 1,
                 "Wrong number of values for attribute oof, "
                 "expected [1] got [%d].", el->num_values);
-    fail_unless(strncmp("bar", (char *) el->values[0].data,
+    ck_assert_msg(strncmp("bar", (char *) el->values[0].data,
                         el->values[0].length) == 0,
-                "Wrong value, expected [bar] got [%.*s]", el->values[0].length,
+                "Wrong value, expected [bar] got [%.*s]", (int) el->values[0].length,
                                                           el->values[0].data);
 
     talloc_free(attrs);
@@ -2539,7 +2539,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -2550,7 +2550,7 @@
         data->attrlist = NULL;
     } else {
         data->attrlist = talloc_array(data, const char *, 2);
-        fail_unless(data->attrlist != NULL, "talloc_array failed.");
+        ck_assert_msg(data->attrlist != NULL, "talloc_array failed.");
         data->attrlist[0] = test_asprintf_fqname(data, data->ctx->domain,
                                                  "testgroup%d", data->gid - 1);
         data->attrlist[1] = NULL;
@@ -2559,7 +2559,7 @@
 
     ret = test_memberof_store_group(data);
 
-    fail_if(ret != EOK, "Could not store POSIX group #%d", data->gid);
+    sss_ck_fail_if_msg(ret != EOK, "Could not store POSIX group #%d", data->gid);
     talloc_free(test_ctx);
 }
 END_TEST
@@ -2573,7 +2573,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -2584,7 +2584,7 @@
         data->attrlist = NULL;
     } else {
         data->attrlist = talloc_array(data, const char *, 2);
-        fail_unless(data->attrlist != NULL, "talloc_array failed.");
+        ck_assert_msg(data->attrlist != NULL, "talloc_array failed.");
         data->attrlist[0] = test_asprintf_fqname(data, data->ctx->domain,
                                                  "testgroup%d", data->gid - 1);
         data->attrlist[1] = NULL;
@@ -2592,7 +2592,7 @@
     }
 
     data->ghostlist = talloc_array(data, char *, 2);
-    fail_unless(data->ghostlist != NULL, "talloc_array failed.");
+    ck_assert_msg(data->ghostlist != NULL, "talloc_array failed.");
     data->ghostlist[0] = test_asprintf_fqname(data, data->ctx->domain,
                                              "testuser%d", data->gid);
     data->ghostlist[1] = NULL;
@@ -2600,7 +2600,7 @@
 
     ret = test_memberof_store_group_with_ghosts(data);
 
-    fail_if(ret != EOK, "Could not store POSIX group #%d", data->gid);
+    sss_ck_fail_if_msg(ret != EOK, "Could not store POSIX group #%d", data->gid);
     talloc_free(test_ctx);
 }
 END_TEST
@@ -2614,7 +2614,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -2625,14 +2625,14 @@
         data->attrlist = NULL;
     } else {
         data->attrlist = talloc_array(data, const char *, 2);
-        fail_unless(data->attrlist != NULL, "talloc_array failed.");
+        ck_assert_msg(data->attrlist != NULL, "talloc_array failed.");
         data->attrlist[0] = test_asprintf_fqname(data, data->ctx->domain,
                                                  "testgroup%d", data->gid - 1);
         data->attrlist[1] = NULL;
     }
 
     data->ghostlist = talloc_array(data, char *, 3);
-    fail_unless(data->ghostlist != NULL, "talloc_array failed.");
+    ck_assert_msg(data->ghostlist != NULL, "talloc_array failed.");
     data->ghostlist[0] = test_asprintf_fqname(data, data->ctx->domain,
                                               "testusera%d", data->gid);
     data->ghostlist[1] = test_asprintf_fqname(data, data->ctx->domain,
@@ -2641,7 +2641,7 @@
 
     ret = test_memberof_store_group_with_ghosts(data);
 
-    fail_if(ret != EOK, "Could not store POSIX group #%d", data->gid);
+    sss_ck_fail_if_msg(ret != EOK, "Could not store POSIX group #%d", data->gid);
     talloc_free(test_ctx);
 }
 END_TEST
@@ -2659,7 +2659,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -2668,13 +2668,13 @@
 
     ghostname = test_asprintf_fqname(data, test_ctx->domain,
                                      "testghost%d", _i);
-    fail_unless(ghostname != NULL, "Out of memory\n");
+    ck_assert_msg(ghostname != NULL, "Out of memory\n");
 
     ret = sysdb_attrs_steal_string(data->attrs, SYSDB_GHOST, ghostname);
-    fail_unless(ret == EOK, "Cannot add attr\n");
+    ck_assert_msg(ret == EOK, "Cannot add attr\n");
 
     data->attrlist = talloc_array(data, const char *, 2);
-    fail_unless(data->attrlist != NULL, "talloc_array failed.");
+    ck_assert_msg(data->attrlist != NULL, "talloc_array failed.");
     data->attrlist[0] = SYSDB_GHOST;
     data->attrlist[1] = NULL;
 
@@ -2682,7 +2682,7 @@
     for (itergid = data->gid ; itergid < MBO_GROUP_BASE + NUM_GHOSTS; itergid++) {
         ret = sysdb_search_group_by_gid(data, test_ctx->domain, itergid,
                                         data->attrlist, &data->msg);
-        fail_if(ret != EOK, "Cannot retrieve group %llu\n",
+        sss_ck_fail_if_msg(ret != EOK, "Cannot retrieve group %llu\n",
                 (unsigned long long) data->gid);
 
         gv.data = (uint8_t *) ghostname;
@@ -2691,19 +2691,19 @@
         el = ldb_msg_find_element(data->msg, SYSDB_GHOST);
         if (data->gid > MBO_GROUP_BASE) {
             /* The first group would have the ghost attribute gone completely */
-            fail_if(el == NULL, "Cannot find ghost element\n");
+            sss_ck_fail_if_msg(el == NULL, "Cannot find ghost element\n");
             test_gv = ldb_msg_find_val(el, &gv);
-            fail_unless(test_gv == NULL,
+            ck_assert_msg(test_gv == NULL,
                         "Ghost user %s unexpectedly found\n", ghostname);
         } else {
-            fail_unless(el == NULL, "Stray values in ghost element?\n");
+            ck_assert_msg(el == NULL, "Stray values in ghost element?\n");
         }
     }
 
     /* Perform the add operation */
     ret = sysdb_set_group_attr(test_ctx->domain,
                                data->groupname, data->attrs, SYSDB_MOD_ADD);
-    fail_unless(ret == EOK, "Cannot set group attrs\n");
+    ck_assert_msg(ret == EOK, "Cannot set group attrs\n");
 
     /* Before the delete, all groups with gid >= _i have the testuser%_i
      * as a member
@@ -2711,17 +2711,17 @@
     for (itergid = data->gid ; itergid < MBO_GROUP_BASE + NUM_GHOSTS; itergid++) {
         ret = sysdb_search_group_by_gid(data, test_ctx->domain, itergid,
                                         data->attrlist, &data->msg);
-        fail_if(ret != EOK, "Cannot retrieve group %llu\n",
+        sss_ck_fail_if_msg(ret != EOK, "Cannot retrieve group %llu\n",
                 (unsigned long long) data->gid);
 
         gv.data = (uint8_t *) ghostname;
         gv.length = strlen(ghostname);
 
         el = ldb_msg_find_element(data->msg, SYSDB_GHOST);
-        fail_if(el == NULL, "Cannot find ghost element\n");
+        sss_ck_fail_if_msg(el == NULL, "Cannot find ghost element\n");
 
         test_gv = ldb_msg_find_val(el, &gv);
-        fail_if(test_gv == NULL, "Cannot find ghost user %s\n", ghostname);
+        sss_ck_fail_if_msg(test_gv == NULL, "Cannot find ghost user %s\n", ghostname);
     }
     talloc_free(test_ctx);
 }
@@ -2741,7 +2741,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -2751,17 +2751,17 @@
     /* The test replaces the testuser%i attribute with testghost%i */
     ghostname_del = test_asprintf_fqname(data, test_ctx->domain,
                                          "testuser%d", _i);
-    fail_unless(ghostname_del != NULL, "Out of memory\n");
+    ck_assert_msg(ghostname_del != NULL, "Out of memory\n");
 
     ghostname_add = test_asprintf_fqname(data, test_ctx->domain,
                                          "testuser%d", _i);
-    fail_unless(ghostname_add != NULL, "Out of memory\n");
+    ck_assert_msg(ghostname_add != NULL, "Out of memory\n");
 
     ret = sysdb_attrs_steal_string(data->attrs, SYSDB_GHOST, ghostname_add);
-    fail_unless(ret == EOK, "Cannot add attr\n");
+    ck_assert_msg(ret == EOK, "Cannot add attr\n");
 
     data->attrlist = talloc_array(data, const char *, 2);
-    fail_unless(data->attrlist != NULL, "talloc_array failed.");
+    ck_assert_msg(data->attrlist != NULL, "talloc_array failed.");
     data->attrlist[0] = SYSDB_GHOST;
     data->attrlist[1] = NULL;
 
@@ -2771,23 +2771,23 @@
     for (itergid = data->gid ; itergid < MBO_GROUP_BASE + NUM_GHOSTS; itergid++) {
         ret = sysdb_search_group_by_gid(data, test_ctx->domain, itergid,
                                         data->attrlist, &data->msg);
-        fail_if(ret != EOK, "Cannot retrieve group %llu\n",
+        sss_ck_fail_if_msg(ret != EOK, "Cannot retrieve group %llu\n",
                 (unsigned long long) data->gid);
 
         gv.data = (uint8_t *) ghostname_del;
         gv.length = strlen(ghostname_del);
 
         el = ldb_msg_find_element(data->msg, SYSDB_GHOST);
-        fail_if(el == NULL, "Cannot find ghost element\n");
+        sss_ck_fail_if_msg(el == NULL, "Cannot find ghost element\n");
 
         test_gv = ldb_msg_find_val(el, &gv);
-        fail_if(test_gv == NULL, "Cannot find ghost user %s\n", ghostname_del);
+        sss_ck_fail_if_msg(test_gv == NULL, "Cannot find ghost user %s\n", ghostname_del);
     }
 
     /* Perform the replace operation */
     ret =  sysdb_set_group_attr(test_ctx->domain,
                                 data->groupname, data->attrs, SYSDB_MOD_REP);
-    fail_unless(ret == EOK, "Cannot set group attrs\n");
+    ck_assert_msg(ret == EOK, "Cannot set group attrs\n");
 
     /* After the replace, all groups with gid >= _i have the testghost%_i
      * as a member
@@ -2795,17 +2795,17 @@
     for (itergid = data->gid ; itergid < MBO_GROUP_BASE + NUM_GHOSTS; itergid++) {
         ret = sysdb_search_group_by_gid(data, test_ctx->domain, itergid,
                                         data->attrlist, &data->msg);
-        fail_if(ret != EOK, "Cannot retrieve group %llu\n",
+        sss_ck_fail_if_msg(ret != EOK, "Cannot retrieve group %llu\n",
                 (unsigned long long) data->gid);
 
         gv.data = (uint8_t *) ghostname_add;
         gv.length = strlen(ghostname_add);
 
         el = ldb_msg_find_element(data->msg, SYSDB_GHOST);
-        fail_if(el == NULL, "Cannot find ghost element\n");
+        sss_ck_fail_if_msg(el == NULL, "Cannot find ghost element\n");
 
         test_gv = ldb_msg_find_val(el, &gv);
-        fail_if(test_gv == NULL, "Cannot find ghost user %s\n", ghostname_add);
+        sss_ck_fail_if_msg(test_gv == NULL, "Cannot find ghost user %s\n", ghostname_add);
     }
 
     talloc_free(test_ctx);
@@ -2828,7 +2828,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -2841,17 +2841,17 @@
      */
     ghostname_rep = test_asprintf_fqname(data, data->ctx->domain,
                                          "testusera%d", data->gid);
-    fail_unless(ghostname_rep != NULL, "Out of memory\n");
+    ck_assert_msg(ghostname_rep != NULL, "Out of memory\n");
 
     ret = sysdb_attrs_steal_string(data->attrs, SYSDB_GHOST, ghostname_rep);
-    fail_unless(ret == EOK, "Cannot add attr\n");
+    ck_assert_msg(ret == EOK, "Cannot add attr\n");
 
     ghostname_del = test_asprintf_fqname(data, data->ctx->domain,
                                          "testuserb%d", data->gid);
-    fail_unless(ghostname_del != NULL, "Out of memory\n");
+    ck_assert_msg(ghostname_del != NULL, "Out of memory\n");
 
     data->attrlist = talloc_array(data, const char *, 2);
-    fail_unless(data->attrlist != NULL, "talloc_array failed.");
+    ck_assert_msg(data->attrlist != NULL, "talloc_array failed.");
     data->attrlist[0] = SYSDB_GHOST;
     data->attrlist[1] = NULL;
 
@@ -2861,35 +2861,35 @@
     for (itergid = data->gid ; itergid < MBO_GROUP_BASE + NUM_GHOSTS; itergid++) {
         ret = sysdb_search_group_by_gid(data, test_ctx->domain, itergid,
                                         data->attrlist, &data->msg);
-        fail_if(ret != EOK, "Cannot retrieve group %llu\n",
+        sss_ck_fail_if_msg(ret != EOK, "Cannot retrieve group %llu\n",
                 (unsigned long long) data->gid);
 
         gv.data = (uint8_t *) ghostname_rep;
         gv.length = strlen(ghostname_rep);
 
         el = ldb_msg_find_element(data->msg, SYSDB_GHOST);
-        fail_if(el == NULL, "Cannot find ghost element\n");
+        sss_ck_fail_if_msg(el == NULL, "Cannot find ghost element\n");
 
         test_gv = ldb_msg_find_val(el, &gv);
-        fail_if(test_gv == NULL, "Cannot find ghost user %s\n", ghostname_rep);
+        sss_ck_fail_if_msg(test_gv == NULL, "Cannot find ghost user %s\n", ghostname_rep);
 
         gv.data = (uint8_t *) ghostname_del;
         gv.length = strlen(ghostname_rep);
 
         test_gv = ldb_msg_find_val(el, &gv);
-        fail_if(test_gv == NULL, "Cannot find ghost user %s\n", ghostname_del);
+        sss_ck_fail_if_msg(test_gv == NULL, "Cannot find ghost user %s\n", ghostname_del);
 
         /* inherited users must be there */
         for (iteruid = MBO_GROUP_BASE ; iteruid < itergid ; iteruid++) {
             ghostname_check = test_asprintf_fqname(data, data->ctx->domain,
                                                    "testusera%d", iteruid);
-            fail_unless(ghostname_rep != NULL, "Out of memory\n");
+            ck_assert_msg(ghostname_rep != NULL, "Out of memory\n");
 
             gv.data = (uint8_t *) ghostname_check;
             gv.length = strlen(ghostname_check);
 
             test_gv = ldb_msg_find_val(el, &gv);
-            fail_if(test_gv == NULL, "Cannot find inherited ghost user %s\n",
+            sss_ck_fail_if_msg(test_gv == NULL, "Cannot find inherited ghost user %s\n",
                     ghostname_check);
 
             if (iteruid < data->gid) {
@@ -2900,7 +2900,7 @@
                 gv.length = strlen(ghostname_check);
 
                 test_gv = ldb_msg_find_val(el, &gv);
-                fail_if(test_gv == NULL, "Cannot find inherited ghost user %s\n",
+                sss_ck_fail_if_msg(test_gv == NULL, "Cannot find inherited ghost user %s\n",
                         ghostname_check);
             }
             talloc_zfree(ghostname_check);
@@ -2910,7 +2910,7 @@
     /* Perform the replace operation */
     ret = sysdb_set_group_attr(test_ctx->domain,
                                data->groupname, data->attrs, SYSDB_MOD_REP);
-    fail_unless(ret == EOK, "Cannot set group attrs\n");
+    ck_assert_msg(ret == EOK, "Cannot set group attrs\n");
 
     /* After the replace, testusera should still be there, but we also need
      * to keep ghost users inherited from other groups
@@ -2918,7 +2918,7 @@
     for (itergid = data->gid ; itergid < MBO_GROUP_BASE + NUM_GHOSTS; itergid++) {
         ret = sysdb_search_group_by_gid(data, test_ctx->domain, itergid,
                                         data->attrlist, &data->msg);
-        fail_if(ret != EOK, "Cannot retrieve group %llu\n",
+        sss_ck_fail_if_msg(ret != EOK, "Cannot retrieve group %llu\n",
                 (unsigned long long) data->gid);
 
         gv.data = (uint8_t *) ghostname_rep;
@@ -2926,17 +2926,17 @@
 
         /* testusera must still be there */
         el = ldb_msg_find_element(data->msg, SYSDB_GHOST);
-        fail_if(el == NULL, "Cannot find ghost element\n");
+        sss_ck_fail_if_msg(el == NULL, "Cannot find ghost element\n");
 
         test_gv = ldb_msg_find_val(el, &gv);
-        fail_if(test_gv == NULL, "Cannot find ghost user %s\n", ghostname_rep);
+        sss_ck_fail_if_msg(test_gv == NULL, "Cannot find ghost user %s\n", ghostname_rep);
 
         /* testuserb must be gone */
         gv.data = (uint8_t *) ghostname_del;
         gv.length = strlen(ghostname_rep);
 
         test_gv = ldb_msg_find_val(el, &gv);
-        fail_unless(test_gv == NULL, "Cannot find ghost user %s\n", ghostname_del);
+        ck_assert_msg(test_gv == NULL, "Cannot find ghost user %s\n", ghostname_del);
 
         /* inherited users must still be there */
         for (iteruid = MBO_GROUP_BASE ; iteruid < itergid ; iteruid++) {
@@ -2946,7 +2946,7 @@
             gv.length = strlen(ghostname_check);
 
             test_gv = ldb_msg_find_val(el, &gv);
-            fail_if(test_gv == NULL, "Cannot find inherited ghost user %s\n",
+            sss_ck_fail_if_msg(test_gv == NULL, "Cannot find inherited ghost user %s\n",
                     ghostname_check);
 
             if (iteruid < data->gid) {
@@ -2957,7 +2957,7 @@
                 gv.length = strlen(ghostname_check);
 
                 test_gv = ldb_msg_find_val(el, &gv);
-                fail_if(test_gv == NULL, "Cannot find inherited ghost user %s\n",
+                sss_ck_fail_if_msg(test_gv == NULL, "Cannot find inherited ghost user %s\n",
                         ghostname_check);
             }
             talloc_zfree(ghostname_check);
@@ -2977,23 +2977,23 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
     data = test_data_new_group(test_ctx, MBO_GROUP_BASE);
-    fail_if(data == NULL, "OOM");
+    sss_ck_fail_if_msg(data == NULL, "OOM");
 
     data->attrlist = talloc_array(data, const char *, 2);
-    fail_unless(data->attrlist != NULL, "talloc_array failed.");
+    ck_assert_msg(data->attrlist != NULL, "talloc_array failed.");
     data->attrlist[0] = test_asprintf_fqname(data, test_ctx->domain,
                                              "testgroup%d", data->gid + 9);
-    fail_unless(data->attrlist[0] != NULL, "talloc_array failed.");
+    ck_assert_msg(data->attrlist[0] != NULL, "talloc_array failed.");
     data->attrlist[1] = NULL;
 
     ret = test_memberof_store_group(data);
 
-    fail_if(ret != EOK, "Could not store POSIX group #%d", data->gid);
+    sss_ck_fail_if_msg(ret != EOK, "Could not store POSIX group #%d", data->gid);
     talloc_free(test_ctx);
 }
 END_TEST
@@ -3007,7 +3007,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -3015,7 +3015,7 @@
     fail_if(data == NULL);
 
     ret = test_store_user(data);
-    fail_if(ret != EOK, "Could not store user %s", data->username);
+    sss_ck_fail_if_msg(ret != EOK, "Could not store user %s", data->username);
     talloc_free(test_ctx);
 }
 END_TEST
@@ -3029,7 +3029,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -3042,7 +3042,7 @@
     fail_if(data->username == NULL);
 
     ret = test_add_group_member(data);
-    fail_if(ret != EOK, "Could not modify group %s", data->groupname);
+    sss_ck_fail_if_msg(ret != EOK, "Could not modify group %s", data->groupname);
 
     talloc_free(test_ctx);
 }
@@ -3057,7 +3057,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -3065,7 +3065,7 @@
     fail_if(data == NULL);
 
     data->attrlist = talloc_array(data, const char *, 2);
-    fail_unless(data->attrlist != NULL, "tallo_array failed.");
+    ck_assert_msg(data->attrlist != NULL, "tallo_array failed.");
     data->attrlist[0] = "memberuid";
     data->attrlist[1] = NULL;
 
@@ -3073,21 +3073,21 @@
                                     data->gid, data->attrlist,
                                     &data->msg);
     if (_i == 5) {
-        fail_unless(ret == ENOENT,
+        ck_assert_msg(ret == ENOENT,
                     "sysdb_search_group_by_gid found "
                     "already deleted group");
         if (ret == ENOENT) ret = EOK;
 
-        fail_if(ret != EOK, "Could not check group %d", data->gid);
+        sss_ck_fail_if_msg(ret != EOK, "Could not check group %d", data->gid);
     } else {
-        fail_if(ret != EOK, "Could not check group %d", data->gid);
+        sss_ck_fail_if_msg(ret != EOK, "Could not check group %d", data->gid);
 
-        fail_unless(data->msg->num_elements == 1,
+        ck_assert_msg(data->msg->num_elements == 1,
                     "Wrong number of results, expected [1] got [%d]",
                     data->msg->num_elements);
-        fail_unless(strcmp(data->msg->elements[0].name, "memberuid") == 0,
+        ck_assert_msg(strcmp(data->msg->elements[0].name, "memberuid") == 0,
                     "Wrong attribute name");
-        fail_unless(data->msg->elements[0].num_values == ((_i + 1) % 6),
+        ck_assert_msg(data->msg->elements[0].num_values == ((_i + 1) % 6),
                     "Wrong number of attribute values, "
                     "expected [%d] got [%d]", ((_i + 1) % 6),
                     data->msg->elements[0].num_values);
@@ -3106,7 +3106,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -3114,7 +3114,7 @@
     fail_if(data == NULL);
 
     data->attrlist = talloc_array(data, const char *, 2);
-    fail_unless(data->attrlist != NULL, "talloc_array failed.");
+    ck_assert_msg(data->attrlist != NULL, "talloc_array failed.");
     data->attrlist[0] = "memberuid";
     data->attrlist[1] = NULL;
 
@@ -3122,14 +3122,14 @@
                                     data->gid, data->attrlist,
                                     &data->msg);
 
-    fail_if(ret != EOK, "Could not check group %d", data->gid);
+    sss_ck_fail_if_msg(ret != EOK, "Could not check group %d", data->gid);
 
-    fail_unless(data->msg->num_elements == 1,
+    ck_assert_msg(data->msg->num_elements == 1,
                 "Wrong number of results, expected [1] got [%d]",
                 data->msg->num_elements);
-    fail_unless(strcmp(data->msg->elements[0].name, "memberuid") == 0,
+    ck_assert_msg(strcmp(data->msg->elements[0].name, "memberuid") == 0,
                 "Wrong attribute name");
-    fail_unless(data->msg->elements[0].num_values == _i + 1,
+    ck_assert_msg(data->msg->elements[0].num_values == _i + 1,
                 "Wrong number of attribute values, expected [%d] got [%d]",
                 _i + 1, data->msg->elements[0].num_values);
 
@@ -3146,7 +3146,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -3154,7 +3154,7 @@
     fail_if(data == NULL);
 
     data->attrlist = talloc_array(data, const char *, 2);
-    fail_unless(data->attrlist != NULL, "talloc_array failed.");
+    ck_assert_msg(data->attrlist != NULL, "talloc_array failed.");
     data->attrlist[0] = "memberuid";
     data->attrlist[1] = NULL;
 
@@ -3162,14 +3162,14 @@
                                     data->gid, data->attrlist,
                                     &data->msg);
 
-    fail_if(ret != EOK, "Could not check group %d", data->gid);
+    sss_ck_fail_if_msg(ret != EOK, "Could not check group %d", data->gid);
 
-    fail_unless(data->msg->num_elements == 1,
+    ck_assert_msg(data->msg->num_elements == 1,
                 "Wrong number of results, expected [1] got [%d]",
                 data->msg->num_elements);
-    fail_unless(strcmp(data->msg->elements[0].name, "memberuid") == 0,
+    ck_assert_msg(strcmp(data->msg->elements[0].name, "memberuid") == 0,
                 "Wrong attribute name");
-    fail_unless(data->msg->elements[0].num_values == 10,
+    ck_assert_msg(data->msg->elements[0].num_values == 10,
                 "Wrong number of attribute values, expected [%d] got [%d]",
                 10, data->msg->elements[0].num_values);
 
@@ -3186,7 +3186,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -3194,7 +3194,7 @@
     fail_if(data == NULL);
 
     data->attrlist = talloc_array(data, const char *, 2);
-    fail_unless(data->attrlist != NULL, "tallo_array failed.");
+    ck_assert_msg(data->attrlist != NULL, "tallo_array failed.");
     data->attrlist[0] = "memberuid";
     data->attrlist[1] = NULL;
 
@@ -3203,21 +3203,21 @@
                                     &data->msg);
 
     if (_i == 5) {
-        fail_unless(ret == ENOENT,
+        ck_assert_msg(ret == ENOENT,
                     "sysdb_search_group_by_gid_send found "
                     "already deleted group");
         if (ret == ENOENT) ret = EOK;
 
-        fail_if(ret != EOK, "Could not check group %d", data->gid);
+        sss_ck_fail_if_msg(ret != EOK, "Could not check group %d", data->gid);
     } else {
-        fail_if(ret != EOK, "Could not check group %d", data->gid);
+        sss_ck_fail_if_msg(ret != EOK, "Could not check group %d", data->gid);
 
-        fail_unless(data->msg->num_elements == 1,
+        ck_assert_msg(data->msg->num_elements == 1,
                     "Wrong number of results, expected [1] got [%d]",
                     data->msg->num_elements);
-        fail_unless(strcmp(data->msg->elements[0].name, "memberuid") == 0,
+        ck_assert_msg(strcmp(data->msg->elements[0].name, "memberuid") == 0,
                     "Wrong attribute name");
-        fail_unless(data->msg->elements[0].num_values == ((_i + 5) % 10),
+        ck_assert_msg(data->msg->elements[0].num_values == ((_i + 5) % 10),
                     "Wrong number of attribute values, expected [%d] got [%d]",
                     ((_i + 5) % 10), data->msg->elements[0].num_values);
     }
@@ -3235,7 +3235,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -3243,17 +3243,17 @@
     fail_if(data == NULL);
 
     data->attrlist = talloc_array(data, const char *, 2);
-    fail_unless(data->attrlist != NULL, "talloc_array failed.");
+    ck_assert_msg(data->attrlist != NULL, "talloc_array failed.");
     data->attrlist[0] = SYSDB_GHOST;
     data->attrlist[1] = NULL;
 
     ret = sysdb_search_group_by_gid(data, test_ctx->domain, data->gid,
                                     data->attrlist, &data->msg);
-    fail_if(ret != EOK, "Cannot retrieve group %llu\n", (unsigned long long) data->gid);
+    sss_ck_fail_if_msg(ret != EOK, "Cannot retrieve group %llu\n", (unsigned long long) data->gid);
 
-    fail_unless(strcmp(data->msg->elements[0].name, SYSDB_GHOST) == 0,
+    ck_assert_msg(strcmp(data->msg->elements[0].name, SYSDB_GHOST) == 0,
                 "Wrong attribute name");
-    fail_unless(data->msg->elements[0].num_values == _i - MBO_GROUP_BASE + 1,
+    ck_assert_msg(data->msg->elements[0].num_values == _i - MBO_GROUP_BASE + 1,
                 "Wrong number of attribute values, expected [%d] got [%d]",
                 _i - MBO_GROUP_BASE + 1, data->msg->elements[0].num_values);
 
@@ -3270,7 +3270,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -3278,17 +3278,17 @@
     fail_if(data == NULL);
 
     data->attrlist = talloc_array(data, const char *, 2);
-    fail_unless(data->attrlist != NULL, "talloc_array failed.");
+    ck_assert_msg(data->attrlist != NULL, "talloc_array failed.");
     data->attrlist[0] = SYSDB_GHOST;
     data->attrlist[1] = NULL;
 
     ret = sysdb_search_group_by_gid(data, test_ctx->domain, data->gid,
                                     data->attrlist, &data->msg);
-    fail_if(ret != EOK, "Cannot retrieve group %llu\n", (unsigned long long) data->gid);
+    sss_ck_fail_if_msg(ret != EOK, "Cannot retrieve group %llu\n", (unsigned long long) data->gid);
 
-    fail_unless(strcmp(data->msg->elements[0].name, SYSDB_GHOST) == 0,
+    ck_assert_msg(strcmp(data->msg->elements[0].name, SYSDB_GHOST) == 0,
                 "Wrong attribute name");
-    fail_unless(data->msg->elements[0].num_values == (_i - MBO_GROUP_BASE + 1)*2,
+    ck_assert_msg(data->msg->elements[0].num_values == (_i - MBO_GROUP_BASE + 1)*2,
                 "Wrong number of attribute values, expected [%d] got [%d]",
                 (_i - MBO_GROUP_BASE + 1)*2,
                 data->msg->elements[0].num_values);
@@ -3307,7 +3307,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -3316,25 +3316,25 @@
     delgid = data->gid - 1;
 
     data->attrlist = talloc_array(data, const char *, 2);
-    fail_unless(data->attrlist != NULL, "talloc_array failed.");
+    ck_assert_msg(data->attrlist != NULL, "talloc_array failed.");
     data->attrlist[0] = SYSDB_GHOST;
     data->attrlist[1] = NULL;
 
     ret = sysdb_search_group_by_gid(data, test_ctx->domain, data->gid,
                                     data->attrlist, &data->msg);
-    fail_if(ret != EOK, "Cannot retrieve group %llu\n", (unsigned long long) data->gid);
+    sss_ck_fail_if_msg(ret != EOK, "Cannot retrieve group %llu\n", (unsigned long long) data->gid);
 
-    fail_unless(strcmp(data->msg->elements[0].name, SYSDB_GHOST) == 0,
+    ck_assert_msg(strcmp(data->msg->elements[0].name, SYSDB_GHOST) == 0,
                 "Wrong attribute name");
 
     /* Expect our own and our parent's */
-    fail_unless(data->msg->elements[0].num_values == 2,
+    ck_assert_msg(data->msg->elements[0].num_values == 2,
                 "Wrong number of attribute values, expected [%d] got [%d]",
                 2, data->msg->elements[0].num_values);
 
     /* Remove the parent */
     ret = sysdb_delete_group(data->ctx->domain, NULL, delgid);
-    fail_if(ret != EOK, "Cannot delete group %llu [%d]: %s\n",
+    sss_ck_fail_if_msg(ret != EOK, "Cannot delete group %llu [%d]: %s\n",
             (unsigned long long) data->gid, ret, strerror(ret));
 
     talloc_free(data->msg);
@@ -3342,13 +3342,13 @@
     /* Check the parent again. The inherited ghost user should be gone. */
     ret = sysdb_search_group_by_gid(data, test_ctx->domain, data->gid,
                                     data->attrlist, &data->msg);
-    fail_if(ret != EOK, "Cannot retrieve group %llu\n", (unsigned long long) data->gid);
+    sss_ck_fail_if_msg(ret != EOK, "Cannot retrieve group %llu\n", (unsigned long long) data->gid);
 
-    fail_unless(strcmp(data->msg->elements[0].name, SYSDB_GHOST) == 0,
+    ck_assert_msg(strcmp(data->msg->elements[0].name, SYSDB_GHOST) == 0,
                 "Wrong attribute name");
 
     /* Expect our own now only */
-    fail_unless(data->msg->elements[0].num_values == 1,
+    ck_assert_msg(data->msg->elements[0].num_values == 1,
                 "Wrong number of attribute values, expected [%d] got [%d]",
                 1, data->msg->elements[0].num_values);
 
@@ -3369,7 +3369,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -3377,12 +3377,12 @@
     fail_if(data == NULL);
 
     ghostname = test_asprintf_fqname(data, test_ctx->domain, "testuser%d", _i);
-    fail_unless(ghostname != NULL, "Out of memory\n");
+    ck_assert_msg(ghostname != NULL, "Out of memory\n");
     ret = sysdb_attrs_steal_string(data->attrs, SYSDB_GHOST, ghostname);
-    fail_unless(ret == EOK, "Cannot add attr\n");
+    ck_assert_msg(ret == EOK, "Cannot add attr\n");
 
     data->attrlist = talloc_array(data, const char *, 2);
-    fail_unless(data->attrlist != NULL, "talloc_array failed.");
+    ck_assert_msg(data->attrlist != NULL, "talloc_array failed.");
     data->attrlist[0] = SYSDB_GHOST;
     data->attrlist[1] = NULL;
 
@@ -3392,17 +3392,17 @@
     for (itergid = data->gid ; itergid < MBO_GROUP_BASE + NUM_GHOSTS; itergid++) {
         ret = sysdb_search_group_by_gid(data, test_ctx->domain, itergid,
                                         data->attrlist, &data->msg);
-        fail_if(ret != EOK, "Cannot retrieve group %llu\n",
+        sss_ck_fail_if_msg(ret != EOK, "Cannot retrieve group %llu\n",
                 (unsigned long long) data->gid);
 
         gv.data = (uint8_t *) ghostname;
         gv.length = strlen(ghostname);
 
         el = ldb_msg_find_element(data->msg, SYSDB_GHOST);
-        fail_if(el == NULL, "Cannot find ghost element\n");
+        sss_ck_fail_if_msg(el == NULL, "Cannot find ghost element\n");
 
         test_gv = ldb_msg_find_val(el, &gv);
-        fail_if(test_gv == NULL, "Cannot find ghost user %s\n", ghostname);
+        sss_ck_fail_if_msg(test_gv == NULL, "Cannot find ghost user %s\n", ghostname);
     }
 
     /* Delete the attribute */
@@ -3410,13 +3410,13 @@
     ret = sysdb_set_group_attr(test_ctx->domain,
                                data->groupname, data->attrs, SYSDB_MOD_DEL);
     fail_if_null_ctx_leaks(test_ctx);
-    fail_unless(ret == EOK, "Cannot set group attrs\n");
+    ck_assert_msg(ret == EOK, "Cannot set group attrs\n");
 
     /* After the delete, we shouldn't be able to find the ghost attribute */
     for (itergid = data->gid ; itergid < MBO_GROUP_BASE + NUM_GHOSTS; itergid++) {
         ret = sysdb_search_group_by_gid(data, test_ctx->domain, itergid,
                                         data->attrlist, &data->msg);
-        fail_if(ret != EOK, "Cannot retrieve group %llu\n",
+        sss_ck_fail_if_msg(ret != EOK, "Cannot retrieve group %llu\n",
                 (unsigned long long) data->gid);
 
         gv.data = (uint8_t *) ghostname;
@@ -3425,12 +3425,12 @@
         el = ldb_msg_find_element(data->msg, SYSDB_GHOST);
         if (itergid > data->gid) {
             /* The first group would have the ghost attribute gone completely */
-            fail_if(el == NULL, "Cannot find ghost element\n");
+            sss_ck_fail_if_msg(el == NULL, "Cannot find ghost element\n");
             test_gv = ldb_msg_find_val(el, &gv);
-            fail_unless(test_gv == NULL,
+            ck_assert_msg(test_gv == NULL,
                         "Ghost user %s unexpectedly found\n", ghostname);
         } else {
-            fail_unless(el == NULL, "Stray values in ghost element?\n");
+            ck_assert_msg(el == NULL, "Stray values in ghost element?\n");
         }
     }
 
@@ -3448,7 +3448,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -3456,21 +3456,21 @@
     fail_if(data == NULL);
 
     data->attrlist = talloc_array(data, const char *, 2);
-    fail_unless(data->attrlist != NULL, "talloc_array failed.");
+    ck_assert_msg(data->attrlist != NULL, "talloc_array failed.");
     data->attrlist[0] = SYSDB_GHOST;
     data->attrlist[1] = NULL;
 
     ret = sysdb_search_group_by_gid(data, test_ctx->domain, data->gid,
                                     data->attrlist, &data->msg);
 
-    fail_if(ret != EOK, "Could not check group %d", data->gid);
+    sss_ck_fail_if_msg(ret != EOK, "Could not check group %d", data->gid);
 
     if (_i > MBO_GROUP_BASE) {
         /* After the previous test, the first group (gid == MBO_GROUP_BASE)
          * has no ghost users. That's a legitimate test case we need to account
          * for now.
          */
-        fail_unless(data->msg->num_elements == 1,
+        ck_assert_msg(data->msg->num_elements == 1,
                     "Wrong number of results, expected [1] got [%d] for %d",
                     data->msg->num_elements, data->gid);
     }
@@ -3480,16 +3480,16 @@
         return;
     }
 
-    fail_unless(strcmp(data->msg->elements[0].name, SYSDB_GHOST) == 0,
+    ck_assert_msg(strcmp(data->msg->elements[0].name, SYSDB_GHOST) == 0,
                 "Wrong attribute name");
-    fail_unless(data->msg->elements[0].num_values == _i - MBO_GROUP_BASE,
+    ck_assert_msg(data->msg->elements[0].num_values == _i - MBO_GROUP_BASE,
                 "Wrong number of attribute values, expected [%d] got [%d]",
                 _i + 1, data->msg->elements[0].num_values);
 
     for (j = MBO_GROUP_BASE; j < _i; j++) {
         expected = test_asprintf_fqname(data, test_ctx->domain, "testghost%d", j);
-        fail_if(expected == NULL, "OOM\n");
-        fail_unless(strcmp(expected,
+        sss_ck_fail_if_msg(expected == NULL, "OOM\n");
+        ck_assert(strcmp(expected,
                            (const char *) data->msg->elements[0].values[j-MBO_GROUP_BASE].data) == 0);
         talloc_free(expected);
     }
@@ -3507,7 +3507,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -3518,7 +3518,7 @@
     fail_if(data->username == NULL);
 
     ret = test_store_user(data);
-    fail_if(ret != EOK, "Cannot add user %s\n", data->username);
+    sss_ck_fail_if_msg(ret != EOK, "Cannot add user %s\n", data->username);
 }
 END_TEST
 
@@ -3536,7 +3536,7 @@
      */
     ret = _setup_sysdb_tests(&test_ctx, false);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -3544,7 +3544,7 @@
     fail_if(data == NULL);
 
     data->attrlist = talloc_array(data, const char *, 3);
-    fail_unless(data->attrlist != NULL, "talloc_array failed.");
+    ck_assert_msg(data->attrlist != NULL, "talloc_array failed.");
     data->attrlist[0] = SYSDB_GHOST;
     data->attrlist[1] = SYSDB_MEMBER;
     data->attrlist[2] = NULL;
@@ -3552,9 +3552,9 @@
     ret = sysdb_search_group_by_gid(data, test_ctx->domain, data->gid,
                                     data->attrlist, &data->msg);
 
-    fail_if(ret != EOK, "Could not check group %d", data->gid);
+    sss_ck_fail_if_msg(ret != EOK, "Could not check group %d", data->gid);
 
-    fail_unless(data->msg->num_elements == (_i == MBO_GROUP_BASE) ? 0 : 1,
+    ck_assert_msg(data->msg->num_elements == (_i == MBO_GROUP_BASE) ? 0 : 1,
                 "Wrong number of results, expected [1] got [%d] for %d",
                 data->msg->num_elements, data->gid);
 
@@ -3575,10 +3575,10 @@
         exp_gh = 0;
     }
 
-    fail_if(exp_mem != members->num_values,
+    sss_ck_fail_if_msg(exp_mem != members->num_values,
             "Expected %d members, found %d\n", exp_mem, members->num_values);
     if (exp_gh) {
-        fail_if(exp_gh != ghosts->num_values,
+        sss_ck_fail_if_msg(exp_gh != ghosts->num_values,
                 "Expected %d members, found %d\n", exp_gh, ghosts->num_values);
     }
 
@@ -3599,7 +3599,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -3609,54 +3609,54 @@
     /* The test replaces the testghost%i attribute with testuser%i */
     ghostname_del = test_asprintf_fqname(data, test_ctx->domain,
                                          "testghost%d", data->gid - 1);
-    fail_unless(ghostname_del != NULL, "Out of memory\n");
+    ck_assert_msg(ghostname_del != NULL, "Out of memory\n");
 
     ghostname_add = test_asprintf_fqname(data, test_ctx->domain,
                                          "testuser%d", data->gid - 1);
-    fail_unless(ghostname_add != NULL, "Out of memory\n");
+    ck_assert_msg(ghostname_add != NULL, "Out of memory\n");
 
     ret = sysdb_attrs_steal_string(data->attrs, SYSDB_GHOST, ghostname_add);
-    fail_unless(ret == EOK, "Cannot add attr\n");
+    ck_assert_msg(ret == EOK, "Cannot add attr\n");
 
     data->attrlist = talloc_array(data, const char *, 2);
-    fail_unless(data->attrlist != NULL, "talloc_array failed.");
+    ck_assert_msg(data->attrlist != NULL, "talloc_array failed.");
     data->attrlist[0] = SYSDB_GHOST;
     data->attrlist[1] = NULL;
 
     /* Before the replace, the group has the testghost%_i as a member */
     ret = sysdb_search_group_by_gid(data, test_ctx->domain, data->gid,
                                     data->attrlist, &data->msg);
-    fail_if(ret != EOK, "Cannot retrieve group %llu\n",
+    sss_ck_fail_if_msg(ret != EOK, "Cannot retrieve group %llu\n",
             (unsigned long long) data->gid);
 
     gv.data = (uint8_t *) ghostname_del;
     gv.length = strlen(ghostname_del);
 
     el = ldb_msg_find_element(data->msg, SYSDB_GHOST);
-    fail_if(el == NULL, "Cannot find ghost element\n");
+    sss_ck_fail_if_msg(el == NULL, "Cannot find ghost element\n");
 
     test_gv = ldb_msg_find_val(el, &gv);
-    fail_if(test_gv == NULL, "Cannot find ghost user %s\n", ghostname_del);
+    sss_ck_fail_if_msg(test_gv == NULL, "Cannot find ghost user %s\n", ghostname_del);
 
     /* Perform the replace operation */
     ret =  sysdb_set_group_attr(test_ctx->domain,
                                 data->groupname, data->attrs, SYSDB_MOD_REP);
-    fail_unless(ret == EOK, "Cannot set group attrs\n");
+    ck_assert_msg(ret == EOK, "Cannot set group attrs\n");
 
     /* After the replace, the group has the testghost%_i as a member */
     ret = sysdb_search_group_by_gid(data, test_ctx->domain, data->gid,
                                     data->attrlist, &data->msg);
-    fail_if(ret != EOK, "Cannot retrieve group %llu\n",
+    sss_ck_fail_if_msg(ret != EOK, "Cannot retrieve group %llu\n",
             (unsigned long long) data->gid);
 
     gv.data = (uint8_t *) ghostname_add;
     gv.length = strlen(ghostname_add);
 
     el = ldb_msg_find_element(data->msg, SYSDB_GHOST);
-    fail_if(el == NULL, "Cannot find ghost element\n");
+    sss_ck_fail_if_msg(el == NULL, "Cannot find ghost element\n");
 
     test_gv = ldb_msg_find_val(el, &gv);
-    fail_if(test_gv == NULL, "Cannot find ghost user %s\n", ghostname_add);
+    sss_ck_fail_if_msg(test_gv == NULL, "Cannot find ghost user %s\n", ghostname_add);
 }
 END_TEST
 
@@ -3673,7 +3673,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -3683,54 +3683,54 @@
     /* The test replaces the testghost%i attribute with testuser%i */
     ghostname_del = test_asprintf_fqname(data, test_ctx->domain,
                                          "testuser%d", data->gid - 1);
-    fail_unless(ghostname_del != NULL, "Out of memory\n");
+    ck_assert_msg(ghostname_del != NULL, "Out of memory\n");
 
     ghostname_add = test_asprintf_fqname(data, test_ctx->domain,
                                          "testuser%d", data->gid - 1);
-    fail_unless(ghostname_add != NULL, "Out of memory\n");
+    ck_assert_msg(ghostname_add != NULL, "Out of memory\n");
 
     ret = sysdb_attrs_steal_string(data->attrs, SYSDB_GHOST, ghostname_add);
-    fail_unless(ret == EOK, "Cannot add attr\n");
+    ck_assert_msg(ret == EOK, "Cannot add attr\n");
 
     data->attrlist = talloc_array(data, const char *, 2);
-    fail_unless(data->attrlist != NULL, "talloc_array failed.");
+    ck_assert_msg(data->attrlist != NULL, "talloc_array failed.");
     data->attrlist[0] = SYSDB_GHOST;
     data->attrlist[1] = NULL;
 
     /* Before the replace, the group has the testghost%_i as a member */
     ret = sysdb_search_group_by_gid(data, test_ctx->domain, data->gid,
                                     data->attrlist, &data->msg);
-    fail_if(ret != EOK, "Cannot retrieve group %llu\n",
+    sss_ck_fail_if_msg(ret != EOK, "Cannot retrieve group %llu\n",
             (unsigned long long) data->gid);
 
     gv.data = (uint8_t *) ghostname_del;
     gv.length = strlen(ghostname_del);
 
     el = ldb_msg_find_element(data->msg, SYSDB_GHOST);
-    fail_if(el == NULL, "Cannot find ghost element\n");
+    sss_ck_fail_if_msg(el == NULL, "Cannot find ghost element\n");
 
     test_gv = ldb_msg_find_val(el, &gv);
-    fail_if(test_gv == NULL, "Cannot find ghost user %s\n", ghostname_del);
+    sss_ck_fail_if_msg(test_gv == NULL, "Cannot find ghost user %s\n", ghostname_del);
 
     /* Perform the replace operation */
     ret =  sysdb_set_group_attr(test_ctx->domain,
                                 data->groupname, data->attrs, SYSDB_MOD_REP);
-    fail_unless(ret == EOK, "Cannot set group attrs\n");
+    ck_assert_msg(ret == EOK, "Cannot set group attrs\n");
 
     /* After the replace, the group has the testghost%_i as a member */
     ret = sysdb_search_group_by_gid(data, test_ctx->domain, data->gid,
                                     data->attrlist, &data->msg);
-    fail_if(ret != EOK, "Cannot retrieve group %llu\n",
+    sss_ck_fail_if_msg(ret != EOK, "Cannot retrieve group %llu\n",
             (unsigned long long) data->gid);
 
     gv.data = (uint8_t *) ghostname_add;
     gv.length = strlen(ghostname_add);
 
     el = ldb_msg_find_element(data->msg, SYSDB_GHOST);
-    fail_if(el == NULL, "Cannot find ghost element\n");
+    sss_ck_fail_if_msg(el == NULL, "Cannot find ghost element\n");
 
     test_gv = ldb_msg_find_val(el, &gv);
-    fail_if(test_gv == NULL, "Cannot find ghost user %s\n", ghostname_add);
+    sss_ck_fail_if_msg(test_gv == NULL, "Cannot find ghost user %s\n", ghostname_add);
 }
 END_TEST
 
@@ -3743,7 +3743,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -3752,7 +3752,7 @@
 
     ret = test_remove_user_by_uid(data);
 
-    fail_if(ret != EOK, "Could not remove user with uid %d", _i);
+    sss_ck_fail_if_msg(ret != EOK, "Could not remove user with uid %d", _i);
     talloc_free(test_ctx);
 }
 END_TEST
@@ -3768,7 +3768,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -3778,7 +3778,7 @@
     /* attribute is not created yet */
     ret = sysdb_get_bool(test_ctx->sysdb, dn, attr_val,
                          &value);
-    fail_unless(ret == ENOENT,
+    ck_assert_msg(ret == ENOENT,
                 "sysdb_get_bool returned %d:[%s], but ENOENT is expected",
                 ret, sss_strerror(ret));
 
@@ -3790,7 +3790,7 @@
     /* successfully obtain attribute */
     ret = sysdb_get_bool(test_ctx->sysdb, dn, attr_val,
                          &value);
-    fail_unless(ret == EOK, "sysdb_get_bool failed %d:[%s]",
+    ck_assert_msg(ret == EOK, "sysdb_get_bool failed %d:[%s]",
                 ret, sss_strerror(ret));
     fail_unless(value == true);
 
@@ -3800,7 +3800,7 @@
     fail_unless(ne_dn != NULL);
     ret = sysdb_get_bool(test_ctx->sysdb, ne_dn, attr_val,
                          &value);
-    fail_unless(ret == ENOENT,
+    ck_assert_msg(ret == ENOENT,
                 "sysdb_get_bool returned %d:[%s], but ENOENT is expected",
                 ret, sss_strerror(ret));
 
@@ -3819,23 +3819,23 @@
 
     attrs_list[0] = sysdb_new_attrs(test_ctx);
     ret = sysdb_attrs_add_string(attrs_list[0], "test_attr", "attr1");
-    fail_if(ret, "Add string failed");
+    sss_ck_fail_if_msg(ret, "Add string failed");
     attrs_list[1] = sysdb_new_attrs(test_ctx);
     ret = sysdb_attrs_add_string(attrs_list[1], "test_attr", "attr2");
-    fail_if(ret, "Add string failed");
+    sss_ck_fail_if_msg(ret, "Add string failed");
     attrs_list[2] = sysdb_new_attrs(test_ctx);
     ret = sysdb_attrs_add_string(attrs_list[2], "nottest_attr", "attr3");
-    fail_if(ret, "Add string failed");
+    sss_ck_fail_if_msg(ret, "Add string failed");
 
     ret = sysdb_attrs_to_list(test_ctx, attrs_list, 3,
                               "test_attr", &list);
-    fail_unless(ret == EOK, "sysdb_attrs_to_list failed with code %d", ret);
+    ck_assert_msg(ret == EOK, "sysdb_attrs_to_list failed with code %d", ret);
 
-    fail_unless(strcmp(list[0],"attr1") == 0, "Expected [attr1], got [%s]",
+    ck_assert_msg(strcmp(list[0],"attr1") == 0, "Expected [attr1], got [%s]",
                                               list[0]);
-    fail_unless(strcmp(list[1],"attr2") == 0, "Expected [attr2], got [%s]",
+    ck_assert_msg(strcmp(list[1],"attr2") == 0, "Expected [attr2], got [%s]",
                                               list[1]);
-    fail_unless(list[2] == NULL, "List should be NULL-terminated");
+    ck_assert_msg(list[2] == NULL, "List should be NULL-terminated");
 
     talloc_free(test_ctx);
 }
@@ -3851,59 +3851,59 @@
     char *realname;
 
     ret = setup_sysdb_tests(&test_ctx);
-    fail_if(ret != EOK, "Could not set up the test");
+    sss_ck_fail_if_msg(ret != EOK, "Could not set up the test");
 
     fq_alias = sss_create_internal_fqname(test_ctx, "alias",
                                           test_ctx->domain->name);
     realname = sss_create_internal_fqname(test_ctx, "RealName",
                                           test_ctx->domain->name);
-    fail_if(fq_alias == NULL, "sss_create_internal_fqname failed");
-    fail_if(realname == NULL, "sss_create_internal_fqname failed");
+    sss_ck_fail_if_msg(fq_alias == NULL, "sss_create_internal_fqname failed");
+    sss_ck_fail_if_msg(realname == NULL, "sss_create_internal_fqname failed");
 
     user_attrs = sysdb_new_attrs(test_ctx);
-    fail_unless(user_attrs != NULL, "sysdb_new_attrs failed");
+    ck_assert_msg(user_attrs != NULL, "sysdb_new_attrs failed");
 
     ret = sysdb_attrs_add_string(user_attrs, SYSDB_NAME_ALIAS, fq_alias);
-    fail_unless(ret == EOK, "sysdb_attrs_add_string failed.");
+    ck_assert_msg(ret == EOK, "sysdb_attrs_add_string failed.");
 
     ret = sysdb_attrs_add_string(user_attrs, SYSDB_UPN, "foo@bar");
-    fail_unless(ret == EOK, "sysdb_attrs_add_string failed.");
+    ck_assert_msg(ret == EOK, "sysdb_attrs_add_string failed.");
 
     ret = sysdb_attrs_add_string(user_attrs, SYSDB_SID_STR,
                                  "S-1-5-21-123-456-789-111");
-    fail_unless(ret == EOK, "sysdb_attrs_add_string failed.");
+    ck_assert_msg(ret == EOK, "sysdb_attrs_add_string failed.");
 
     ret = sysdb_attrs_add_string(user_attrs, SYSDB_UUID,
                                  "12345678-9012-3456-7890-123456789012");
-    fail_unless(ret == EOK, "sysdb_attrs_add_string failed.");
+    ck_assert_msg(ret == EOK, "sysdb_attrs_add_string failed.");
 
     ret = sysdb_store_user(test_ctx->domain, realname,
                            NULL, 22345, 0, "gecos",
                            "/home/realname", "/bin/bash",
                            NULL, user_attrs, NULL, -1, 0);
-    fail_unless(ret == EOK, "sysdb_store_user failed.");
+    ck_assert_msg(ret == EOK, "sysdb_store_user failed.");
 
     /* Get real, uncanonicalized name as string */
     ret = sysdb_get_real_name(test_ctx, test_ctx->domain, fq_alias, &str);
-    fail_unless(ret == EOK, "sysdb_get_real_name failed.");
-    fail_unless(strcmp(str, realname) == 0, "Expected [%s], got [%s].",
+    ck_assert_msg(ret == EOK, "sysdb_get_real_name failed.");
+    ck_assert_msg(strcmp(str, realname) == 0, "Expected [%s], got [%s].",
                                               realname, str);
 
     ret = sysdb_get_real_name(test_ctx, test_ctx->domain, "foo@bar", &str);
-    fail_unless(ret == EOK, "sysdb_get_real_name failed.");
-    fail_unless(strcmp(str, realname) == 0, "Expected [%s], got [%s].",
+    ck_assert_msg(ret == EOK, "sysdb_get_real_name failed.");
+    ck_assert_msg(strcmp(str, realname) == 0, "Expected [%s], got [%s].",
                                               realname, str);
 
     ret = sysdb_get_real_name(test_ctx, test_ctx->domain,
                               "S-1-5-21-123-456-789-111", &str);
-    fail_unless(ret == EOK, "sysdb_get_real_name failed.");
-    fail_unless(strcmp(str, realname) == 0, "Expected [%s], got [%s].",
+    ck_assert_msg(ret == EOK, "sysdb_get_real_name failed.");
+    ck_assert_msg(strcmp(str, realname) == 0, "Expected [%s], got [%s].",
                                               realname, str);
 
     ret = sysdb_get_real_name(test_ctx, test_ctx->domain,
                               "12345678-9012-3456-7890-123456789012", &str);
-    fail_unless(ret == EOK, "sysdb_get_real_name failed.");
-    fail_unless(strcmp(str, realname) == 0, "Expected [%s], got [%s].",
+    ck_assert_msg(ret == EOK, "sysdb_get_real_name failed.");
+    ck_assert_msg(strcmp(str, realname) == 0, "Expected [%s], got [%s].",
                                               realname, str);
 }
 END_TEST
@@ -3921,64 +3921,64 @@
 
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
-    fail_unless(ret == EOK, "Could not set up the test");
+    ck_assert_msg(ret == EOK, "Could not set up the test");
 
     fromname = sss_create_internal_fqname(test_ctx, "fromgroup",
                                           test_ctx->domain->name);
-    fail_if(fromname == NULL, "sss_create_internal_fqname failed");
+    sss_ck_fail_if_msg(fromname == NULL, "sss_create_internal_fqname failed");
     toname = sss_create_internal_fqname(test_ctx, "togroup",
                                         test_ctx->domain->name);
-    fail_if(toname == NULL, "sss_create_internal_fqname failed");
+    sss_ck_fail_if_msg(toname == NULL, "sss_create_internal_fqname failed");
 
     /* Store and verify the first group */
     ret = sysdb_store_group(test_ctx->domain,
                             fromname, grgid, NULL, 0, 0);
-    fail_unless(ret == EOK, "Could not add first group");
+    ck_assert_msg(ret == EOK, "Could not add first group");
 
     ret = sysdb_getgrnam(test_ctx, test_ctx->domain, fromname, &res);
-    fail_unless(ret == EOK, "Could not retrieve the group from cache\n");
+    ck_assert_msg(ret == EOK, "Could not retrieve the group from cache\n");
     if (res->count != 1) {
-        fail("Invalid number of replies. Expected 1, got %d", res->count);
+        ck_abort_msg("Invalid number of replies. Expected 1, got %d", res->count);
         goto done;
     }
 
     gid = ldb_msg_find_attr_as_uint(res->msgs[0], SYSDB_GIDNUM, 0);
-    fail_unless(gid == grgid,
+    ck_assert_msg(gid == grgid,
                 "Did not find the expected GID (found %llu expected %llu)",
                 (unsigned long long) gid, (unsigned long long) grgid);
     name = ldb_msg_find_attr_as_string(res->msgs[0], SYSDB_NAME, NULL);
-    fail_unless(strcmp(fromname, name) == 0,
+    ck_assert_msg(strcmp(fromname, name) == 0,
                 "Did not find the expected name (found %s expected %s)",
                 name, fromname);
 
     /* Perform rename and check that GID is the same, but name changed */
     ret = sysdb_add_group(test_ctx->domain, toname, grgid, NULL, 0, 0);
-    fail_unless(ret == EEXIST, "Group renamed with a low level call?");
+    ck_assert_msg(ret == EEXIST, "Group renamed with a low level call?");
 
     ret = sysdb_store_group(test_ctx->domain,
                             toname, grgid, NULL, 0, 0);
-    fail_unless(ret == EOK, "Could not add first group");
+    ck_assert_msg(ret == EOK, "Could not add first group");
 
     ret = sysdb_getgrnam(test_ctx, test_ctx->domain, toname, &res);
-    fail_unless(ret == EOK, "Could not retrieve the group from cache\n");
+    ck_assert_msg(ret == EOK, "Could not retrieve the group from cache\n");
     if (res->count != 1) {
-        fail("Invalid number of replies. Expected 1, got %d", res->count);
+        ck_abort_msg("Invalid number of replies. Expected 1, got %d", res->count);
         goto done;
     }
 
     gid = ldb_msg_find_attr_as_uint(res->msgs[0], SYSDB_GIDNUM, 0);
-    fail_unless(gid == grgid,
+    ck_assert_msg(gid == grgid,
                 "Did not find the expected GID (found %llu expected %llu)",
                 (unsigned long long) gid, (unsigned long long) grgid);
     name = ldb_msg_find_attr_as_string(res->msgs[0], SYSDB_NAME, NULL);
-    fail_unless(strcmp(toname, name) == 0,
+    ck_assert_msg(strcmp(toname, name) == 0,
                 "Did not find the expected GID (found %s expected %s)",
                 name, toname);
 
     /* Verify the first name is gone */
     ret = sysdb_getgrnam(test_ctx, test_ctx->domain, fromname, &res);
-    fail_unless(ret == EOK, "Could not retrieve the group from cache\n");
-    fail_unless(res->count == 0, "Unexpectedly found the original user\n");
+    ck_assert_msg(ret == EOK, "Could not retrieve the group from cache\n");
+    ck_assert_msg(res->count == 0, "Unexpectedly found the original user\n");
 
 done:
     talloc_free(test_ctx);
@@ -3998,66 +3998,66 @@
 
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
-    fail_unless(ret == EOK, "Could not set up the test");
+    ck_assert_msg(ret == EOK, "Could not set up the test");
 
     fromname = sss_create_internal_fqname(test_ctx, "fromname", test_ctx->domain->name);
     toname = sss_create_internal_fqname(test_ctx, "toname", test_ctx->domain->name);
-    fail_if(fromname == NULL, "sss_create_internal_fqname failed");
-    fail_if(toname == NULL, "sss_create_internal_fqname failed");
+    sss_ck_fail_if_msg(fromname == NULL, "sss_create_internal_fqname failed");
+    sss_ck_fail_if_msg(toname == NULL, "sss_create_internal_fqname failed");
 
     /* Store and verify the first user */
     ret = sysdb_store_user(test_ctx->domain,
                            fromname, NULL, userid, 0,
                            fromname, "/", "/bin/sh",
                            NULL, NULL, NULL, 0, 0);
-    fail_unless(ret == EOK, "Could not add first user");
+    ck_assert_msg(ret == EOK, "Could not add first user");
 
     ret = sysdb_getpwnam(test_ctx, test_ctx->domain, fromname, &res);
-    fail_unless(ret == EOK, "Could not retrieve the user from cache\n");
+    ck_assert_msg(ret == EOK, "Could not retrieve the user from cache\n");
     if (res->count != 1) {
-        fail("Invalid number of replies. Expected 1, got %d", res->count);
+        ck_abort_msg("Invalid number of replies. Expected 1, got %d", res->count);
         goto done;
     }
 
     uid = ldb_msg_find_attr_as_uint(res->msgs[0], SYSDB_UIDNUM, 0);
-    fail_unless(uid == userid,
+    ck_assert_msg(uid == userid,
                 "Did not find the expected UID (found %llu expected %llu)",
                 (unsigned long long) uid, (unsigned long long) userid);
     name = ldb_msg_find_attr_as_string(res->msgs[0], SYSDB_NAME, NULL);
-    fail_unless(strcmp(fromname, name) == 0,
+    ck_assert_msg(strcmp(fromname, name) == 0,
                 "Did not find the expected name (found %s expected %s)",
                 name, fromname);
 
     /* Perform rename and check that GID is the same, but name changed */
     ret = sysdb_add_user(test_ctx->domain, toname, userid, 0,
                          fromname, "/", "/bin/sh", NULL, NULL, 0, 0);
-    fail_unless(ret == EEXIST, "A second user added with low level call?");
+    ck_assert_msg(ret == EEXIST, "A second user added with low level call?");
 
     ret = sysdb_store_user(test_ctx->domain, toname, NULL,
                            userid, 0, fromname, "/", "/bin/sh",
                            NULL, NULL, NULL, 0, 0);
-    fail_unless(ret == EOK, "Could not add second user");
+    ck_assert_msg(ret == EOK, "Could not add second user");
 
     ret = sysdb_getpwnam(test_ctx, test_ctx->domain, toname, &res);
-    fail_unless(ret == EOK, "Could not retrieve the user from cache\n");
+    ck_assert_msg(ret == EOK, "Could not retrieve the user from cache\n");
     if (res->count != 1) {
-        fail("Invalid number of replies. Expected 1, got %d", res->count);
+        ck_abort_msg("Invalid number of replies. Expected 1, got %d", res->count);
         goto done;
     }
 
     uid = ldb_msg_find_attr_as_uint(res->msgs[0], SYSDB_UIDNUM, 0);
-    fail_unless(uid == userid,
+    ck_assert_msg(uid == userid,
                 "Did not find the expected UID (found %llu expected %llu)",
                 (unsigned long long) uid, (unsigned long long) userid);
     name = ldb_msg_find_attr_as_string(res->msgs[0], SYSDB_NAME, NULL);
-    fail_unless(strcmp(toname, name) == 0,
+    ck_assert_msg(strcmp(toname, name) == 0,
                 "Did not find the expected name (found %s expected %s)",
                 name, fromname);
 
     /* Verify the first name is gone */
     ret = sysdb_getpwnam(test_ctx, test_ctx->domain, fromname, &res);
-    fail_unless(ret == EOK, "Could not retrieve the user from cache\n");
-    fail_unless(res->count == 0, "Unexpectedly found the original user\n");
+    ck_assert_msg(ret == EOK, "Could not retrieve the user from cache\n");
+    ck_assert_msg(res->count == 0, "Unexpectedly found the original user\n");
 
 done:
     talloc_free(test_ctx);
@@ -4078,11 +4078,11 @@
 
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
-    fail_unless(ret == EOK, "Could not set up the test");
+    ck_assert_msg(ret == EOK, "Could not set up the test");
 
     user_fqname = sss_create_internal_fqname(test_ctx, user,
                                              test_ctx->domain->name);
-    fail_if(user_fqname == NULL, "user_fqname returned NULL");
+    sss_ck_fail_if_msg(user_fqname == NULL, "user_fqname returned NULL");
 
     ret = sysdb_initgroups(test_ctx, test_ctx->domain, user_fqname, &res);
     fail_if(ret != EOK);
@@ -4105,7 +4105,7 @@
     ret = sysdb_update_members(test_ctx->domain, user_fqname,
                                SYSDB_MEMBER_USER,
                                (const char *const *)add_groups, NULL);
-    fail_unless(ret == EOK, "Could not add groups");
+    ck_assert_msg(ret == EOK, "Could not add groups");
 
     ret = sysdb_initgroups(test_ctx, test_ctx->domain, user_fqname, &res);
     fail_if(ret != EOK);
@@ -4131,7 +4131,7 @@
     ret = sysdb_update_members(test_ctx->domain, user_fqname, SYSDB_MEMBER_USER,
                                (const char *const *)add_groups,
                                (const char *const *)del_groups);
-    fail_unless(ret == EOK, "Group replace failed");
+    ck_assert_msg(ret == EOK, "Group replace failed");
 
     ret = sysdb_initgroups(test_ctx, test_ctx->domain, user_fqname, &res);
     fail_if(ret != EOK);
@@ -4159,7 +4159,7 @@
 
     ret = sysdb_update_members(test_ctx->domain, user_fqname, SYSDB_MEMBER_USER,
                                NULL, (const char *const *)del_groups);
-    fail_unless(ret == EOK, "Could not remove groups");
+    ck_assert_msg(ret == EOK, "Could not remove groups");
 
     ret = sysdb_initgroups(test_ctx, test_ctx->domain, user_fqname, &res);
     fail_if(ret != EOK);
@@ -4181,7 +4181,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -4189,13 +4189,13 @@
     fail_if(data == NULL);
 
     group_dn = sysdb_group_dn(test_ctx, test_ctx->domain, data->groupname);
-    fail_if(group_dn == NULL, "OOM");
+    sss_ck_fail_if_msg(group_dn == NULL, "OOM");
 
     ret = sysdb_group_dn_name(test_ctx->sysdb, test_ctx,
                               ldb_dn_get_linearized(group_dn), &parsed);
-    fail_if(ret != EOK, "Cannot get the group name from DN");
+    sss_ck_fail_if_msg(ret != EOK, "Cannot get the group name from DN");
 
-    fail_if(strcmp(data->groupname, parsed) != 0,
+    sss_ck_fail_if_msg(strcmp(data->groupname, parsed) != 0,
             "Names don't match (got %s)", parsed);
     talloc_free(test_ctx);
 }
@@ -4210,7 +4210,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -4221,7 +4221,7 @@
 
     ret = test_add_basic_netgroup(data);
 
-    fail_if(ret != EOK, "Could not add netgroup %s", data->netgrname);
+    sss_ck_fail_if_msg(ret != EOK, "Could not add netgroup %s", data->netgrname);
     talloc_free(test_ctx);
 }
 END_TEST
@@ -4237,7 +4237,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -4245,11 +4245,11 @@
 
     ret = sysdb_search_netgroup_by_name(test_ctx, test_ctx->domain,
                                         netgrname, NULL, &msg);
-    fail_if(ret != EOK, "Could not find netgroup with name %s", netgrname);
+    sss_ck_fail_if_msg(ret != EOK, "Could not find netgroup with name %s", netgrname);
 
     netgroup_dn = sysdb_netgroup_dn(test_ctx, test_ctx->domain, netgrname);
     fail_if(netgroup_dn == NULL);
-    fail_if(ldb_dn_compare(msg->dn, netgroup_dn) != 0, "Found wrong netgroup!\n");
+    sss_ck_fail_if_msg(ldb_dn_compare(msg->dn, netgroup_dn) != 0, "Found wrong netgroup!\n");
     talloc_free(test_ctx);
 }
 END_TEST
@@ -4263,7 +4263,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -4273,7 +4273,7 @@
 
     ret = test_remove_netgroup_entry(data);
 
-    fail_if(ret != EOK, "Could not remove netgroup %s", data->netgrname);
+    sss_ck_fail_if_msg(ret != EOK, "Could not remove netgroup %s", data->netgrname);
     talloc_free(test_ctx);
 }
 END_TEST
@@ -4287,7 +4287,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -4297,7 +4297,7 @@
 
     ret = test_remove_netgroup_by_name(data);
 
-    fail_if(ret != EOK, "Could not remove netgroup with name %s", data->netgrname);
+    sss_ck_fail_if_msg(ret != EOK, "Could not remove netgroup with name %s", data->netgrname);
     talloc_free(test_ctx);
 }
 END_TEST
@@ -4311,7 +4311,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -4322,7 +4322,7 @@
 
     ret = test_set_netgroup_attr(data);
 
-    fail_if(ret != EOK, "Could not set netgroup attribute %s", data->netgrname);
+    sss_ck_fail_if_msg(ret != EOK, "Could not set netgroup attribute %s", data->netgrname);
     talloc_free(test_ctx);
 }
 END_TEST
@@ -4340,7 +4340,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -4350,12 +4350,12 @@
     ret = sysdb_get_netgroup_attr(test_ctx, test_ctx->domain, netgrname,
                                   attrs, &res);
 
-    fail_if(ret != EOK, "Could not get netgroup attributes");
-    fail_if(res->count != 1,
+    sss_ck_fail_if_msg(ret != EOK, "Could not get netgroup attributes");
+    sss_ck_fail_if_msg(res->count != 1,
             "Invalid number of entries, expected 1, got %d", res->count);
 
     attrval = ldb_msg_find_attr_as_string(res->msgs[0], SYSDB_DESCRIPTION, 0);
-    fail_if(strcmp(attrval, description),
+    sss_ck_fail_if_msg(strcmp(attrval, description),
             "Got bad attribute value for netgroup %s", netgrname);
     talloc_free(test_ctx);
 }
@@ -4369,15 +4369,15 @@
     const char *strdn;
 
     ret = setup_sysdb_tests(&test_ctx);
-    fail_if(ret != EOK, "Could not set up the test");
+    sss_ck_fail_if_msg(ret != EOK, "Could not set up the test");
 
     base_dn = sysdb_netgroup_base_dn(test_ctx, test_ctx->domain);
-    fail_if(base_dn == NULL, "Could not get netgroup base DN");
+    sss_ck_fail_if_msg(base_dn == NULL, "Could not get netgroup base DN");
 
     strdn = ldb_dn_get_linearized(base_dn);
-    fail_if(strdn == NULL, "Could not get string netgroup base DN");
+    sss_ck_fail_if_msg(strdn == NULL, "Could not get string netgroup base DN");
 
-    fail_if(strstr(strdn, SYSDB_NETGROUP_CONTAINER) != strdn,
+    sss_ck_fail_if_msg(strstr(strdn, SYSDB_NETGROUP_CONTAINER) != strdn,
             "Malformed netgroup baseDN");
 }
 END_TEST
@@ -4402,7 +4402,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -4411,31 +4411,31 @@
                                                test_ctx->domain->name);
     odd_username = sss_create_internal_fqname(test_ctx, "*(odd)\\user,name",
                                               test_ctx->domain->name);
-    fail_if(odd_groupname == NULL, "sss_create_internal_fqname failed");
-    fail_if(odd_username == NULL, "sss_create_internal_fqname failed");
+    sss_ck_fail_if_msg(odd_groupname == NULL, "sss_create_internal_fqname failed");
+    sss_ck_fail_if_msg(odd_username == NULL, "sss_create_internal_fqname failed");
 
     /* ===== Groups ===== */
 
     /* Add */
     ret = sysdb_add_incomplete_group(test_ctx->domain, odd_groupname,
                                      20000, NULL, NULL, NULL, true, 0);
-    fail_unless(ret == EOK, "sysdb_add_incomplete_group error [%d][%s]",
+    ck_assert_msg(ret == EOK, "sysdb_add_incomplete_group error [%d][%s]",
                             ret, strerror(ret));
 
     /* Retrieve */
     ret = sysdb_search_group_by_name(test_ctx, test_ctx->domain,
                                      odd_groupname, NULL, &msg);
-    fail_unless(ret == EOK, "sysdb_search_group_by_name error [%d][%s]",
+    ck_assert_msg(ret == EOK, "sysdb_search_group_by_name error [%d][%s]",
                             ret, strerror(ret));
     talloc_zfree(msg);
 
     ret = sysdb_getgrnam(test_ctx, test_ctx->domain, odd_groupname, &res);
-    fail_unless(ret == EOK, "sysdb_getgrnam error [%d][%s]",
+    ck_assert_msg(ret == EOK, "sysdb_getgrnam error [%d][%s]",
                             ret, strerror(ret));
-    fail_unless(res->count == 1, "Received [%d] responses",
+    ck_assert_msg(res->count == 1, "Received [%d] responses",
                                  res->count);
     received_group = ldb_msg_find_attr_as_string(res->msgs[0], SYSDB_NAME, NULL);
-    fail_unless(strcmp(received_group, odd_groupname) == 0,
+    ck_assert_msg(strcmp(received_group, odd_groupname) == 0,
                 "Expected [%s], got [%s]",
                 odd_groupname, received_group);
     talloc_free(res);
@@ -4448,17 +4448,17 @@
                                odd_username,
                                10000, 10000,
                                "","","");
-    fail_unless(ret == EOK, "sysdb_add_basic_user error [%d][%s]",
+    ck_assert_msg(ret == EOK, "sysdb_add_basic_user error [%d][%s]",
                             ret, strerror(ret));
 
     /* Retrieve */
     ret = sysdb_search_user_by_name(test_ctx,
                                     test_ctx->domain,
                                     odd_username, NULL, &msg);
-    fail_unless(ret == EOK, "sysdb_search_user_by_name error [%d][%s]",
+    ck_assert_msg(ret == EOK, "sysdb_search_user_by_name error [%d][%s]",
                             ret, strerror(ret));
     val = ldb_dn_get_component_val(msg->dn, 0);
-    fail_unless(strcmp((char *)val->data, odd_username)==0,
+    ck_assert_msg(strcmp((char *)val->data, odd_username)==0,
                 "Expected [%s] got [%s]\n",
                 odd_username, (char *)val->data);
     talloc_zfree(msg);
@@ -4467,16 +4467,16 @@
     ret = sysdb_add_group_member(test_ctx->domain,
                                  odd_groupname, odd_username,
                                  SYSDB_MEMBER_USER, false);
-    fail_unless(ret == EOK, "sysdb_add_group_member error [%d][%s]",
+    ck_assert_msg(ret == EOK, "sysdb_add_group_member error [%d][%s]",
                             ret, strerror(ret));
 
     ret = sysdb_getpwnam(test_ctx, test_ctx->domain, odd_username, &res);
-    fail_unless(ret == EOK, "sysdb_getpwnam error [%d][%s]",
+    ck_assert_msg(ret == EOK, "sysdb_getpwnam error [%d][%s]",
                             ret, strerror(ret));
-    fail_unless(res->count == 1, "Received [%d] responses",
+    ck_assert_msg(res->count == 1, "Received [%d] responses",
                                  res->count);
     received_user = ldb_msg_find_attr_as_string(res->msgs[0], SYSDB_NAME, NULL);
-    fail_unless(strcmp(received_user, odd_username) == 0,
+    ck_assert_msg(strcmp(received_user, odd_username) == 0,
                 "Expected [%s], got [%s]",
                 odd_username, received_user);
     talloc_zfree(res);
@@ -4484,23 +4484,23 @@
     /* Attributes */
     ret = sysdb_get_user_attr(test_ctx, test_ctx->domain, odd_username,
                               user_attrs, &res);
-    fail_unless(ret == EOK, "sysdb_get_user_attr error [%d][%s]",
+    ck_assert_msg(ret == EOK, "sysdb_get_user_attr error [%d][%s]",
                             ret, strerror(ret));
     talloc_free(res);
 
     /* Delete User */
     ret = sysdb_delete_user(test_ctx->domain, odd_username, 10000);
-    fail_unless(ret == EOK, "sysdb_delete_user error [%d][%s]",
+    ck_assert_msg(ret == EOK, "sysdb_delete_user error [%d][%s]",
                             ret, strerror(ret));
 
     /* Delete non existing User */
     ret = sysdb_delete_user(test_ctx->domain, odd_username, 10000);
-    fail_unless(ret == ENOENT, "sysdb_delete_user error [%d][%s]",
+    ck_assert_msg(ret == ENOENT, "sysdb_delete_user error [%d][%s]",
                                ret, strerror(ret));
 
     /* Delete Group */
     ret = sysdb_delete_group(test_ctx->domain, odd_groupname, 20000);
-    fail_unless(ret == EOK, "sysdb_delete_group error [%d][%s]",
+    ck_assert_msg(ret == EOK, "sysdb_delete_group error [%d][%s]",
                             ret, strerror(ret));
 
     /* Add */
@@ -4510,12 +4510,12 @@
                          "","","",
                          odd_username_orig_dn,
                          NULL, 5400, 0);
-    fail_unless(ret == EOK, "sysdb_add_user error [%d][%s]",
+    ck_assert_msg(ret == EOK, "sysdb_add_user error [%d][%s]",
                             ret, strerror(ret));
 
     /* Delete User */
     ret = sysdb_delete_user(test_ctx->domain, odd_username, 10000);
-    fail_unless(ret == EOK, "sysdb_delete_user error [%d][%s]",
+    ck_assert_msg(ret == EOK, "sysdb_delete_user error [%d][%s]",
                             ret, strerror(ret));
 
     /* ===== Netgroups ===== */
@@ -4523,22 +4523,22 @@
     ret = sysdb_add_netgroup(test_ctx->domain,
                              odd_netgroupname, "No description",
                              NULL, NULL, 30, 0);
-    fail_unless(ret == EOK, "sysdb_add_netgroup error [%d][%s]",
+    ck_assert_msg(ret == EOK, "sysdb_add_netgroup error [%d][%s]",
                             ret, strerror(ret));
 
     /* Retrieve */
     ret = sysdb_getnetgr(test_ctx, test_ctx->domain, odd_netgroupname, &res);
-    fail_unless(ret == EOK, "sysdb_getnetgr error [%d][%s]",
+    ck_assert_msg(ret == EOK, "sysdb_getnetgr error [%d][%s]",
                             ret, strerror(ret));
-    fail_unless(res->count == 1, "Received [%d] responses",
+    ck_assert_msg(res->count == 1, "Received [%d] responses",
                                  res->count);
     talloc_zfree(res);
 
     ret = sysdb_get_netgroup_attr(test_ctx, test_ctx->domain,
                                   odd_netgroupname, netgr_attrs, &res);
-    fail_unless(ret == EOK, "sysdb_get_netgroup_attr error [%d][%s]",
+    ck_assert_msg(ret == EOK, "sysdb_get_netgroup_attr error [%d][%s]",
                             ret, strerror(ret));
-    fail_unless(res->count == 1, "Received [%d] responses",
+    ck_assert_msg(res->count == 1, "Received [%d] responses",
                                  res->count);
     talloc_zfree(res);
 
@@ -4561,7 +4561,7 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
@@ -4575,16 +4575,16 @@
     fail_if(groupname_neg == NULL);
 
     group_dn = sysdb_group_dn(test_ctx, test_ctx->domain, groupname);
-    fail_if(group_dn == NULL, "sysdb_group_dn failed");
+    sss_ck_fail_if_msg(group_dn == NULL, "sysdb_group_dn failed");
 
     nonexist_dn = sysdb_group_dn(test_ctx, test_ctx->domain,
                                  groupname_neg);
-    fail_if(nonexist_dn == NULL, "sysdb_group_dn failed");
+    sss_ck_fail_if_msg(nonexist_dn == NULL, "sysdb_group_dn failed");
 
     /* Add */
     ret = sysdb_add_incomplete_group(test_ctx->domain, groupname,
                                      20000, NULL, NULL, NULL, true, 0);
-    fail_unless(ret == EOK, "sysdb_add_incomplete_group error [%d][%s]",
+    ck_assert_msg(ret == EOK, "sysdb_add_incomplete_group error [%d][%s]",
                 ret, strerror(ret));
 
     /* Retrieve */
@@ -4593,15 +4593,15 @@
     SSS_LDB_SEARCH(ret, test_ctx->sysdb->ldb, test_ctx, &res, group_dn,
                    LDB_SCOPE_BASE, NULL, NULL);
 
-    fail_unless(ret == EOK, "SSS_LDB_SEARCH error [%d][%s]",
+    ck_assert_msg(ret == EOK, "SSS_LDB_SEARCH error [%d][%s]",
                 ret, strerror(ret));
 
-    fail_unless(res->count == 1, "Received [%d] responses",
+    ck_assert_msg(res->count == 1, "Received [%d] responses",
                                  res->count);
 
     received_group = ldb_msg_find_attr_as_string(res->msgs[0], SYSDB_NAME,
                                                  NULL);
-    fail_unless(strcmp(received_group, groupname) == 0,
+    ck_assert_msg(strcmp(received_group, groupname) == 0,
                 "Expected [%s], got [%s]", groupname, received_group);
 
     talloc_zfree(res);
@@ -4610,7 +4610,7 @@
     SSS_LDB_SEARCH(ret, test_ctx->sysdb->ldb, test_ctx, &res, group_dn,
                    LDB_SCOPE_BASE, NULL, SYSDB_GC);
 
-    fail_unless(ret == EOK, "SSS_LDB_SEARCH error [%d][%s]",
+    ck_assert_msg(ret == EOK, "SSS_LDB_SEARCH error [%d][%s]",
                 ret, strerror(ret));
     talloc_zfree(res);
 
@@ -4619,7 +4619,7 @@
                    LDB_SCOPE_BASE, NULL,
                    "objectClass=nonExistingObjectClass");
 
-    fail_unless(ret == ENOENT, "sss_ldb_search error [%d][%s]",
+    ck_assert_msg(ret == ENOENT, "sss_ldb_search error [%d][%s]",
                 ret, strerror(ret));
     talloc_zfree(res);
 
@@ -4627,7 +4627,7 @@
     SSS_LDB_SEARCH(ret, test_ctx->sysdb->ldb, test_ctx, &res, nonexist_dn,
                    LDB_SCOPE_BASE, NULL, NULL);
 
-    fail_unless(ret == ENOENT, "SSS_LDB_SEARCH error [%d][%s]",
+    ck_assert_msg(ret == ENOENT, "SSS_LDB_SEARCH error [%d][%s]",
                 ret, strerror(ret));
     talloc_zfree(res);
 
@@ -4635,7 +4635,7 @@
     talloc_zfree(group_dn);
     talloc_zfree(groupname);
     talloc_zfree(groupname_neg);
-    fail_unless(check_leaks_pop(test_ctx) == true, "Memory leak");
+    ck_assert_msg(check_leaks_pop(test_ctx) == true, "Memory leak");
 }
 END_TEST
 
@@ -4660,23 +4660,23 @@
         /* Look up the service by name */
         ret = sysdb_getservbyname(test_ctx, test_ctx->domain, primary_name,
                                   NULL, &res);
-        fail_if(ret != EOK, "sysdb_getservbyname error [%s]\n",
+        sss_ck_fail_if_msg(ret != EOK, "sysdb_getservbyname error [%s]\n",
                              strerror(ret));
     } else {
         /* Look up the newly-added service by port */
         ret = sysdb_getservbyport(test_ctx, test_ctx->domain, port, NULL,
                                   &res);
-        fail_if(ret != EOK, "sysdb_getservbyport error [%s]\n",
+        sss_ck_fail_if_msg(ret != EOK, "sysdb_getservbyport error [%s]\n",
                              strerror(ret));
     }
-    fail_if(res == NULL, "ENOMEM");
+    sss_ck_fail_if_msg(res == NULL, "ENOMEM");
     fail_if(res->count != 1);
 
     /* Make sure the returned entry matches */
     msg = res->msgs[0];
     ret_name = ldb_msg_find_attr_as_string(msg, SYSDB_NAME, NULL);
     fail_if(ret_name == NULL);
-    fail_unless(strcmp(ret_name, primary_name) == 0);
+    ck_assert(strcmp(ret_name, primary_name) == 0);
 
     ret_port = ldb_msg_find_attr_as_int(msg, SYSDB_SVC_PORT, 0);
     fail_if (ret_port != port);
@@ -4689,7 +4689,7 @@
                 matched = true;
             }
         }
-        fail_if(!matched, "Unexpected value in LDB entry: [%s]",
+        sss_ck_fail_if_msg(!matched, "Unexpected value in LDB entry: [%s]",
                 (const char *)el->values[i].data);
     }
 
@@ -4701,7 +4701,7 @@
                 matched = true;
             }
         }
-        fail_if(!matched, "Unexpected value in LDB entry: [%s]",
+        sss_ck_fail_if_msg(!matched, "Unexpected value in LDB entry: [%s]",
                 (const char *)el->values[i].data);
     }
 }
@@ -4727,7 +4727,7 @@
 
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
-    fail_if(ret != EOK, "Could not set up the test");
+    sss_ck_fail_if_msg(ret != EOK, "Could not set up the test");
 
     primary_name = talloc_asprintf(test_ctx, "test_service");
     fail_if(primary_name == NULL);
@@ -4755,13 +4755,13 @@
     protocols[2] = NULL;
 
     ret = sysdb_transaction_start(test_ctx->sysdb);
-    fail_if(ret != EOK, "[%s]", strerror(ret));
+    sss_ck_fail_if_msg(ret != EOK, "[%s]", strerror(ret));
 
     ret = sysdb_svc_add(NULL, test_ctx->domain,
                         primary_name, port,
                         aliases, protocols,
                         NULL);
-    fail_unless(ret == EOK, "sysdb_svc_add error [%s]\n", strerror(ret));
+    ck_assert_msg(ret == EOK, "sysdb_svc_add error [%s]\n", strerror(ret));
 
     /* Search by name and make sure the results match */
     services_check_match_name(test_ctx,
@@ -4774,7 +4774,7 @@
                               aliases, protocols);
 
     ret = sysdb_transaction_commit(test_ctx->sysdb);
-    fail_if(ret != EOK, "[%s]", strerror(ret));
+    sss_ck_fail_if_msg(ret != EOK, "[%s]", strerror(ret));
 
     /* Clean up after ourselves (and test deleting by name)
      *
@@ -4783,7 +4783,7 @@
      * single transaction.
      */
     ret = sysdb_svc_delete(test_ctx->domain, primary_name, 0, NULL);
-    fail_if(ret != EOK, "[%s]", strerror(ret));
+    sss_ck_fail_if_msg(ret != EOK, "[%s]", strerror(ret));
 
     talloc_free(test_ctx);
 }
@@ -4802,7 +4802,7 @@
 
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
-    fail_if(ret != EOK, "Could not set up the test");
+    sss_ck_fail_if_msg(ret != EOK, "Could not set up the test");
 
     aliases = talloc_array(test_ctx, const char *, 3);
     fail_if(aliases == NULL);
@@ -4827,14 +4827,14 @@
     protocols[2] = NULL;
 
     ret = sysdb_transaction_start(test_ctx->sysdb);
-    fail_if(ret != EOK, "[%s]", strerror(ret));
+    sss_ck_fail_if_msg(ret != EOK, "[%s]", strerror(ret));
 
     /* Store this group (which will add it) */
     ret = sysdb_store_service(test_ctx->domain,
                               primary_name, port,
                               aliases, protocols,
                               NULL, NULL, 1, 1);
-    fail_if(ret != EOK, "[%s]", strerror(ret));
+    sss_ck_fail_if_msg(ret != EOK, "[%s]", strerror(ret));
 
     /* Search by name and make sure the results match */
     services_check_match_name(test_ctx,
@@ -4851,7 +4851,7 @@
                               alt_primary_name, port,
                               aliases, protocols,
                               NULL, NULL, 1, 1);
-    fail_if (ret != EOK, "[%s]", strerror(ret));
+   sss_ck_fail_if_msg(ret != EOK, "[%s]", strerror(ret));
 
     services_check_match_name(test_ctx,
                               alt_primary_name, port,
@@ -4868,14 +4868,14 @@
                               primary_name, port,
                               aliases, protocols,
                               NULL, NULL, 1, 1);
-    fail_if (ret != EOK, "[%s]", strerror(ret));
+    sss_ck_fail_if_msg(ret != EOK, "[%s]", strerror(ret));
 
     /* Change the port number */
     ret = sysdb_store_service(test_ctx->domain,
                               primary_name, altport,
                               aliases, protocols,
                               NULL, NULL, 1, 1);
-    fail_if (ret != EOK, "[%s]", strerror(ret));
+    sss_ck_fail_if_msg(ret != EOK, "[%s]", strerror(ret));
 
     /* Search by name and make sure the results match */
     services_check_match_name(test_ctx,
@@ -4890,7 +4890,7 @@
     /* TODO: Test changing aliases and protocols */
 
     ret = sysdb_transaction_commit(test_ctx->sysdb);
-    fail_if(ret != EOK, "[%s]", strerror(ret));
+    sss_ck_fail_if_msg(ret != EOK, "[%s]", strerror(ret));
 
     /* Clean up after ourselves (and test deleting by port)
      *
@@ -4899,7 +4899,7 @@
      * single transaction.
      */
     ret = sysdb_svc_delete(test_ctx->domain, NULL, altport, NULL);
-    fail_if(ret != EOK, "[%s]", strerror(ret));
+    sss_ck_fail_if_msg(ret != EOK, "[%s]", strerror(ret));
 
     talloc_free(test_ctx);
 }
@@ -4922,7 +4922,7 @@
 
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
-    fail_if(ret != EOK, "Could not set up the test");
+    sss_ck_fail_if_msg(ret != EOK, "Could not set up the test");
 
     aliases = talloc_array(test_ctx, const char *, 3);
     fail_if(aliases == NULL);
@@ -4947,13 +4947,13 @@
     protocols[2] = NULL;
 
     ret = sysdb_transaction_start(test_ctx->sysdb);
-    fail_if(ret != EOK, "[%s]", strerror(ret));
+    sss_ck_fail_if_msg(ret != EOK, "[%s]", strerror(ret));
 
     ret = sysdb_svc_add(NULL, test_ctx->domain,
                         primary_name, port,
                         aliases, protocols,
                         NULL);
-    fail_unless(ret == EOK, "sysdb_svc_add error [%s]\n", strerror(ret));
+    ck_assert_msg(ret == EOK, "sysdb_svc_add error [%s]\n", strerror(ret));
 
     /* Search by name and make sure the results match */
     services_check_match_name(test_ctx,
@@ -4970,7 +4970,7 @@
     fail_if (dn == NULL);
 
     ret = sysdb_svc_remove_alias(test_ctx->sysdb, dn, aliases[1]);
-    fail_if (ret != EOK, "[%s]", strerror(ret));
+    sss_ck_fail_if_msg(ret != EOK, "[%s]", strerror(ret));
 
     ret = sysdb_transaction_commit(test_ctx->sysdb);
     fail_if(ret != EOK);
@@ -4992,7 +4992,7 @@
                               aliases, protocols);
 
     ret = sysdb_transaction_commit(test_ctx->sysdb);
-    fail_if(ret != EOK, "[%s]", strerror(ret));
+    sss_ck_fail_if_msg(ret != EOK, "[%s]", strerror(ret));
 
     talloc_free(test_ctx);
 }
@@ -5008,17 +5008,17 @@
     const char **list = NULL;
 
     ret = sysdb_attrs_add_lc_name_alias(NULL, NULL);
-    fail_unless(ret == EINVAL, "EINVAL not returned for NULL input");
+    ck_assert_msg(ret == EINVAL, "EINVAL not returned for NULL input");
 
     attrs = sysdb_new_attrs(NULL);
-    fail_unless(attrs != NULL, "sysdb_new_attrs failed");
+    ck_assert_msg(attrs != NULL, "sysdb_new_attrs failed");
 
     ret = sysdb_attrs_add_lc_name_alias(attrs, LC_NAME_ALIAS_TEST_VAL);
-    fail_unless(ret == EOK, "sysdb_attrs_add_lc_name_alias failed");
+    ck_assert_msg(ret == EOK, "sysdb_attrs_add_lc_name_alias failed");
 
     ret = sysdb_attrs_get_string(attrs, SYSDB_NAME_ALIAS, &str);
-    fail_unless(ret == EOK, "sysdb_attrs_get_string failed");
-    fail_unless(strcmp(str, LC_NAME_ALIAS_CHECK_VAL) == 0,
+    ck_assert_msg(ret == EOK, "sysdb_attrs_get_string failed");
+    ck_assert_msg(strcmp(str, LC_NAME_ALIAS_CHECK_VAL) == 0,
                 "Unexpected value, expected [%s], got [%s]",
                 LC_NAME_ALIAS_CHECK_VAL, str);
 
@@ -5026,20 +5026,20 @@
      * purpose but the test should illustrate the different to
      * sysdb_attrs_add_lc_name_alias_safe(). */
     ret = sysdb_attrs_add_lc_name_alias(attrs, LC_NAME_ALIAS_TEST_VAL);
-    fail_unless(ret == EOK, "sysdb_attrs_add_lc_name_alias failed");
+    ck_assert_msg(ret == EOK, "sysdb_attrs_add_lc_name_alias failed");
 
     ret = sysdb_attrs_get_string_array(attrs, SYSDB_NAME_ALIAS, attrs, &list);
-    fail_unless(ret == EOK, "sysdb_attrs_get_string_array failed");
-    fail_unless(list != NULL, "No list returned");
-    fail_unless(list[0] != NULL, "Missing first list element");
-    fail_unless(strcmp(list[0], LC_NAME_ALIAS_CHECK_VAL) == 0,
+    ck_assert_msg(ret == EOK, "sysdb_attrs_get_string_array failed");
+    ck_assert_msg(list != NULL, "No list returned");
+    ck_assert_msg(list[0] != NULL, "Missing first list element");
+    ck_assert_msg(strcmp(list[0], LC_NAME_ALIAS_CHECK_VAL) == 0,
                 "Unexpected value, expected [%s], got [%s]",
                 LC_NAME_ALIAS_CHECK_VAL, list[0]);
-    fail_unless(list[1] != NULL, "Missing second list element");
-    fail_unless(strcmp(list[1], LC_NAME_ALIAS_CHECK_VAL) == 0,
+    ck_assert_msg(list[1] != NULL, "Missing second list element");
+    ck_assert_msg(strcmp(list[1], LC_NAME_ALIAS_CHECK_VAL) == 0,
                 "Unexpected value, expected [%s], got [%s]",
                 LC_NAME_ALIAS_CHECK_VAL, list[1]);
-    fail_unless(list[2] == NULL, "Missing list terminator");
+    ck_assert_msg(list[2] == NULL, "Missing list terminator");
 
     talloc_free(attrs);
 }
@@ -5053,50 +5053,50 @@
     const char **list = NULL;
 
     ret = sysdb_attrs_add_lc_name_alias_safe(NULL, NULL);
-    fail_unless(ret == EINVAL, "EINVAL not returned for NULL input");
+    ck_assert_msg(ret == EINVAL, "EINVAL not returned for NULL input");
 
     attrs = sysdb_new_attrs(NULL);
-    fail_unless(attrs != NULL, "sysdb_new_attrs failed");
+    ck_assert_msg(attrs != NULL, "sysdb_new_attrs failed");
 
     ret = sysdb_attrs_add_lc_name_alias_safe(attrs, LC_NAME_ALIAS_TEST_VAL);
-    fail_unless(ret == EOK, "sysdb_attrs_add_lc_name_alias failed");
+    ck_assert_msg(ret == EOK, "sysdb_attrs_add_lc_name_alias failed");
 
     ret = sysdb_attrs_get_string(attrs, SYSDB_NAME_ALIAS, &str);
-    fail_unless(ret == EOK, "sysdb_attrs_get_string failed");
-    fail_unless(strcmp(str, LC_NAME_ALIAS_CHECK_VAL) == 0,
+    ck_assert_msg(ret == EOK, "sysdb_attrs_get_string failed");
+    ck_assert_msg(strcmp(str, LC_NAME_ALIAS_CHECK_VAL) == 0,
                 "Unexpected value, expected [%s], got [%s]",
                 LC_NAME_ALIAS_CHECK_VAL, str);
 
     /* Adding the same value a second time should be ignored */
     ret = sysdb_attrs_add_lc_name_alias_safe(attrs, LC_NAME_ALIAS_TEST_VAL);
-    fail_unless(ret == EOK, "sysdb_attrs_add_lc_name_alias failed");
+    ck_assert_msg(ret == EOK, "sysdb_attrs_add_lc_name_alias failed");
 
     ret = sysdb_attrs_get_string_array(attrs, SYSDB_NAME_ALIAS, attrs, &list);
-    fail_unless(ret == EOK, "sysdb_attrs_get_string_array failed");
-    fail_unless(list != NULL, "No list returned");
-    fail_unless(list[0] != NULL, "Missing first list element");
-    fail_unless(strcmp(list[0], LC_NAME_ALIAS_CHECK_VAL) == 0,
+    ck_assert_msg(ret == EOK, "sysdb_attrs_get_string_array failed");
+    ck_assert_msg(list != NULL, "No list returned");
+    ck_assert_msg(list[0] != NULL, "Missing first list element");
+    ck_assert_msg(strcmp(list[0], LC_NAME_ALIAS_CHECK_VAL) == 0,
                 "Unexpected value, expected [%s], got [%s]",
                 LC_NAME_ALIAS_CHECK_VAL, list[0]);
-    fail_unless(list[1] == NULL, "Missing list terminator");
+    ck_assert_msg(list[1] == NULL, "Missing list terminator");
 
     /* Adding different value */
     ret = sysdb_attrs_add_lc_name_alias_safe(attrs,
                                              "2nd_" LC_NAME_ALIAS_TEST_VAL);
-    fail_unless(ret == EOK, "sysdb_attrs_add_lc_name_alias failed");
+    ck_assert_msg(ret == EOK, "sysdb_attrs_add_lc_name_alias failed");
 
     ret = sysdb_attrs_get_string_array(attrs, SYSDB_NAME_ALIAS, attrs, &list);
-    fail_unless(ret == EOK, "sysdb_attrs_get_string_array failed");
-    fail_unless(list != NULL, "No list returned");
-    fail_unless(list[0] != NULL, "Missing first list element");
-    fail_unless(strcmp(list[0], LC_NAME_ALIAS_CHECK_VAL) == 0,
+    ck_assert_msg(ret == EOK, "sysdb_attrs_get_string_array failed");
+    ck_assert_msg(list != NULL, "No list returned");
+    ck_assert_msg(list[0] != NULL, "Missing first list element");
+    ck_assert_msg(strcmp(list[0], LC_NAME_ALIAS_CHECK_VAL) == 0,
                 "Unexpected value, expected [%s], got [%s]",
                 LC_NAME_ALIAS_CHECK_VAL, list[0]);
-    fail_unless(list[1] != NULL, "Missing first list element");
-    fail_unless(strcmp(list[1], "2nd_" LC_NAME_ALIAS_CHECK_VAL) == 0,
+    ck_assert_msg(list[1] != NULL, "Missing first list element");
+    ck_assert_msg(strcmp(list[1], "2nd_" LC_NAME_ALIAS_CHECK_VAL) == 0,
                 "Unexpected value, expected [%s], got [%s]",
                 "2nd_" LC_NAME_ALIAS_CHECK_VAL, list[1]);
-    fail_unless(list[2] == NULL, "Missing list terminator");
+    ck_assert_msg(list[2] == NULL, "Missing list terminator");
 
     talloc_free(attrs);
 }
@@ -5112,37 +5112,37 @@
     struct ldb_message_element *el = NULL;
 
     tmp_ctx = talloc_new(NULL);
-    fail_unless(tmp_ctx != NULL, "talloc_new failed");
+    ck_assert_msg(tmp_ctx != NULL, "talloc_new failed");
 
     attrs = sysdb_new_attrs(NULL);
-    fail_unless(attrs != NULL, "sysdb_new_attrs failed");
+    ck_assert_msg(attrs != NULL, "sysdb_new_attrs failed");
 
     ret = sysdb_attrs_add_string(attrs, attrname, "val1");
-    fail_unless(ret == EOK, "sysdb_attrs_add_string failed");
+    ck_assert_msg(ret == EOK, "sysdb_attrs_add_string failed");
     ret = sysdb_attrs_add_string(attrs, attrname, "val2");
-    fail_unless(ret == EOK, "sysdb_attrs_add_string failed");
+    ck_assert_msg(ret == EOK, "sysdb_attrs_add_string failed");
 
     ret = sysdb_attrs_get_el_ext(attrs, attrname, false, &el);
-    fail_unless(ret == EOK, "sysdb_attrs_get_el_ext failed");
+    ck_assert_msg(ret == EOK, "sysdb_attrs_get_el_ext failed");
 
     list = sss_ldb_el_to_string_list(tmp_ctx, el);
-    fail_if(list == NULL, ("sss_ldb_el_to_string_list failed\n"));
+    sss_ck_fail_if_msg(list == NULL, ("sss_ldb_el_to_string_list failed\n"));
 
     ck_assert_str_eq(list[0], "val1");
     ck_assert_str_eq(list[1], "val2");
-    fail_unless(list[2] == NULL, "Expected terminated list");
+    ck_assert_msg(list[2] == NULL, "Expected terminated list");
 
     talloc_free(list);
 
     ret = sysdb_attrs_get_string_array(attrs, attrname, tmp_ctx, &list);
-    fail_unless(ret == EOK, "sysdb_attrs_get_string_array failed");
+    ck_assert_msg(ret == EOK, "sysdb_attrs_get_string_array failed");
 
     /* This test relies on values keeping the same order. It is the case
      * with LDB, but if we ever switch from LDB, we need to amend the test
      */
     ck_assert_str_eq(list[0], "val1");
     ck_assert_str_eq(list[1], "val2");
-    fail_unless(list[2] == NULL, "Expected terminated list");
+    ck_assert_msg(list[2] == NULL, "Expected terminated list");
 
     talloc_free(tmp_ctx);
 }
@@ -5157,26 +5157,26 @@
                           sizeof(TEST_ATTR_VALUE) - 1};
 
     tmp_ctx = talloc_new(NULL);
-    fail_unless(tmp_ctx != NULL, "talloc_new failed");
+    ck_assert_msg(tmp_ctx != NULL, "talloc_new failed");
 
     attrs = sysdb_new_attrs(NULL);
-    fail_unless(attrs != NULL, "sysdb_new_attrs failed");
+    ck_assert_msg(attrs != NULL, "sysdb_new_attrs failed");
 
     ret = sysdb_attrs_add_val(attrs, TEST_ATTR_NAME, &val);
-    fail_unless(ret == EOK, "sysdb_attrs_add_val failed.");
+    ck_assert_msg(ret == EOK, "sysdb_attrs_add_val failed.");
 
     ret = sysdb_attrs_add_val(attrs, TEST_ATTR_NAME, &val);
-    fail_unless(ret == EOK, "sysdb_attrs_add_val failed.");
+    ck_assert_msg(ret == EOK, "sysdb_attrs_add_val failed.");
 
-    fail_unless(attrs->num == 1, "Unexpected number of attributes.");
-    fail_unless(strcmp(attrs->a[0].name, TEST_ATTR_NAME) == 0,
+    ck_assert_msg(attrs->num == 1, "Unexpected number of attributes.");
+    ck_assert_msg(strcmp(attrs->a[0].name, TEST_ATTR_NAME) == 0,
                 "Unexpected attribute name.");
-    fail_unless(attrs->a[0].num_values == 2,
+    ck_assert_msg(attrs->a[0].num_values == 2,
                 "Unexpected number of attribute values.");
-    fail_unless(ldb_val_string_cmp(&attrs->a[0].values[0],
+    ck_assert_msg(ldb_val_string_cmp(&attrs->a[0].values[0],
                                    TEST_ATTR_VALUE) == 0,
                 "Unexpected attribute value.");
-    fail_unless(ldb_val_string_cmp(&attrs->a[0].values[1],
+    ck_assert_msg(ldb_val_string_cmp(&attrs->a[0].values[1],
                                    TEST_ATTR_VALUE) == 0,
                 "Unexpected attribute value.");
 
@@ -5193,23 +5193,23 @@
                           sizeof(TEST_ATTR_VALUE) - 1};
 
     tmp_ctx = talloc_new(NULL);
-    fail_unless(tmp_ctx != NULL, "talloc_new failed");
+    ck_assert_msg(tmp_ctx != NULL, "talloc_new failed");
 
     attrs = sysdb_new_attrs(NULL);
-    fail_unless(attrs != NULL, "sysdb_new_attrs failed");
+    ck_assert_msg(attrs != NULL, "sysdb_new_attrs failed");
 
     ret = sysdb_attrs_add_val(attrs, TEST_ATTR_NAME, &val);
-    fail_unless(ret == EOK, "sysdb_attrs_add_val failed.");
+    ck_assert_msg(ret == EOK, "sysdb_attrs_add_val failed.");
 
     ret = sysdb_attrs_add_val_safe(attrs, TEST_ATTR_NAME, &val);
-    fail_unless(ret == EOK, "sysdb_attrs_add_val failed.");
+    ck_assert_msg(ret == EOK, "sysdb_attrs_add_val failed.");
 
-    fail_unless(attrs->num == 1, "Unexpected number of attributes.");
-    fail_unless(strcmp(attrs->a[0].name, TEST_ATTR_NAME) == 0,
+    ck_assert_msg(attrs->num == 1, "Unexpected number of attributes.");
+    ck_assert_msg(strcmp(attrs->a[0].name, TEST_ATTR_NAME) == 0,
                 "Unexpected attribute name.");
-    fail_unless(attrs->a[0].num_values == 1,
+    ck_assert_msg(attrs->a[0].num_values == 1,
                 "Unexpected number of attribute values.");
-    fail_unless(ldb_val_string_cmp(&attrs->a[0].values[0],
+    ck_assert_msg(ldb_val_string_cmp(&attrs->a[0].values[0],
                                    TEST_ATTR_VALUE) == 0,
                 "Unexpected attribute value.");
 
@@ -5224,23 +5224,23 @@
     TALLOC_CTX *tmp_ctx;
 
     tmp_ctx = talloc_new(NULL);
-    fail_unless(tmp_ctx != NULL, "talloc_new failed");
+    ck_assert_msg(tmp_ctx != NULL, "talloc_new failed");
 
     attrs = sysdb_new_attrs(NULL);
-    fail_unless(attrs != NULL, "sysdb_new_attrs failed");
+    ck_assert_msg(attrs != NULL, "sysdb_new_attrs failed");
 
     ret = sysdb_attrs_add_string(attrs, TEST_ATTR_NAME, TEST_ATTR_VALUE);
-    fail_unless(ret == EOK, "sysdb_attrs_add_val failed.");
+    ck_assert_msg(ret == EOK, "sysdb_attrs_add_val failed.");
 
     ret = sysdb_attrs_add_string_safe(attrs, TEST_ATTR_NAME, TEST_ATTR_VALUE);
-    fail_unless(ret == EOK, "sysdb_attrs_add_val failed.");
+    ck_assert_msg(ret == EOK, "sysdb_attrs_add_val failed.");
 
-    fail_unless(attrs->num == 1, "Unexpected number of attributes.");
-    fail_unless(strcmp(attrs->a[0].name, TEST_ATTR_NAME) == 0,
+    ck_assert_msg(attrs->num == 1, "Unexpected number of attributes.");
+    ck_assert_msg(strcmp(attrs->a[0].name, TEST_ATTR_NAME) == 0,
                 "Unexpected attribute name.");
-    fail_unless(attrs->a[0].num_values == 1,
+    ck_assert_msg(attrs->a[0].num_values == 1,
                 "Unexpected number of attribute values.");
-    fail_unless(ldb_val_string_cmp(&attrs->a[0].values[0],
+    ck_assert_msg(ldb_val_string_cmp(&attrs->a[0].values[0],
                                    TEST_ATTR_VALUE) == 0,
                 "Unexpected attribute value.");
 
@@ -5258,77 +5258,77 @@
     const char **array;
 
     ret = sysdb_attrs_copy(NULL, NULL);
-    fail_unless(ret == EINVAL, "Wrong return code");
+    ck_assert_msg(ret == EINVAL, "Wrong return code");
 
     tmp_ctx = talloc_new(NULL);
-    fail_unless(tmp_ctx != NULL, "talloc_new failed");
+    ck_assert_msg(tmp_ctx != NULL, "talloc_new failed");
 
     src = sysdb_new_attrs(tmp_ctx);
-    fail_unless(src != NULL, "sysdb_new_attrs failed");
+    ck_assert_msg(src != NULL, "sysdb_new_attrs failed");
 
     ret = sysdb_attrs_copy(src, NULL);
-    fail_unless(ret == EINVAL, "Wrong return code");
+    ck_assert_msg(ret == EINVAL, "Wrong return code");
 
     dst = sysdb_new_attrs(tmp_ctx);
-    fail_unless(dst != NULL, "sysdb_new_attrs failed");
+    ck_assert_msg(dst != NULL, "sysdb_new_attrs failed");
 
     ret = sysdb_attrs_copy(NULL, dst);
-    fail_unless(ret == EINVAL, "Wrong return code");
+    ck_assert_msg(ret == EINVAL, "Wrong return code");
 
     ret = sysdb_attrs_copy(src, dst);
-    fail_unless(ret == EOK, "sysdb_attrs_copy failed");
-    fail_unless(dst->num == 0, "Wrong number of elements");
+    ck_assert_msg(ret == EOK, "sysdb_attrs_copy failed");
+    ck_assert_msg(dst->num == 0, "Wrong number of elements");
 
     ret = sysdb_attrs_add_string(src, TEST_ATTR_NAME, TEST_ATTR_VALUE);
-    fail_unless(ret == EOK, "sysdb_attrs_add_val failed.");
+    ck_assert_msg(ret == EOK, "sysdb_attrs_add_val failed.");
 
     ret = sysdb_attrs_copy(src, dst);
-    fail_unless(ret == EOK, "sysdb_attrs_copy failed");
-    fail_unless(dst->num == 1, "Wrong number of elements");
+    ck_assert_msg(ret == EOK, "sysdb_attrs_copy failed");
+    ck_assert_msg(dst->num == 1, "Wrong number of elements");
     ret = sysdb_attrs_get_string(dst, TEST_ATTR_NAME, &val);
-    fail_unless(ret == EOK, "sysdb_attrs_get_string failed.\n");
-    fail_unless(strcmp(val, TEST_ATTR_VALUE) == 0, "Wrong attribute value.");
+    ck_assert_msg(ret == EOK, "sysdb_attrs_get_string failed.\n");
+    ck_assert_msg(strcmp(val, TEST_ATTR_VALUE) == 0, "Wrong attribute value.");
 
     /* Make sure the same entry is not copied twice */
     ret = sysdb_attrs_copy(src, dst);
-    fail_unless(ret == EOK, "sysdb_attrs_copy failed");
-    fail_unless(dst->num == 1, "Wrong number of elements");
+    ck_assert_msg(ret == EOK, "sysdb_attrs_copy failed");
+    ck_assert_msg(dst->num == 1, "Wrong number of elements");
     ret = sysdb_attrs_get_string(dst, TEST_ATTR_NAME, &val);
-    fail_unless(ret == EOK, "sysdb_attrs_get_string failed.\n");
-    fail_unless(strcmp(val, TEST_ATTR_VALUE) == 0, "Wrong attribute value.");
+    ck_assert_msg(ret == EOK, "sysdb_attrs_get_string failed.\n");
+    ck_assert_msg(strcmp(val, TEST_ATTR_VALUE) == 0, "Wrong attribute value.");
 
     /* Add new value to existing attribute */
     ret = sysdb_attrs_add_string(src, TEST_ATTR_NAME, TEST_ATTR_VALUE"_2nd");
-    fail_unless(ret == EOK, "sysdb_attrs_add_val failed.");
+    ck_assert_msg(ret == EOK, "sysdb_attrs_add_val failed.");
 
     ret = sysdb_attrs_copy(src, dst);
-    fail_unless(ret == EOK, "sysdb_attrs_copy failed");
-    fail_unless(dst->num == 1, "Wrong number of elements");
+    ck_assert_msg(ret == EOK, "sysdb_attrs_copy failed");
+    ck_assert_msg(dst->num == 1, "Wrong number of elements");
     ret = sysdb_attrs_get_string_array(dst, TEST_ATTR_NAME, tmp_ctx, &array);
-    fail_unless(ret == EOK, "sysdb_attrs_get_string_array failed.\n");
-    fail_unless(strcmp(array[0], TEST_ATTR_VALUE) == 0,
+    ck_assert_msg(ret == EOK, "sysdb_attrs_get_string_array failed.\n");
+    ck_assert_msg(strcmp(array[0], TEST_ATTR_VALUE) == 0,
                        "Wrong attribute value.");
-    fail_unless(strcmp(array[1], TEST_ATTR_VALUE"_2nd") == 0,
+    ck_assert_msg(strcmp(array[1], TEST_ATTR_VALUE"_2nd") == 0,
                        "Wrong attribute value.");
-    fail_unless(array[2] == NULL, "Wrong number of values.");
+    ck_assert_msg(array[2] == NULL, "Wrong number of values.");
 
     /* Add new attribute */
     ret = sysdb_attrs_add_string(src, TEST_ATTR_NAME"_2nd", TEST_ATTR_VALUE);
-    fail_unless(ret == EOK, "sysdb_attrs_add_val failed.");
+    ck_assert_msg(ret == EOK, "sysdb_attrs_add_val failed.");
 
     ret = sysdb_attrs_copy(src, dst);
-    fail_unless(ret == EOK, "sysdb_attrs_copy failed");
-    fail_unless(dst->num == 2, "Wrong number of elements");
+    ck_assert_msg(ret == EOK, "sysdb_attrs_copy failed");
+    ck_assert_msg(dst->num == 2, "Wrong number of elements");
     ret = sysdb_attrs_get_string_array(dst, TEST_ATTR_NAME, tmp_ctx, &array);
-    fail_unless(ret == EOK, "sysdb_attrs_get_string_array failed.\n");
-    fail_unless(strcmp(array[0], TEST_ATTR_VALUE) == 0,
+    ck_assert_msg(ret == EOK, "sysdb_attrs_get_string_array failed.\n");
+    ck_assert_msg(strcmp(array[0], TEST_ATTR_VALUE) == 0,
                        "Wrong attribute value.");
-    fail_unless(strcmp(array[1], TEST_ATTR_VALUE"_2nd") == 0,
+    ck_assert_msg(strcmp(array[1], TEST_ATTR_VALUE"_2nd") == 0,
                        "Wrong attribute value.");
-    fail_unless(array[2] == NULL, "Wrong number of values.");
+    ck_assert_msg(array[2] == NULL, "Wrong number of values.");
     ret = sysdb_attrs_get_string(dst, TEST_ATTR_NAME"_2nd", &val);
-    fail_unless(ret == EOK, "sysdb_attrs_get_string failed.\n");
-    fail_unless(strcmp(val, TEST_ATTR_VALUE) == 0, "Wrong attribute value.");
+    ck_assert_msg(ret == EOK, "sysdb_attrs_get_string failed.\n");
+    ck_assert_msg(strcmp(val, TEST_ATTR_VALUE) == 0, "Wrong attribute value.");
 
     talloc_free(tmp_ctx);
 }
@@ -5348,12 +5348,12 @@
 
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
-    fail_if(ret != EOK, "Could not set up the test");
+    sss_ck_fail_if_msg(ret != EOK, "Could not set up the test");
     check_leaks_push(test_ctx);
 
     /* id mapping */
     ret = sysdb_idmap_get_mappings(test_ctx, test_ctx->domain, &res);
-    fail_unless(ret == ENOENT, "sysdb_idmap_get_mappings error [%d][%s].",
+    ck_assert_msg(ret == ENOENT, "sysdb_idmap_get_mappings error [%d][%s].",
                 ret, strerror(ret));
     talloc_zfree(res);
 
@@ -5365,36 +5365,36 @@
     ret = sysdb_search_user_by_name(test_ctx, test_ctx->domain,
                                     data->username,
                                     NULL, &msg);
-    fail_unless(ret == ENOENT, "sysdb_search_user_by_name error [%d][%s].",
+    ck_assert_msg(ret == ENOENT, "sysdb_search_user_by_name error [%d][%s].",
                                ret, strerror(ret));
     talloc_zfree(msg);
 
     ret = sysdb_get_real_name(test_ctx, test_ctx->domain,
                               data->username, &str);
-    fail_unless(ret == ENOENT, "sysdb_get_real_name error [%d][%s].",
+    ck_assert_msg(ret == ENOENT, "sysdb_get_real_name error [%d][%s].",
                                ret, strerror(ret));
     talloc_zfree(str);
 
     ret = sysdb_search_user_by_uid(test_ctx, test_ctx->domain,
                                    data->uid, NULL, &msg);
-    fail_unless(ret == ENOENT, "sysdb_search_user_by_uid error [%d][%s].",
+    ck_assert_msg(ret == ENOENT, "sysdb_search_user_by_uid error [%d][%s].",
                                ret, strerror(ret));
     talloc_zfree(msg);
 
     ret = sysdb_search_user_by_sid_str(test_ctx, test_ctx->domain,
                                        data->sid_str, NULL, &msg);
-    fail_unless(ret == ENOENT, "sysdb_search_user_by_sid_str failed with "
+    ck_assert_msg(ret == ENOENT, "sysdb_search_user_by_sid_str failed with "
                                "[%d][%s].", ret, strerror(ret));
 
     /* General search */
     user_dn = sysdb_user_dn(test_ctx, test_ctx->domain,
                             data->username);
-    fail_if(user_dn == NULL, "sysdb_user_dn failed");
+    sss_ck_fail_if_msg(user_dn == NULL, "sysdb_user_dn failed");
 
     ret = sysdb_asq_search(test_ctx, test_ctx->domain,
                            user_dn, NULL, "memberof", NULL,
                            &count, &msgs);
-    fail_unless(ret == ENOENT, "sysdb_asq_search failed: %d, %s",
+    ck_assert_msg(ret == ENOENT, "sysdb_asq_search failed: %d, %s",
                                ret, strerror(ret));
     talloc_zfree(msgs);
 
@@ -5402,7 +5402,7 @@
                              user_dn, LDB_SCOPE_SUBTREE,
                              SYSDB_UC, NULL,
                              &count, &msgs);
-    fail_unless(ret == ENOENT, "sysdb_search_entry failed: %d, %s",
+    ck_assert_msg(ret == ENOENT, "sysdb_search_entry failed: %d, %s",
                                ret, strerror(ret));
     talloc_zfree(msgs);
     talloc_zfree(user_dn);
@@ -5410,11 +5410,11 @@
     /* SSS_LDB_SEARCH */
     user_dn = sysdb_user_dn(test_ctx, test_ctx->domain,
                             data->username);
-    fail_if(user_dn == NULL, "sysdb_user_dn failed");
+    sss_ck_fail_if_msg(user_dn == NULL, "sysdb_user_dn failed");
     SSS_LDB_SEARCH(ret, test_ctx->sysdb->ldb, test_ctx, &res, user_dn,
                    LDB_SCOPE_BASE, NULL, SYSDB_UC);
 
-    fail_unless(ret == ENOENT, "SSS_LDB_SEARCH failed: %d, %s",
+    ck_assert_msg(ret == ENOENT, "SSS_LDB_SEARCH failed: %d, %s",
                                ret, strerror(ret));
 
     talloc_zfree(res);
@@ -5428,19 +5428,19 @@
 
     ret = sysdb_search_group_by_name(test_ctx, test_ctx->domain,
                                      data->groupname, NULL, &msg);
-    fail_unless(ret == ENOENT, "sysdb_search_group_by_name error [%d][%s].",
+    ck_assert_msg(ret == ENOENT, "sysdb_search_group_by_name error [%d][%s].",
                                ret, strerror(ret));
     talloc_zfree(msg);
 
     ret = sysdb_search_group_by_gid(test_ctx, test_ctx->domain,
                                     data->gid, NULL, &msg);
-    fail_unless(ret == ENOENT, "sysdb_search_group_by_gid error [%d][%s].",
+    ck_assert_msg(ret == ENOENT, "sysdb_search_group_by_gid error [%d][%s].",
                                ret, strerror(ret));
     talloc_zfree(msg);
 
     ret = sysdb_search_group_by_sid_str(test_ctx, test_ctx->domain,
                                         data->sid_str, NULL, &msg);
-    fail_unless(ret == ENOENT, "sysdb_search_group_by_sid_str failed with "
+    ck_assert_msg(ret == ENOENT, "sysdb_search_group_by_sid_str failed with "
                                "[%d][%s].", ret, strerror(ret));
     talloc_zfree(msg);
     talloc_zfree(data);
@@ -5448,20 +5448,20 @@
     /* Search netgroup */
     ret = sysdb_search_netgroup_by_name(test_ctx, test_ctx->domain,
                                         "nonexisting_netgroup", NULL, &msg);
-    fail_unless(ret == ENOENT, "sysdb_search_netgroup_by_name error [%d][%s].",
+    ck_assert_msg(ret == ENOENT, "sysdb_search_netgroup_by_name error [%d][%s].",
                                ret, strerror(ret));
     talloc_zfree(msg);
 
     ret = sysdb_getnetgr(test_ctx, test_ctx->domain, "nonexisting_netgroup",
                          &res);
-    fail_unless(ret == ENOENT, "sysdb_getnetgr error [%d][%s]",
+    ck_assert_msg(ret == ENOENT, "sysdb_getnetgr error [%d][%s]",
                 ret, strerror(ret));
     talloc_zfree(res);
 
     /* Search object */
     ret = sysdb_search_object_by_sid(test_ctx, test_ctx->domain,
                                      "S-5-4-3-2-1", NULL, &res);
-    fail_unless(ret == ENOENT, "sysdb_search_object_by_sid failed with "
+    ck_assert_msg(ret == ENOENT, "sysdb_search_object_by_sid failed with "
                                "[%d][%s].", ret, strerror(ret));
     talloc_zfree(res);
 
@@ -5469,21 +5469,21 @@
     ret = sysdb_search_users(test_ctx, test_ctx->domain,
                              "("SYSDB_SHELL"=/bin/nologin)", NULL,
                              &count, &msgs);
-    fail_unless(ret == ENOENT, "sysdb_search_users failed: %d, %s",
+    ck_assert_msg(ret == ENOENT, "sysdb_search_users failed: %d, %s",
                                ret, strerror(ret));
     talloc_zfree(msgs);
 
     ret = sysdb_search_groups(test_ctx, test_ctx->domain,
                               "("SYSDB_GIDNUM"=1234)", NULL,
                               &count, &msgs);
-    fail_unless(ret == ENOENT, "sysdb_search_groups failed: %d, %s",
+    ck_assert_msg(ret == ENOENT, "sysdb_search_groups failed: %d, %s",
                                ret, strerror(ret));
     talloc_zfree(msgs);
 
     ret = sysdb_search_netgroups(test_ctx, test_ctx->domain,
                                  "("SYSDB_NAME"=nonexisting)", NULL,
                                  &count, &msgs);
-    fail_unless(ret == ENOENT, "sysdb_search_netgroups failed: %d, %s",
+    ck_assert_msg(ret == ENOENT, "sysdb_search_netgroups failed: %d, %s",
                                ret, strerror(ret));
     talloc_zfree(msgs);
 
@@ -5492,7 +5492,7 @@
                               "(distinguishedName=nonexisting)",
                               CUSTOM_TEST_CONTAINER, NULL,
                               &count, &msgs);
-    fail_unless(ret == ENOENT, "sysdb_search_custom failed: %d, %s",
+    ck_assert_msg(ret == ENOENT, "sysdb_search_custom failed: %d, %s",
                                ret, strerror(ret));
     talloc_zfree(msgs);
 
@@ -5500,13 +5500,13 @@
                                      "nonexisting",
                                      CUSTOM_TEST_CONTAINER, NULL,
                                      &count, &msgs);
-    fail_unless(ret == ENOENT, "sysdb_search_custom_by_name failed: %d, %s",
+    ck_assert_msg(ret == ENOENT, "sysdb_search_custom_by_name failed: %d, %s",
                                ret, strerror(ret));
     talloc_zfree(msgs);
 
     /* TODO: test sysdb_search_selinux_config */
 
-    fail_unless(check_leaks_pop(test_ctx) == true, "Memory leak");
+    ck_assert_msg(check_leaks_pop(test_ctx) == true, "Memory leak");
     talloc_free(test_ctx);
 }
 END_TEST
@@ -5519,23 +5519,23 @@
 
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
-    fail_if(ret != EOK, "Could not set up the test");
+    sss_ck_fail_if_msg(ret != EOK, "Could not set up the test");
 
     ret = sysdb_has_enumerated(test_ctx->domain, &enumerated);
-    fail_if(ret != ENOENT,
+    sss_ck_fail_if_msg(ret != ENOENT,
             "Error [%d][%s] checking enumeration ENOENT is expected",
             ret, strerror(ret));
 
     ret = sysdb_set_enumerated(test_ctx->domain, true);
-    fail_if(ret != EOK, "Error [%d][%s] setting enumeration",
+    sss_ck_fail_if_msg(ret != EOK, "Error [%d][%s] setting enumeration",
                         ret, strerror(ret));
 
     /* Recheck enumeration status */
     ret = sysdb_has_enumerated(test_ctx->domain, &enumerated);
-    fail_if(ret != EOK, "Error [%d][%s] checking enumeration",
+    sss_ck_fail_if_msg(ret != EOK, "Error [%d][%s] checking enumeration",
                         ret, strerror(ret));
 
-    fail_unless(enumerated, "Enumeration should have been set to true");
+    ck_assert_msg(enumerated, "Enumeration should have been set to true");
 
     talloc_free(test_ctx);
 }
@@ -5555,7 +5555,7 @@
 
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
-    fail_if(ret != EOK, "Could not set up the test");
+    sss_ck_fail_if_msg(ret != EOK, "Could not set up the test");
 
     data = test_data_new(test_ctx);
     fail_if(data == NULL);
@@ -5569,7 +5569,7 @@
     fail_if(data->orig_dn == NULL);
 
     ret = test_add_incomplete_group(data);
-    fail_unless(ret == EOK, "sysdb_add_incomplete_group error [%d][%s]",
+    ck_assert_msg(ret == EOK, "sysdb_add_incomplete_group error [%d][%s]",
                             ret, strerror(ret));
 
     /* different name and GID, original DN differs only by case */
@@ -5584,23 +5584,23 @@
     }
 
     ret = test_add_incomplete_group(data);
-    fail_unless(ret == EOK, "sysdb_add_incomplete_group error [%d][%s]",
+    ck_assert_msg(ret == EOK, "sysdb_add_incomplete_group error [%d][%s]",
                             ret, strerror(ret));
 
     /* Search by originalDN should yield 2 entries */
     filter = talloc_asprintf(test_ctx, "%s=%s",
                              SYSDB_ORIG_DN, data->orig_dn);
-    fail_if(filter == NULL, "Cannot construct filter\n");
+    sss_ck_fail_if_msg(filter == NULL, "Cannot construct filter\n");
 
     base_dn = sysdb_domain_dn(test_ctx, test_ctx->domain);
-    fail_if(base_dn == NULL, "Cannot construct basedn\n");
+    sss_ck_fail_if_msg(base_dn == NULL, "Cannot construct basedn\n");
 
     ret = sysdb_search_entry(test_ctx, test_ctx->sysdb,
                              base_dn, LDB_SCOPE_SUBTREE, filter, no_attrs,
                              &num_msgs, &msgs);
-    fail_unless(ret == EOK, "cache search error [%d][%s]",
+    ck_assert_msg(ret == EOK, "cache search error [%d][%s]",
                             ret, strerror(ret));
-    fail_unless(num_msgs == 2, "Did not find the expected number of entries using "
+    ck_assert_msg(num_msgs == 2, "Did not find the expected number of entries using "
                                "case insensitive originalDN search");
 }
 END_TEST
@@ -5616,7 +5616,7 @@
 
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
-    fail_if(ret != EOK, "Could not set up the test");
+    sss_ck_fail_if_msg(ret != EOK, "Could not set up the test");
 
     data = test_data_new_group(test_ctx, 456789);
     fail_if(data == NULL);
@@ -5625,14 +5625,14 @@
     fail_if(data->orig_dn == NULL);
 
     ret = test_add_incomplete_group(data);
-    fail_unless(ret == EOK, "sysdb_add_incomplete_group error [%d][%s]",
+    ck_assert_msg(ret == EOK, "sysdb_add_incomplete_group error [%d][%s]",
                             ret, strerror(ret));
 
     ret = sysdb_search_groups_by_orig_dn(test_ctx, data->ctx->domain, data->orig_dn,
                                          no_attrs, &num_msgs, &msgs);
-    fail_unless(ret == EOK, "cache search error [%d][%s]",
+    ck_assert_msg(ret == EOK, "cache search error [%d][%s]",
                             ret, strerror(ret));
-    fail_unless(num_msgs == 1, "Did not find the expected number of entries using "
+    ck_assert_msg(num_msgs == 1, "Did not find the expected number of entries using "
                                "sysdb_search_groups_by_orign_dn search");
 }
 END_TEST
@@ -5648,7 +5648,7 @@
 
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
-    fail_if(ret != EOK, "Could not set up the test");
+    sss_ck_fail_if_msg(ret != EOK, "Could not set up the test");
 
     data = test_data_new_user(test_ctx, 456789);
     fail_if(data == NULL);
@@ -5657,18 +5657,18 @@
     fail_if(data->orig_dn == NULL);
 
     ret = sysdb_attrs_add_string(data->attrs, SYSDB_ORIG_DN, data->orig_dn);
-    fail_unless(ret == EOK, "sysdb_attrs_add_string failed with [%d][%s].",
+    ck_assert_msg(ret == EOK, "sysdb_attrs_add_string failed with [%d][%s].",
                 ret, strerror(ret));
 
     ret = test_add_user(data);
-    fail_unless(ret == EOK, "sysdb_add_user error [%d][%s]",
+    ck_assert_msg(ret == EOK, "sysdb_add_user error [%d][%s]",
                             ret, strerror(ret));
 
     ret = sysdb_search_users_by_orig_dn(test_ctx, data->ctx->domain, data->orig_dn,
                                         no_attrs, &num_msgs, &msgs);
-    fail_unless(ret == EOK, "cache search error [%d][%s]",
+    ck_assert_msg(ret == EOK, "cache search error [%d][%s]",
                             ret, strerror(ret));
-    fail_unless(num_msgs == 1, "Did not find the expected number of entries using "
+    ck_assert_msg(num_msgs == 1, "Did not find the expected number of entries using "
                                "sysdb_search_users_by_orign_dn search");
 }
 END_TEST
@@ -5682,30 +5682,30 @@
 
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
-    fail_if(ret != EOK, "Could not set up the test");
+    sss_ck_fail_if_msg(ret != EOK, "Could not set up the test");
 
     data = test_data_new_group(test_ctx, 2902);
     fail_if(data == NULL);
     data->sid_str = "S-1-2-3-4";
 
     ret = test_add_incomplete_group(data);
-    fail_unless(ret == EOK, "sysdb_add_incomplete_group error [%d][%s]",
+    ck_assert_msg(ret == EOK, "sysdb_add_incomplete_group error [%d][%s]",
                             ret, strerror(ret));
 
     ret = sysdb_search_group_by_sid_str(test_ctx, test_ctx->domain,
                                         data->sid_str, NULL, &msg);
-    fail_unless(ret == EOK, "sysdb_search_group_by_sid_str failed with [%d][%s].",
+    ck_assert_msg(ret == EOK, "sysdb_search_group_by_sid_str failed with [%d][%s].",
                 ret, strerror(ret));
 
     /* Delete the group by SID */
     ret = sysdb_delete_by_sid(test_ctx->sysdb, test_ctx->domain, data->sid_str);
-    fail_unless(ret == EOK, "sysdb_delete_by_sid failed with [%d][%s].",
+    ck_assert_msg(ret == EOK, "sysdb_delete_by_sid failed with [%d][%s].",
                 ret, strerror(ret));
 
     /* Verify it's gone */
     ret = sysdb_search_group_by_sid_str(test_ctx, test_ctx->domain,
                                         data->sid_str, NULL, &msg);
-    fail_unless(ret == ENOENT,
+    ck_assert_msg(ret == ENOENT,
                 "sysdb_search_group_by_sid_str failed with [%d][%s].",
                 ret, strerror(ret));
 
@@ -5720,16 +5720,16 @@
     fail_if(data->sid_str == NULL);
 
     ret = sysdb_attrs_add_string(data->attrs, SYSDB_SID_STR, data->sid_str);
-    fail_unless(ret == EOK, "sysdb_attrs_add_string failed with [%d][%s].",
+    ck_assert_msg(ret == EOK, "sysdb_attrs_add_string failed with [%d][%s].",
                 ret, strerror(ret));
 
     ret = test_add_user(data);
-    fail_unless(ret == EOK, "sysdb_add_user failed with [%d][%s].",
+    ck_assert_msg(ret == EOK, "sysdb_add_user failed with [%d][%s].",
                 ret, strerror(ret));
 
     ret = sysdb_search_user_by_sid_str(test_ctx, test_ctx->domain,
                                        data->sid_str, NULL, &msg);
-    fail_unless(ret == EOK, "sysdb_search_user_by_sid_str failed with [%d][%s].",
+    ck_assert_msg(ret == EOK, "sysdb_search_user_by_sid_str failed with [%d][%s].",
                 ret, strerror(ret));
 
     talloc_free(test_ctx);
@@ -5747,12 +5747,12 @@
 
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
-    fail_if(ret != EOK, "Could not set up the test");
+    sss_ck_fail_if_msg(ret != EOK, "Could not set up the test");
 
     /* test for missing entry */
     ret = sysdb_search_object_by_id(test_ctx, test_ctx->domain, 111, NULL,
                                     &res);
-    fail_unless(ret == ENOENT, "sysdb_search_object_by_name failed with "
+    ck_assert_msg(ret == ENOENT, "sysdb_search_object_by_name failed with "
                                "[%d][%s].", ret, strerror(ret));
 
     /* test user search */
@@ -5760,25 +5760,25 @@
     fail_if(data == NULL);
 
     ret = test_add_user(data);
-    fail_unless(ret == EOK, "sysdb_add_user failed with [%d][%s].",
+    ck_assert_msg(ret == EOK, "sysdb_add_user failed with [%d][%s].",
                 ret, strerror(ret));
 
     ret = sysdb_search_object_by_id(test_ctx, test_ctx->domain, id, NULL,
                                     &res);
-    fail_unless(ret == EOK,
+    ck_assert_msg(ret == EOK,
                 "sysdb_search_object_by_id failed with [%d][%s].",
                 ret, strerror(ret));
-    fail_unless(res->count == 1, "Unexpected number of results, "
+    ck_assert_msg(res->count == 1, "Unexpected number of results, "
                                  "expected [%u], get [%u].", 1, res->count);
 
     returned_id = ldb_msg_find_attr_as_uint(res->msgs[0], SYSDB_UIDNUM, 0);
-    fail_unless(id == returned_id,
+    ck_assert_msg(id == returned_id,
                 "Unexpected object found, expected UID [%"PRIu32"], "
                 "got [%"PRIu32"].", id, returned_id);
     talloc_free(res);
 
     ret = test_remove_user(data);
-    fail_unless(ret == EOK,
+    ck_assert_msg(ret == EOK,
                 "test_remove_user failed with [%d][%s].", ret, strerror(ret));
 
     /* test group search */
@@ -5786,25 +5786,25 @@
     fail_if(data == NULL);
 
     ret = test_add_group(data);
-    fail_unless(ret == EOK, "sysdb_add_group failed with [%d][%s].",
+    ck_assert_msg(ret == EOK, "sysdb_add_group failed with [%d][%s].",
                 ret, strerror(ret));
 
     ret = sysdb_search_object_by_id(test_ctx, test_ctx->domain, id, NULL,
                                     &res);
-    fail_unless(ret == EOK,
+    ck_assert_msg(ret == EOK,
                 "sysdb_search_object_by_id failed with [%d][%s].",
                 ret, strerror(ret));
-    fail_unless(res->count == 1, "Unexpected number of results, "
+    ck_assert_msg(res->count == 1, "Unexpected number of results, "
                                  "expected [%u], get [%u].", 1, res->count);
 
     returned_id = ldb_msg_find_attr_as_uint(res->msgs[0], SYSDB_GIDNUM, 0);
-    fail_unless(id == returned_id,
+    ck_assert_msg(id == returned_id,
                 "Unexpected object found, expected GID [%"PRIu32"], "
                 "got [%"PRIu32"].", id, returned_id);
     talloc_free(res);
 
     ret = test_remove_group(data);
-    fail_unless(ret == EOK,
+    ck_assert_msg(ret == EOK,
                 "test_remove_group failed with [%d][%s].", ret, strerror(ret));
 
     /* test for bad search filter bug #3283 */
@@ -5812,32 +5812,32 @@
     fail_if(data == NULL);
 
     ret = test_add_group(data);
-    fail_unless(ret == EOK, "sysdb_add_group failed with [%d][%s].",
+    ck_assert_msg(ret == EOK, "sysdb_add_group failed with [%d][%s].",
                 ret, strerror(ret));
 
     test_ctx->domain->mpg = false;
     ret = sysdb_add_user(test_ctx->domain, "user1", 4001, id,
                          "User 1", "/home/user1", "/bin/bash",
                          NULL, NULL, 0, 0);
-    fail_unless(ret == EOK, "sysdb_add_user failed with [%d][%s].",
+    ck_assert_msg(ret == EOK, "sysdb_add_user failed with [%d][%s].",
                 ret, strerror(ret));
 
     ret = sysdb_add_user(test_ctx->domain, "user2", 4002, id,
                          "User 2", "/home/user2", "/bin/bash",
                          NULL, NULL, 0, 0);
-    fail_unless(ret == EOK, "sysdb_add_user failed with [%d][%s].",
+    ck_assert_msg(ret == EOK, "sysdb_add_user failed with [%d][%s].",
                 ret, strerror(ret));
 
     ret = sysdb_search_object_by_id(test_ctx, test_ctx->domain, id, NULL,
                                     &res);
-    fail_unless(ret == EOK,
+    ck_assert_msg(ret == EOK,
                 "sysdb_search_object_by_id failed with [%d][%s].",
                 ret, strerror(ret));
-    fail_unless(res->count == 1, "Unexpected number of results, "
+    ck_assert_msg(res->count == 1, "Unexpected number of results, "
                                  "expected [%u], get [%u].", 1, res->count);
 
     returned_id = ldb_msg_find_attr_as_uint(res->msgs[0], SYSDB_GIDNUM, 0);
-    fail_unless(id == returned_id,
+    ck_assert_msg(id == returned_id,
                 "Unexpected object found, expected GID [%"PRIu32"], "
                 "got [%"PRIu32"].", id, returned_id);
     talloc_free(res);
@@ -5867,7 +5867,7 @@
 
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
-    fail_if(ret != EOK, "Could not set up the test");
+    sss_ck_fail_if_msg(ret != EOK, "Could not set up the test");
 
     data = test_data_new_user(test_ctx, 123456);
     fail_if(data == NULL);
@@ -5875,27 +5875,27 @@
     uuid = "11111111-2222-3333-4444-555555555555";
 
     ret = sysdb_attrs_add_string(data->attrs, SYSDB_UUID, uuid);
-    fail_unless(ret == EOK, "sysdb_attrs_add_string failed with [%d][%s].",
+    ck_assert_msg(ret == EOK, "sysdb_attrs_add_string failed with [%d][%s].",
                 ret, strerror(ret));
 
     ret = test_add_user(data);
-    fail_unless(ret == EOK, "sysdb_add_user failed with [%d][%s].",
+    ck_assert_msg(ret == EOK, "sysdb_add_user failed with [%d][%s].",
                 ret, strerror(ret));
 
     ret = sysdb_search_object_by_uuid(test_ctx, test_ctx->domain,
                                       "11111111-2222-3333-4444-555555555556",
                                       NULL, &res);
-    fail_unless(ret == ENOENT,
+    ck_assert_msg(ret == ENOENT,
                 "Unexpected return code from sysdb_search_object_by_uuid for "
                 "missing object, expected [%d], got [%d].", ENOENT, ret);
 
     ret = sysdb_search_object_by_uuid(test_ctx, test_ctx->domain,
                                       uuid, NULL, &res);
-    fail_unless(ret == EOK, "sysdb_search_object_by_uuid failed with [%d][%s].",
+    ck_assert_msg(ret == EOK, "sysdb_search_object_by_uuid failed with [%d][%s].",
                 ret, strerror(ret));
-    fail_unless(res->count == 1, "Unexpected number of results, " \
+    ck_assert_msg(res->count == 1, "Unexpected number of results, " \
                                  "expected [%u], get [%u].", 1, res->count);
-    fail_unless(strcmp(ldb_msg_find_attr_as_string(res->msgs[0],
+    ck_assert_msg(strcmp(ldb_msg_find_attr_as_string(res->msgs[0],
                                                    SYSDB_NAME, ""),
                       data->username) == 0, "Unexpected object found, " \
                       "expected [%s], got [%s].", "UUIDuser",
@@ -5917,12 +5917,12 @@
 
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
-    fail_if(ret != EOK, "Could not set up the test");
+    sss_ck_fail_if_msg(ret != EOK, "Could not set up the test");
 
     /* test for missing entry */
     ret = sysdb_search_object_by_name(test_ctx, test_ctx->domain,
                                       "nonexisting_name", NULL, &res);
-    fail_unless(ret == ENOENT, "sysdb_search_object_by_name failed with "
+    ck_assert_msg(ret == ENOENT, "sysdb_search_object_by_name failed with "
                                "[%d][%s].", ret, strerror(ret));
 
     /* test user search */
@@ -5932,25 +5932,25 @@
     data->username = user_name;
 
     ret = test_add_user(data);
-    fail_unless(ret == EOK, "sysdb_add_user failed with [%d][%s].",
+    ck_assert_msg(ret == EOK, "sysdb_add_user failed with [%d][%s].",
                 ret, strerror(ret));
 
     ret = sysdb_search_object_by_name(test_ctx, test_ctx->domain,
                                       user_name, NULL, &res);
-    fail_unless(ret == EOK,
+    ck_assert_msg(ret == EOK,
                 "sysdb_search_object_by_name failed with [%d][%s].",
                 ret, strerror(ret));
-    fail_unless(res->count == 1, "Unexpected number of results, "
+    ck_assert_msg(res->count == 1, "Unexpected number of results, "
                                  "expected [%u], get [%u].", 1, res->count);
 
     returned_name = ldb_msg_find_attr_as_string(res->msgs[0], SYSDB_NAME, ""),
-    fail_unless(strcmp(returned_name, data->username) == 0,
+    ck_assert_msg(strcmp(returned_name, data->username) == 0,
                 "Unexpected object found, expected [%s], got [%s].",
                 user_name, returned_name);
     talloc_free(res);
 
     ret = test_remove_user(data);
-    fail_unless(ret == EOK,
+    ck_assert_msg(ret == EOK,
                 "test_remove_user failed with [%d][%s].", ret, strerror(ret));
 
     /* test group search */
@@ -5960,25 +5960,25 @@
     data->groupname = group_name;
 
     ret = test_add_group(data);
-    fail_unless(ret == EOK, "sysdb_add_group failed with [%d][%s].",
+    ck_assert_msg(ret == EOK, "sysdb_add_group failed with [%d][%s].",
                 ret, strerror(ret));
 
     ret = sysdb_search_object_by_name(test_ctx, test_ctx->domain,
                                       group_name, NULL, &res);
-    fail_unless(ret == EOK,
+    ck_assert_msg(ret == EOK,
                 "sysdb_search_object_by_name failed with [%d][%s].",
                 ret, strerror(ret));
-    fail_unless(res->count == 1, "Unexpected number of results, "
+    ck_assert_msg(res->count == 1, "Unexpected number of results, "
                                  "expected [%u], get [%u].", 1, res->count);
 
     returned_name = ldb_msg_find_attr_as_string(res->msgs[0], SYSDB_NAME, ""),
-    fail_unless(strcmp(returned_name, data->groupname) == 0,
+    ck_assert_msg(strcmp(returned_name, data->groupname) == 0,
                 "Unexpected object found, expected [%s], got [%s].",
                 group_name, returned_name);
     talloc_free(res);
 
     ret = test_remove_group(data);
-    fail_unless(ret == EOK,
+    ck_assert_msg(ret == EOK,
                 "test_remove_group failed with [%d][%s].", ret, strerror(ret));
 
     /* test case insensitive search */
@@ -5995,19 +5995,19 @@
     fail_unless(ret == EOK);
 
     ret = test_add_group(data);
-    fail_unless(ret == EOK, "sysdb_add_group failed with [%d][%s].",
+    ck_assert_msg(ret == EOK, "sysdb_add_group failed with [%d][%s].",
                 ret, strerror(ret));
 
     ret = sysdb_search_object_by_name(test_ctx, test_ctx->domain,
                                       lc_group_name, NULL, &res);
-    fail_unless(ret == EOK,
+    ck_assert_msg(ret == EOK,
                 "sysdb_search_object_by_name failed with [%d][%s].",
                 ret, strerror(ret));
-    fail_unless(res->count == 1, "Unexpected number of results, "
+    ck_assert_msg(res->count == 1, "Unexpected number of results, "
                                  "expected [%u], get [%u].", 1, res->count);
 
     returned_name = ldb_msg_find_attr_as_string(res->msgs[0], SYSDB_NAME, ""),
-    fail_unless(strcmp(returned_name, data->groupname) == 0,
+    ck_assert_msg(strcmp(returned_name, data->groupname) == 0,
                 "Unexpected object found, expected [%s], got [%s].",
                 group_name, returned_name);
 
@@ -6032,34 +6032,34 @@
 
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
-    fail_if(ret != EOK, "Could not set up the test");
+    sss_ck_fail_if_msg(ret != EOK, "Could not set up the test");
 
     data = test_data_new_user(test_ctx, 234567);
     fail_if(data == NULL);
 
     val.data = sss_base64_decode(test_ctx, TEST_USER_CERT_DERB64, &val.length);
-    fail_unless(val.data != NULL, "sss_base64_decode failed.");
+    ck_assert_msg(val.data != NULL, "sss_base64_decode failed.");
 
     ret = sysdb_attrs_add_val(data->attrs, SYSDB_USER_MAPPED_CERT, &val);
-    fail_unless(ret == EOK, "sysdb_attrs_add_val failed with [%d][%s].",
+    ck_assert_msg(ret == EOK, "sysdb_attrs_add_val failed with [%d][%s].",
                 ret, strerror(ret));
 
     ret = test_add_user(data);
-    fail_unless(ret == EOK, "sysdb_add_user failed with [%d][%s].",
+    ck_assert_msg(ret == EOK, "sysdb_add_user failed with [%d][%s].",
                 ret, strerror(ret));
 
     ret = sysdb_search_user_by_cert(test_ctx, test_ctx->domain, "ABA=", &res);
-    fail_unless(ret == ENOENT,
+    ck_assert_msg(ret == ENOENT,
                 "Unexpected return code from sysdb_search_user_by_cert for "
                 "missing object, expected [%d], got [%d].", ENOENT, ret);
 
     ret = sysdb_search_user_by_cert(test_ctx, test_ctx->domain,
                                     TEST_USER_CERT_DERB64, &res);
-    fail_unless(ret == EOK, "sysdb_search_user_by_cert failed with [%d][%s].",
+    ck_assert_msg(ret == EOK, "sysdb_search_user_by_cert failed with [%d][%s].",
                 ret, strerror(ret));
-    fail_unless(res->count == 1, "Unexpected number of results, " \
+    ck_assert_msg(res->count == 1, "Unexpected number of results, " \
                                  "expected [%u], get [%u].", 1, res->count);
-    fail_unless(strcmp(ldb_msg_find_attr_as_string(res->msgs[0],
+    ck_assert_msg(strcmp(ldb_msg_find_attr_as_string(res->msgs[0],
                                                    SYSDB_NAME, ""),
                       data->username) == 0, "Unexpected object found, " \
                       "expected [%s], got [%s].", data->username,
@@ -6070,24 +6070,24 @@
     fail_if(data2 == NULL);
 
     ret = sysdb_attrs_add_val(data2->attrs, SYSDB_USER_MAPPED_CERT, &val);
-    fail_unless(ret == EOK, "sysdb_attrs_add_val failed with [%d][%s].",
+    ck_assert_msg(ret == EOK, "sysdb_attrs_add_val failed with [%d][%s].",
                 ret, strerror(ret));
 
     ret = test_add_user(data2);
-    fail_unless(ret == EOK, "sysdb_add_user failed with [%d][%s].",
+    ck_assert_msg(ret == EOK, "sysdb_add_user failed with [%d][%s].",
                 ret, strerror(ret));
 
     ret = sysdb_search_user_by_cert(test_ctx, test_ctx->domain,
                                     TEST_USER_CERT_DERB64, &res);
-    fail_unless(ret == EOK, "sysdb_search_user_by_cert failed with [%d][%s].",
+    ck_assert_msg(ret == EOK, "sysdb_search_user_by_cert failed with [%d][%s].",
                 ret, strerror(ret));
-    fail_unless(res->count == 2, "Unexpected number of results, "
+    ck_assert_msg(res->count == 2, "Unexpected number of results, "
                                  "expected [%u], get [%u].", 2, res->count);
     name = ldb_msg_find_attr_as_string(res->msgs[0], SYSDB_NAME, "");
     fail_unless(name != NULL);
     name2 = ldb_msg_find_attr_as_string(res->msgs[1], SYSDB_NAME, "");
     fail_unless(name2 != NULL);
-    fail_unless(((strcmp(name, data->username) == 0
+    ck_assert_msg(((strcmp(name, data->username) == 0
                         && strcmp(name2, data2->username) == 0)
                     || (strcmp(name, data2->username) == 0
                         && strcmp(name2, data->username) == 0)),
@@ -6105,17 +6105,17 @@
 
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
-    fail_if(ret != EOK, "Could not set up the test");
+    sss_ck_fail_if_msg(ret != EOK, "Could not set up the test");
 
     check_leaks_push(test_ctx);
 
     /* Delete the group by SID */
     ret = sysdb_delete_by_sid(test_ctx->sysdb, test_ctx->domain,
                               "S-1-2-3-4-NON_EXISTING_SID");
-    fail_unless(ret == EOK, "sysdb_delete_by_sid failed with [%d][%s].",
+    ck_assert_msg(ret == EOK, "sysdb_delete_by_sid failed with [%d][%s].",
                 ret, strerror(ret));
 
-    fail_unless(check_leaks_pop(test_ctx) == true, "Memory leak");
+    ck_assert_msg(check_leaks_pop(test_ctx) == true, "Memory leak");
     talloc_free(test_ctx);
 }
 END_TEST
@@ -6136,19 +6136,19 @@
     char *alias;
 
     ret = setup_sysdb_tests(&test_ctx);
-    fail_if(ret != EOK, "Could not set up the test");
+    sss_ck_fail_if_msg(ret != EOK, "Could not set up the test");
 
     subdomain = new_subdomain(test_ctx, test_ctx->domain,
                               testdom[0], testdom[1], testdom[2], testdom[3],
                               false, false, NULL, NULL, 0, NULL);
-    fail_unless(subdomain != NULL, "Failed to create new subdomain.");
+    ck_assert_msg(subdomain != NULL, "Failed to create new subdomain.");
     ret = sysdb_subdomain_store(test_ctx->sysdb,
                                 testdom[0], testdom[1], testdom[2], testdom[3],
                                 false, false, NULL, 0, NULL);
-    fail_if(ret != EOK, "Could not set up the test (test subdom)");
+    sss_ck_fail_if_msg(ret != EOK, "Could not set up the test (test subdom)");
 
     ret = sysdb_update_subdomains(test_ctx->domain, NULL);
-    fail_unless(ret == EOK, "sysdb_update_subdomains failed with [%d][%s]",
+    ck_assert_msg(ret == EOK, "sysdb_update_subdomains failed with [%d][%s]",
                             ret, strerror(ret));
 
     data = test_data_new_user(test_ctx, 12345);
@@ -6159,13 +6159,13 @@
     fail_if(alias == NULL);
 
     ret = sysdb_attrs_add_string(data->attrs, SYSDB_NAME_ALIAS, alias);
-    fail_unless(ret == EOK, "sysdb_store_user failed.");
+    ck_assert_msg(ret == EOK, "sysdb_store_user failed.");
 
     ret = sysdb_store_user(subdomain, data->username,
                            NULL, data->uid, 0, "Sub Domain User",
                            "/home/subdomuser", "/bin/bash",
                            NULL, data->attrs, NULL, -1, 0);
-    fail_unless(ret == EOK, "sysdb_store_user failed.");
+    ck_assert_msg(ret == EOK, "sysdb_store_user failed.");
 
     base_dn =ldb_dn_new(test_ctx, test_ctx->sysdb->ldb, "cn=sysdb");
     fail_unless(base_dn != NULL);
@@ -6175,27 +6175,27 @@
 
     ret = ldb_search(test_ctx->sysdb->ldb, test_ctx, &results, base_dn,
                      LDB_SCOPE_SUBTREE, NULL, "name=%s", data->username);
-    fail_unless(ret == EOK, "ldb_search failed.");
-    fail_unless(results->count == 1, "Unexpected number of results, "
+    ck_assert_msg(ret == EOK, "ldb_search failed.");
+    ck_assert_msg(results->count == 1, "Unexpected number of results, "
                                      "expected [%d], got [%d]",
                                      1, results->count);
-    fail_unless(ldb_dn_compare(results->msgs[0]->dn, check_dn) == 0,
+    ck_assert_msg(ldb_dn_compare(results->msgs[0]->dn, check_dn) == 0,
                 "Unexpected DN returned");
 
     /* Subdomains are case-insensitive. Test that the lowercased name
      * can be found, too */
     ret = sysdb_search_user_by_name(test_ctx, subdomain, alias,
                                     attrs, &msg);
-    fail_unless(ret == EOK, "sysdb_search_user_by_name failed.");
+    ck_assert_msg(ret == EOK, "sysdb_search_user_by_name failed.");
 
     ret = sysdb_delete_user(subdomain, alias, 0);
-    fail_unless(ret == EOK, "sysdb_delete_user failed [%d][%s].",
+    ck_assert_msg(ret == EOK, "sysdb_delete_user failed [%d][%s].",
                             ret, strerror(ret));
 
     ret = ldb_search(test_ctx->sysdb->ldb, test_ctx, &results, base_dn,
                      LDB_SCOPE_SUBTREE, NULL, "name=%s", alias);
-    fail_unless(ret == EOK, "ldb_search failed.");
-    fail_unless(results->count == 0, "Unexpected number of results, "
+    ck_assert_msg(ret == EOK, "ldb_search failed.");
+    ck_assert_msg(results->count == 0, "Unexpected number of results, "
                                      "expected [%d], got [%d]",
                                      0, results->count);
 }
@@ -6215,19 +6215,19 @@
     char *dom_check;
 
     ret = setup_sysdb_tests(&test_ctx);
-    fail_if(ret != EOK, "Could not set up the test");
+    sss_ck_fail_if_msg(ret != EOK, "Could not set up the test");
 
     subdomain = new_subdomain(test_ctx, test_ctx->domain,
                               testdom[0], testdom[1], testdom[2], testdom[3],
                               false, false, NULL, NULL, 0, NULL);
-    fail_unless(subdomain != NULL, "Failed to create new subdomain.");
+    ck_assert_msg(subdomain != NULL, "Failed to create new subdomain.");
     ret = sysdb_subdomain_store(test_ctx->sysdb,
                                 testdom[0], testdom[1], testdom[2], testdom[3],
                                 false, false, NULL, 0, NULL);
-    fail_if(ret != EOK, "Could not set up the test (test subdom)");
+    sss_ck_fail_if_msg(ret != EOK, "Could not set up the test (test subdom)");
 
     ret = sysdb_update_subdomains(test_ctx->domain, NULL);
-    fail_unless(ret == EOK, "sysdb_update_subdomains failed with [%d][%s]",
+    ck_assert_msg(ret == EOK, "sysdb_update_subdomains failed with [%d][%s]",
                             ret, strerror(ret));
 
     data = test_data_new_user(test_ctx, 12345);
@@ -6240,7 +6240,7 @@
                            NULL, data->uid, 0, "Sub Domain User",
                            "/home/subdomuser", "/bin/bash",
                            NULL, NULL, NULL, -1, 0);
-    fail_unless(ret == EOK, "sysdb_store_domuser failed.");
+    ck_assert_msg(ret == EOK, "sysdb_store_domuser failed.");
 
     check_dn = sysdb_user_dn(data, subdomain, data->username);
     fail_unless(check_dn != NULL);
@@ -6248,9 +6248,9 @@
     ret = sysdb_search_user_by_name(test_ctx, subdomain,
                                     data->username, NULL,
                                     &msg);
-    fail_unless(ret == EOK, "sysdb_search_user_by_name failed with [%d][%s].",
+    ck_assert_msg(ret == EOK, "sysdb_search_user_by_name failed with [%d][%s].",
                             ret, strerror(ret));
-    fail_unless(ldb_dn_compare(msg->dn, check_dn) == 0,
+    ck_assert_msg(ldb_dn_compare(msg->dn, check_dn) == 0,
                 "Unexpected DN returned");
 
     name = ldb_msg_find_attr_as_string(msg, SYSDB_NAME, NULL);
@@ -6262,13 +6262,13 @@
     ck_assert_str_eq(dom_check, subdomain->name);
 
     ret = sysdb_search_user_by_uid(test_ctx, subdomain, data->uid, NULL, &msg);
-    fail_unless(ret == EOK, "sysdb_search_domuser_by_uid failed with [%d][%s].",
+    ck_assert_msg(ret == EOK, "sysdb_search_domuser_by_uid failed with [%d][%s].",
                             ret, strerror(ret));
-    fail_unless(ldb_dn_compare(msg->dn, check_dn) == 0,
+    ck_assert_msg(ldb_dn_compare(msg->dn, check_dn) == 0,
                 "Unexpected DN returned");
 
     ret = sysdb_delete_user(subdomain, data->username, data->uid);
-    fail_unless(ret == EOK, "sysdb_delete_domuser failed with [%d][%s].",
+    ck_assert_msg(ret == EOK, "sysdb_delete_domuser failed with [%d][%s].",
                             ret, strerror(ret));
 }
 END_TEST
@@ -6288,19 +6288,19 @@
     char *dom_check;
 
     ret = setup_sysdb_tests(&test_ctx);
-    fail_if(ret != EOK, "Could not set up the test");
+    sss_ck_fail_if_msg(ret != EOK, "Could not set up the test");
 
     subdomain = new_subdomain(test_ctx, test_ctx->domain,
                               testdom[0], testdom[1], testdom[2], testdom[3],
                               false, false, NULL, NULL, 0, NULL);
-    fail_unless(subdomain != NULL, "Failed to create new subdomain.");
+    ck_assert_msg(subdomain != NULL, "Failed to create new subdomain.");
     ret = sysdb_subdomain_store(test_ctx->sysdb,
                                 testdom[0], testdom[1], testdom[2], testdom[3],
                                 false, false, NULL, 0, NULL);
-    fail_if(ret != EOK, "Could not set up the test (test subdom)");
+    sss_ck_fail_if_msg(ret != EOK, "Could not set up the test (test subdom)");
 
     ret = sysdb_update_subdomains(test_ctx->domain, NULL);
-    fail_unless(ret == EOK, "sysdb_update_subdomains failed with [%d][%s]",
+    ck_assert_msg(ret == EOK, "sysdb_update_subdomains failed with [%d][%s]",
                             ret, strerror(ret));
 
     data = test_data_new_group(test_ctx, 12345);
@@ -6311,20 +6311,20 @@
     fail_if(alias == NULL);
 
     ret = sysdb_attrs_add_string(data->attrs, SYSDB_NAME_ALIAS, alias);
-    fail_unless(ret == EOK, "sysdb_attrs_add_string failed.");
+    ck_assert_msg(ret == EOK, "sysdb_attrs_add_string failed.");
 
     ret = sysdb_store_group(subdomain,
                             data->groupname, data->gid, data->attrs, -1, 0);
-    fail_unless(ret == EOK, "sysdb_store_group failed.");
+    ck_assert_msg(ret == EOK, "sysdb_store_group failed.");
 
     check_dn = sysdb_group_dn(data, subdomain, data->groupname);
     fail_unless(check_dn != NULL);
 
     ret = sysdb_search_group_by_name(test_ctx, subdomain, data->groupname, NULL,
                                      &msg);
-    fail_unless(ret == EOK, "sysdb_search_group_by_name failed with [%d][%s].",
+    ck_assert_msg(ret == EOK, "sysdb_search_group_by_name failed with [%d][%s].",
                             ret, strerror(ret));
-    fail_unless(ldb_dn_compare(msg->dn, check_dn) == 0,
+    ck_assert_msg(ldb_dn_compare(msg->dn, check_dn) == 0,
                 "Unexpected DN returned");
 
     /* subdomains are case insensitive, so it should be possible to search
@@ -6332,9 +6332,9 @@
     /* Fixme - lowercase this */
     ret = sysdb_search_group_by_name(test_ctx, subdomain, data->groupname, NULL,
                                      &msg);
-    fail_unless(ret == EOK, "case-insensitive group search failed with [%d][%s].",
+    ck_assert_msg(ret == EOK, "case-insensitive group search failed with [%d][%s].",
                             ret, strerror(ret));
-    fail_unless(ldb_dn_compare(msg->dn, check_dn) == 0,
+    ck_assert_msg(ldb_dn_compare(msg->dn, check_dn) == 0,
                 "Unexpected DN returned");
 
     name = ldb_msg_find_attr_as_string(msg, SYSDB_NAME, NULL);
@@ -6346,13 +6346,13 @@
     ck_assert_str_eq(dom_check, subdomain->name);
 
     ret = sysdb_search_group_by_gid(test_ctx, subdomain, data->gid, NULL, &msg);
-    fail_unless(ret == EOK, "sysdb_search_group_by_gid failed with [%d][%s].",
+    ck_assert_msg(ret == EOK, "sysdb_search_group_by_gid failed with [%d][%s].",
                             ret, strerror(ret));
-    fail_unless(ldb_dn_compare(msg->dn, check_dn) == 0,
+    ck_assert_msg(ldb_dn_compare(msg->dn, check_dn) == 0,
                 "Unexpected DN returned");
 
     ret = sysdb_delete_group(subdomain, data->groupname, data->gid);
-    fail_unless(ret == EOK, "sysdb_delete_group failed with [%d][%s].",
+    ck_assert_msg(ret == EOK, "sysdb_delete_group failed with [%d][%s].",
                             ret, strerror(ret));
 }
 END_TEST
@@ -6365,14 +6365,14 @@
     errno_t ret;
 
     ret = setup_sysdb_tests(&test_ctx);
-    fail_if(ret != EOK, "Could not set up the test");
+    sss_ck_fail_if_msg(ret != EOK, "Could not set up the test");
 
     autofsmapname = talloc_asprintf(test_ctx, "testmap%d", _i);
-    fail_if(autofsmapname == NULL, "Out of memory\n");
+    sss_ck_fail_if_msg(autofsmapname == NULL, "Out of memory\n");
 
     ret = sysdb_save_autofsmap(test_ctx->domain, autofsmapname,
                                autofsmapname, NULL, 0, 0);
-    fail_if(ret != EOK, "Could not store autofs map %s", autofsmapname);
+    sss_ck_fail_if_msg(ret != EOK, "Could not store autofs map %s", autofsmapname);
     talloc_free(test_ctx);
 }
 END_TEST
@@ -6385,15 +6385,15 @@
     struct ldb_message *map = NULL;
 
     ret = setup_sysdb_tests(&test_ctx);
-    fail_if(ret != EOK, "Could not set up the test");
+    sss_ck_fail_if_msg(ret != EOK, "Could not set up the test");
 
     autofsmapname = talloc_asprintf(test_ctx, "testmap%d", _i);
-    fail_if(autofsmapname == NULL, "Out of memory\n");
+    sss_ck_fail_if_msg(autofsmapname == NULL, "Out of memory\n");
 
     ret = sysdb_get_map_byname(test_ctx, test_ctx->domain,
                                autofsmapname, &map);
-    fail_if(ret != EOK, "Could not retrieve autofs map %s", autofsmapname);
-    fail_if(map == NULL, "No map retrieved?\n");
+    sss_ck_fail_if_msg(ret != EOK, "Could not retrieve autofs map %s", autofsmapname);
+    sss_ck_fail_if_msg(map == NULL, "No map retrieved?\n");
     talloc_free(test_ctx);
 }
 END_TEST
@@ -6405,13 +6405,13 @@
     errno_t ret;
 
     ret = setup_sysdb_tests(&test_ctx);
-    fail_if(ret != EOK, "Could not set up the test");
+    sss_ck_fail_if_msg(ret != EOK, "Could not set up the test");
 
     autofsmapname = talloc_asprintf(test_ctx, "testmap%d", _i);
-    fail_if(autofsmapname == NULL, "Out of memory\n");
+    sss_ck_fail_if_msg(autofsmapname == NULL, "Out of memory\n");
 
     ret = sysdb_delete_autofsmap(test_ctx->domain, autofsmapname);
-    fail_if(ret != EOK, "Could not retrieve autofs map %s", autofsmapname);
+    sss_ck_fail_if_msg(ret != EOK, "Could not retrieve autofs map %s", autofsmapname);
     talloc_free(test_ctx);
 }
 END_TEST
@@ -6424,15 +6424,15 @@
     struct ldb_message *map = NULL;
 
     ret = setup_sysdb_tests(&test_ctx);
-    fail_if(ret != EOK, "Could not set up the test");
+    sss_ck_fail_if_msg(ret != EOK, "Could not set up the test");
 
     autofsmapname = talloc_asprintf(test_ctx, "testmap%d", _i);
-    fail_if(autofsmapname == NULL, "Out of memory\n");
+    sss_ck_fail_if_msg(autofsmapname == NULL, "Out of memory\n");
 
     ret = sysdb_get_map_byname(test_ctx, test_ctx->domain,
                                autofsmapname, &map);
-    fail_if(ret != ENOENT, "Expected ENOENT, got %d instead\n", ret);
-    fail_if(map != NULL, "Unexpected map found\n");
+    sss_ck_fail_if_msg(ret != ENOENT, "Expected ENOENT, got %d instead\n", ret);
+    sss_ck_fail_if_msg(map != NULL, "Unexpected map found\n");
     talloc_free(test_ctx);
 }
 END_TEST
@@ -6448,23 +6448,23 @@
     const int limit = 10;
 
     ret = setup_sysdb_tests(&test_ctx);
-    fail_if(ret != EOK, "Could not set up the test");
+    sss_ck_fail_if_msg(ret != EOK, "Could not set up the test");
 
     autofsmapname = talloc_asprintf(test_ctx, "testmap%d", _i);
-    fail_if(autofsmapname == NULL, "Out of memory\n");
+    sss_ck_fail_if_msg(autofsmapname == NULL, "Out of memory\n");
 
     for (ii=0; ii < limit; ii++) {
         autofskey = talloc_asprintf(test_ctx, "%s_testkey%d",
                                     autofsmapname, ii);
-        fail_if(autofskey == NULL, "Out of memory\n");
+        sss_ck_fail_if_msg(autofskey == NULL, "Out of memory\n");
 
         autofsval = talloc_asprintf(test_ctx, "testserver:/testval%d", ii);
-        fail_if(autofsval == NULL, "Out of memory\n");
+        sss_ck_fail_if_msg(autofsval == NULL, "Out of memory\n");
 
         ret = sysdb_save_autofsentry(test_ctx->domain,
                                      autofsmapname, autofskey,
                                      autofsval, NULL);
-        fail_if(ret != EOK, "Could not save autofs entry %s", autofskey);
+        sss_ck_fail_if_msg(ret != EOK, "Could not save autofs entry %s", autofskey);
     }
 
     talloc_free(test_ctx);
@@ -6481,16 +6481,16 @@
     const int expected = 10;
 
     ret = setup_sysdb_tests(&test_ctx);
-    fail_if(ret != EOK, "Could not set up the test");
+    sss_ck_fail_if_msg(ret != EOK, "Could not set up the test");
 
     autofsmapname = talloc_asprintf(test_ctx, "testmap%d", _i);
-    fail_if(autofsmapname == NULL, "Out of memory\n");
+    sss_ck_fail_if_msg(autofsmapname == NULL, "Out of memory\n");
 
     ret = sysdb_autofs_entries_by_map(test_ctx, test_ctx->domain,
                                       autofsmapname, &count, &entries);
-    fail_if(ret != EOK, "Cannot get autofs entries for map %s\n",
+    sss_ck_fail_if_msg(ret != EOK, "Cannot get autofs entries for map %s\n",
             autofsmapname);
-    fail_if(count != expected, "Expected to find %d entries, got %d\n",
+    sss_ck_fail_if_msg(count != expected, "Expected to find %d entries, got %ld\n",
             expected, count);
     talloc_free(test_ctx);
 }
@@ -6505,21 +6505,21 @@
     errno_t ret;
 
     ret = setup_sysdb_tests(&test_ctx);
-    fail_if(ret != EOK, "Could not set up the test");
+    sss_ck_fail_if_msg(ret != EOK, "Could not set up the test");
 
     autofsmapname = talloc_asprintf(test_ctx, "testmap%d", _i);
-    fail_if(autofsmapname == NULL, "Out of memory\n");
+    sss_ck_fail_if_msg(autofsmapname == NULL, "Out of memory\n");
 
     autofskey = talloc_asprintf(test_ctx, "testkey");
-    fail_if(autofskey == NULL, "Out of memory\n");
+    sss_ck_fail_if_msg(autofskey == NULL, "Out of memory\n");
 
     autofsval = talloc_asprintf(test_ctx, "testserver:/testval%d", _i);
-    fail_if(autofsval == NULL, "Out of memory\n");
+    sss_ck_fail_if_msg(autofsval == NULL, "Out of memory\n");
 
     ret = sysdb_save_autofsentry(test_ctx->domain,
                                  autofsmapname, autofskey,
                                  autofsval, NULL);
-    fail_if(ret != EOK, "Could not save autofs entry %s", autofskey);
+    sss_ck_fail_if_msg(ret != EOK, "Could not save autofs entry %s", autofskey);
     talloc_free(test_ctx);
 }
 END_TEST
@@ -6539,23 +6539,23 @@
     const int expected = 10;
 
     ret = setup_sysdb_tests(&test_ctx);
-    fail_if(ret != EOK, "Could not set up the test");
+    sss_ck_fail_if_msg(ret != EOK, "Could not set up the test");
 
     autofskey = talloc_asprintf(test_ctx, "testkey");
-    fail_if(autofskey == NULL, "Out of memory\n");
+    sss_ck_fail_if_msg(autofskey == NULL, "Out of memory\n");
 
     filter = talloc_asprintf(test_ctx, "(&(objectclass=%s)(%s=%s))",
                              SYSDB_AUTOFS_ENTRY_OC, SYSDB_AUTOFS_ENTRY_KEY, autofskey);
-    fail_if(filter == NULL, "Out of memory\n");
+    sss_ck_fail_if_msg(filter == NULL, "Out of memory\n");
 
     dn = ldb_dn_new_fmt(test_ctx, test_ctx->sysdb->ldb, SYSDB_TMPL_CUSTOM_SUBTREE,
                         AUTOFS_MAP_SUBDIR, test_ctx->domain->name);
-    fail_if(dn == NULL, "Out of memory\n");
+    sss_ck_fail_if_msg(dn == NULL, "Out of memory\n");
 
     ret = sysdb_search_entry(test_ctx, test_ctx->sysdb, dn, LDB_SCOPE_SUBTREE,
                              filter, attrs, &count, &msgs);
-    fail_unless(ret == EOK, "sysdb_search_entry returned [%d]", ret);
-    fail_if(count != expected, "Found %d entries with name %s, expected %d\n",
+    ck_assert_msg(ret == EOK, "sysdb_search_entry returned [%d]", ret);
+    sss_ck_fail_if_msg(count != expected, "Found %ld entries with name %s, expected %d\n",
             count, autofskey, expected);
     talloc_free(test_ctx);
 }
@@ -6573,7 +6573,7 @@
     /* (relative to current dir) */
     ret = mkdir(TESTS_PATH, 0775);
     if (ret == -1 && errno != EEXIST) {
-        fail("Could not create %s directory", TESTS_PATH);
+        ck_abort_msg("Could not create %s directory", TESTS_PATH);
         return NULL;
     }
 
@@ -6583,7 +6583,7 @@
     /* Make sure the test domain does not interfere with our testing */
     ret = unlink(TESTS_PATH"/"TEST_CONF_FILE);
     if (ret != EOK && errno != ENOENT) {
-        fail("Could not remove confdb %s\n", TESTS_PATH"/"TEST_CONF_FILE);
+        ck_abort_msg("Could not remove confdb %s\n", TESTS_PATH"/"TEST_CONF_FILE);
         return NULL;
     }
 
@@ -6671,50 +6671,50 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
     attrs = sysdb_new_attrs(test_ctx);
-    fail_unless(attrs != NULL, "sysdb_new_attrs failed.\n");
+    ck_assert_msg(attrs != NULL, "sysdb_new_attrs failed.\n");
 
     ret = sysdb_attrs_add_string(attrs, SYSDB_UPN, UPN_PRINC);
-    fail_unless(ret == EOK, "sysdb_attrs_add_string failed.");
+    ck_assert_msg(ret == EOK, "sysdb_attrs_add_string failed.");
 
     ret = sysdb_attrs_add_string(attrs, SYSDB_CANONICAL_UPN, UPN_CANON_PRINC);
-    fail_unless(ret == EOK, "sysdb_attrs_add_string failed.");
+    ck_assert_msg(ret == EOK, "sysdb_attrs_add_string failed.");
 
     ret = sysdb_store_user(test_ctx->domain,
                            UPN_USER_NAME, "x",
                            12345, 0, "UPN USER", "/home/upn_user",
                            "/bin/bash", NULL,
                            attrs, NULL, -1, 0);
-    fail_unless(ret == EOK, "Could not store user.");
+    ck_assert_msg(ret == EOK, "Could not store user.");
 
     ret = sysdb_search_user_by_upn(test_ctx, test_ctx->domain, false,
                                    "abc@def.ghi", NULL, &msg);
-    fail_unless(ret == ENOENT,
+    ck_assert_msg(ret == ENOENT,
                 "sysdb_search_user_by_upn failed with non-existing UPN.");
 
     ret = sysdb_search_user_by_upn(test_ctx, test_ctx->domain, false,
                                    UPN_PRINC, NULL, &msg);
-    fail_unless(ret == EOK, "sysdb_search_user_by_upn failed.");
+    ck_assert_msg(ret == EOK, "sysdb_search_user_by_upn failed.");
 
     str = ldb_msg_find_attr_as_string(msg, SYSDB_NAME, NULL);
-    fail_unless(str != NULL, "ldb_msg_find_attr_as_string failed.");
-    fail_unless(strcmp(str, UPN_USER_NAME) == 0, "Expected [%s], got [%s].",
+    ck_assert_msg(str != NULL, "ldb_msg_find_attr_as_string failed.");
+    ck_assert_msg(strcmp(str, UPN_USER_NAME) == 0, "Expected [%s], got [%s].",
                                                  UPN_USER_NAME, str);
 
     str = ldb_msg_find_attr_as_string(msg, SYSDB_UPN, NULL);
-    fail_unless(str != NULL, "ldb_msg_find_attr_as_string failed.");
-    fail_unless(strcmp(str, UPN_PRINC) == 0,
+    ck_assert_msg(str != NULL, "ldb_msg_find_attr_as_string failed.");
+    ck_assert_msg(strcmp(str, UPN_PRINC) == 0,
                 "Expected [%s], got [%s].", UPN_PRINC, str);
 
     /* check if input is sanitized */
     ret = sysdb_search_user_by_upn(test_ctx, test_ctx->domain, false,
                                    "abc@def.ghi)(name="UPN_USER_NAME")(abc=xyz",
                                    NULL, &msg);
-    fail_unless(ret == ENOENT,
+    ck_assert_msg(ret == ENOENT,
                 "sysdb_search_user_by_upn failed with un-sanitized input.");
 
     talloc_free(test_ctx);
@@ -6731,22 +6731,22 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
     ret = sysdb_search_user_by_upn(test_ctx, test_ctx->domain, false,
                                    UPN_PRINC_WRONG_CASE, NULL, &msg);
-    fail_unless(ret == EOK, "sysdb_search_user_by_upn failed.");
+    ck_assert_msg(ret == EOK, "sysdb_search_user_by_upn failed.");
 
     str = ldb_msg_find_attr_as_string(msg, SYSDB_NAME, NULL);
-    fail_unless(str != NULL, "ldb_msg_find_attr_as_string failed.");
-    fail_unless(strcmp(str, UPN_USER_NAME) == 0, "Expected [%s], got [%s].",
+    ck_assert_msg(str != NULL, "ldb_msg_find_attr_as_string failed.");
+    ck_assert_msg(strcmp(str, UPN_USER_NAME) == 0, "Expected [%s], got [%s].",
                                                  UPN_USER_NAME, str);
 
     str = ldb_msg_find_attr_as_string(msg, SYSDB_UPN, NULL);
-    fail_unless(str != NULL, "ldb_msg_find_attr_as_string failed.");
-    fail_unless(strcmp(str, UPN_PRINC) == 0,
+    ck_assert_msg(str != NULL, "ldb_msg_find_attr_as_string failed.");
+    ck_assert_msg(strcmp(str, UPN_PRINC) == 0,
                 "Expected [%s], got [%s].", UPN_PRINC, str);
 
     talloc_free(test_ctx);
@@ -6763,27 +6763,27 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
     ret = sysdb_search_user_by_upn(test_ctx, test_ctx->domain, false,
                                    UPN_CANON_PRINC, NULL, &msg);
-    fail_unless(ret == EOK, "sysdb_search_user_by_upn failed.");
+    ck_assert_msg(ret == EOK, "sysdb_search_user_by_upn failed.");
 
     str = ldb_msg_find_attr_as_string(msg, SYSDB_NAME, NULL);
-    fail_unless(str != NULL, "ldb_msg_find_attr_as_string failed.");
-    fail_unless(strcmp(str, UPN_USER_NAME) == 0, "Expected [%s], got [%s].",
+    ck_assert_msg(str != NULL, "ldb_msg_find_attr_as_string failed.");
+    ck_assert_msg(strcmp(str, UPN_USER_NAME) == 0, "Expected [%s], got [%s].",
                                                  UPN_USER_NAME, str);
 
     str = ldb_msg_find_attr_as_string(msg, SYSDB_UPN, NULL);
-    fail_unless(str != NULL, "ldb_msg_find_attr_as_string failed.");
-    fail_unless(strcmp(str, UPN_PRINC) == 0,
+    ck_assert_msg(str != NULL, "ldb_msg_find_attr_as_string failed.");
+    ck_assert_msg(strcmp(str, UPN_PRINC) == 0,
                 "Expected [%s], got [%s].", UPN_PRINC, str);
 
     str = ldb_msg_find_attr_as_string(msg, SYSDB_CANONICAL_UPN, NULL);
-    fail_unless(str != NULL, "ldb_msg_find_attr_as_string failed.");
-    fail_unless(strcmp(str, UPN_CANON_PRINC) == 0,
+    ck_assert_msg(str != NULL, "ldb_msg_find_attr_as_string failed.");
+    ck_assert_msg(strcmp(str, UPN_CANON_PRINC) == 0,
                 "Expected [%s], got [%s].", UPN_CANON_PRINC, str);
 
     talloc_free(test_ctx);
@@ -6800,27 +6800,27 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
     ret = sysdb_search_user_by_upn(test_ctx, test_ctx->domain, false,
                                    UPN_CANON_PRINC_WRONG_CASE, NULL, &msg);
-    fail_unless(ret == EOK, "sysdb_search_user_by_upn failed.");
+    ck_assert_msg(ret == EOK, "sysdb_search_user_by_upn failed.");
 
     str = ldb_msg_find_attr_as_string(msg, SYSDB_NAME, NULL);
-    fail_unless(str != NULL, "ldb_msg_find_attr_as_string failed.");
-    fail_unless(strcmp(str, UPN_USER_NAME) == 0, "Expected [%s], got [%s].",
+    ck_assert_msg(str != NULL, "ldb_msg_find_attr_as_string failed.");
+    ck_assert_msg(strcmp(str, UPN_USER_NAME) == 0, "Expected [%s], got [%s].",
                                                  UPN_USER_NAME, str);
 
     str = ldb_msg_find_attr_as_string(msg, SYSDB_UPN, NULL);
-    fail_unless(str != NULL, "ldb_msg_find_attr_as_string failed.");
-    fail_unless(strcmp(str, UPN_PRINC) == 0,
+    ck_assert_msg(str != NULL, "ldb_msg_find_attr_as_string failed.");
+    ck_assert_msg(strcmp(str, UPN_PRINC) == 0,
                 "Expected [%s], got [%s].", UPN_PRINC, str);
 
     str = ldb_msg_find_attr_as_string(msg, SYSDB_CANONICAL_UPN, NULL);
-    fail_unless(str != NULL, "ldb_msg_find_attr_as_string failed.");
-    fail_unless(strcmp(str, UPN_CANON_PRINC) == 0,
+    ck_assert_msg(str != NULL, "ldb_msg_find_attr_as_string failed.");
+    ck_assert_msg(strcmp(str, UPN_CANON_PRINC) == 0,
                 "Expected [%s], got [%s].", UPN_CANON_PRINC, str);
 
     talloc_free(test_ctx);
@@ -6838,45 +6838,45 @@
     /* Setup */
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
     attrs = sysdb_new_attrs(test_ctx);
-    fail_unless(attrs != NULL, "sysdb_new_attrs failed.\n");
+    ck_assert_msg(attrs != NULL, "sysdb_new_attrs failed.\n");
 
     ret = sysdb_attrs_add_string(attrs, SYSDB_UPN, UPN_CANON_PRINC);
-    fail_unless(ret == EOK, "sysdb_attrs_add_string failed.");
+    ck_assert_msg(ret == EOK, "sysdb_attrs_add_string failed.");
 
     ret = sysdb_store_user(test_ctx->domain,
                            UPN_USER_NAME"_dup", "x",
                            23456, 0, "UPN USER DUP", "/home/upn_user_dup",
                            "/bin/bash", NULL,
                            attrs, NULL, -1, 0);
-    fail_unless(ret == EOK, "Could not store user.");
+    ck_assert_msg(ret == EOK, "Could not store user.");
 
     ret = sysdb_search_user_by_upn(test_ctx, test_ctx->domain, false,
                                    UPN_CANON_PRINC, NULL, &msg);
-    fail_unless(ret == EINVAL,
+    ck_assert_msg(ret == EINVAL,
                 "sysdb_search_user_by_upn failed for duplicated UPN.");
 
     ret = sysdb_search_user_by_upn(test_ctx, test_ctx->domain, false,
                                    UPN_PRINC, NULL, &msg);
-    fail_unless(ret == EOK, "sysdb_search_user_by_upn failed.");
+    ck_assert_msg(ret == EOK, "sysdb_search_user_by_upn failed.");
 
     str = ldb_msg_find_attr_as_string(msg, SYSDB_NAME, NULL);
-    fail_unless(str != NULL, "ldb_msg_find_attr_as_string failed.");
-    fail_unless(strcmp(str, UPN_USER_NAME) == 0, "Expected [%s], got [%s].",
+    ck_assert_msg(str != NULL, "ldb_msg_find_attr_as_string failed.");
+    ck_assert_msg(strcmp(str, UPN_USER_NAME) == 0, "Expected [%s], got [%s].",
                                                  UPN_USER_NAME, str);
 
     str = ldb_msg_find_attr_as_string(msg, SYSDB_UPN, NULL);
-    fail_unless(str != NULL, "ldb_msg_find_attr_as_string failed.");
-    fail_unless(strcmp(str, UPN_PRINC) == 0,
+    ck_assert_msg(str != NULL, "ldb_msg_find_attr_as_string failed.");
+    ck_assert_msg(strcmp(str, UPN_PRINC) == 0,
                 "Expected [%s], got [%s].", UPN_PRINC, str);
 
     str = ldb_msg_find_attr_as_string(msg, SYSDB_CANONICAL_UPN, NULL);
-    fail_unless(str != NULL, "ldb_msg_find_attr_as_string failed.");
-    fail_unless(strcmp(str, UPN_CANON_PRINC) == 0,
+    ck_assert_msg(str != NULL, "ldb_msg_find_attr_as_string failed.");
+    ck_assert_msg(strcmp(str, UPN_CANON_PRINC) == 0,
                 "Expected [%s], got [%s].", UPN_CANON_PRINC, str);
 
     talloc_free(test_ctx);
@@ -6893,29 +6893,29 @@
     static const char *test_guid = "3610EDA5-77EF-11D2-8DC5-00C04FA31A66";
 
     ret = setup_sysdb_tests(&test_ctx);
-    fail_if(ret != EOK, "Could not set up the test");
+    sss_ck_fail_if_msg(ret != EOK, "Could not set up the test");
 
     ret = sysdb_gpo_get_gpo_by_guid(test_ctx, test_ctx->domain,
                                     test_guid,
                                     &result);
-    fail_if(ret != ENOENT, "GPO present in cache before store op");
+    sss_ck_fail_if_msg(ret != ENOENT, "GPO present in cache before store op");
 
     ret = sysdb_gpo_get_gpos(test_ctx, test_ctx->domain, &result);
-    fail_if(ret != ENOENT, "GPO present in cache before store op");
+    sss_ck_fail_if_msg(ret != ENOENT, "GPO present in cache before store op");
 
     ret = sysdb_gpo_store_gpo(test_ctx->domain,
                               test_guid, 1, 5, 0);
-    fail_if(ret != EOK, "Could not store a test GPO");
+    sss_ck_fail_if_msg(ret != EOK, "Could not store a test GPO");
 
     ret = sysdb_gpo_get_gpos(test_ctx, test_ctx->domain, &result);
-    fail_if(ret != EOK, "GPOs not in cache after store op");
+    sss_ck_fail_if_msg(ret != EOK, "GPOs not in cache after store op");
     fail_if(result == NULL);
     fail_if(result->count != 1);
 
     result = NULL;
     ret = sysdb_gpo_get_gpo_by_guid(test_ctx, test_ctx->domain,
                                     test_guid, &result);
-    fail_if(ret != EOK, "GPO not in cache after store op");
+    sss_ck_fail_if_msg(ret != EOK, "GPO not in cache after store op");
     fail_if(result == NULL);
     fail_if(result->count != 1);
 
@@ -6940,11 +6940,11 @@
     static const char *test_guid = "3610EDA5-77EF-11D2-8DC5-00C04FA31A66";
 
     ret = setup_sysdb_tests(&test_ctx);
-    fail_if(ret != EOK, "Could not setup the test");
+    sss_ck_fail_if_msg(ret != EOK, "Could not setup the test");
 
     ret = sysdb_gpo_get_gpo_by_guid(test_ctx, test_ctx->domain,
                                     test_guid, &result);
-    fail_if(ret != EOK, "GPO not in cache after store op");
+    sss_ck_fail_if_msg(ret != EOK, "GPO not in cache after store op");
     fail_if(result == NULL);
     fail_if(result->count != 1);
 
@@ -6959,11 +6959,11 @@
     /* Modify the version */
     ret = sysdb_gpo_store_gpo(test_ctx->domain,
                               test_guid, 2, 5, 0);
-    fail_if(ret != EOK, "Could not store a test GPO");
+    sss_ck_fail_if_msg(ret != EOK, "Could not store a test GPO");
 
     ret = sysdb_gpo_get_gpo_by_guid(test_ctx, test_ctx->domain,
                                     test_guid, &result);
-    fail_if(ret != EOK, "GPO not in cache after modify op");
+    sss_ck_fail_if_msg(ret != EOK, "GPO not in cache after modify op");
     fail_if(result == NULL);
     fail_if(result->count != 1);
 
@@ -6987,7 +6987,7 @@
     const char *value = NULL;
 
     ret = setup_sysdb_tests(&test_ctx);
-    fail_if(ret != EOK, "Could not setup the test");
+    sss_ck_fail_if_msg(ret != EOK, "Could not setup the test");
 
     /* No result in cache */
     ret = sysdb_gpo_get_gpo_result_setting(test_ctx, test_ctx->domain,
@@ -7115,7 +7115,7 @@
     char *filter;
 
     ret = setup_sysdb_tests(&test_ctx);
-    fail_if(ret != EOK, "Could not setup the test");
+    sss_ck_fail_if_msg(ret != EOK, "Could not setup the test");
 
     /* Add something to database to test against */
     data = test_data_new_user(test_ctx, 2000);
--- a/src/tests/util-tests.c
+++ b/src/tests/util-tests.c
@@ -48,32 +48,32 @@
     char **list = NULL;
 
     ret = add_string_to_list(NULL, NULL, NULL);
-    fail_unless(ret == EINVAL, "NULL input accepted");
+    ck_assert_msg(ret == EINVAL, "NULL input accepted");
 
     ret = add_string_to_list(global_talloc_context, "ABC", &list);
-    fail_unless(ret == EOK, "Adding string to non-existing list failed.");
-    fail_unless(list != NULL, "No new list created.");
-    fail_unless(list[0] != NULL, "String not added to new list.");
-    fail_unless(strcmp(list[0], "ABC") == 0,
+    ck_assert_msg(ret == EOK, "Adding string to non-existing list failed.");
+    ck_assert_msg(list != NULL, "No new list created.");
+    ck_assert_msg(list[0] != NULL, "String not added to new list.");
+    ck_assert_msg(strcmp(list[0], "ABC") == 0,
                 "Wrong string added to newly created list.");
-    fail_unless(list[1] == NULL,
+    ck_assert_msg(list[1] == NULL,
                 "Missing terminating NULL in newly created list.");
 
     ret = add_string_to_list(global_talloc_context, "DEF", &list);
-    fail_unless(ret == EOK, "Adding string to list failed.");
-    fail_unless(list != NULL, "No list returned.");
-    fail_unless(strcmp(list[0], "ABC") == 0, "Wrong first string in new list.");
-    fail_unless(strcmp(list[1], "DEF") == 0, "Wrong string added to list.");
-    fail_unless(list[2] == NULL, "Missing terminating NULL.");
+    ck_assert_msg(ret == EOK, "Adding string to list failed.");
+    ck_assert_msg(list != NULL, "No list returned.");
+    ck_assert_msg(strcmp(list[0], "ABC") == 0, "Wrong first string in new list.");
+    ck_assert_msg(strcmp(list[1], "DEF") == 0, "Wrong string added to list.");
+    ck_assert_msg(list[2] == NULL, "Missing terminating NULL.");
 
     list[0] = NULL;
     ret = add_string_to_list(global_talloc_context, "ABC", &list);
-    fail_unless(ret == EOK, "Adding string to empty list failed.");
-    fail_unless(list != NULL, "No list returned.");
-    fail_unless(list[0] != NULL, "String not added to empty list.");
-    fail_unless(strcmp(list[0], "ABC") == 0,
+    ck_assert_msg(ret == EOK, "Adding string to empty list failed.");
+    ck_assert_msg(list != NULL, "No list returned.");
+    ck_assert_msg(list[0] != NULL, "String not added to empty list.");
+    ck_assert_msg(strcmp(list[0], "ABC") == 0,
                 "Wrong string added to empty list.");
-    fail_unless(list[1] == NULL,
+    ck_assert_msg(list[1] == NULL,
                 "Missing terminating NULL in newly created list.");
 
     talloc_free(list);
@@ -90,31 +90,31 @@
                     NULL};
 
     is_in = string_in_list(NULL, NULL, false);
-    fail_unless(!is_in, "NULL string is in NULL list.");
+    ck_assert_msg(!is_in, "NULL string is in NULL list.");
 
     is_in = string_in_list(NULL, empty_list, false);
-    fail_unless(!is_in, "NULL string is in empty list.");
+    ck_assert_msg(!is_in, "NULL string is in empty list.");
 
     is_in = string_in_list(NULL, list, false);
-    fail_unless(!is_in, "NULL string is in list.");
+    ck_assert_msg(!is_in, "NULL string is in list.");
 
     is_in = string_in_list("ABC", NULL, false);
-    fail_unless(!is_in, "String is in NULL list.");
+    ck_assert_msg(!is_in, "String is in NULL list.");
 
     is_in = string_in_list("ABC", empty_list, false);
-    fail_unless(!is_in, "String is in empty list.");
+    ck_assert_msg(!is_in, "String is in empty list.");
 
     is_in = string_in_list("ABC", list, false);
-    fail_unless(is_in, "String is not list.");
+    ck_assert_msg(is_in, "String is not list.");
 
     is_in = string_in_list("abc", list, false);
-    fail_unless(is_in, "String is not case in-sensitive list.");
+    ck_assert_msg(is_in, "String is not case in-sensitive list.");
 
     is_in = string_in_list("abc", list, true);
-    fail_unless(!is_in, "Wrong string found in case sensitive list.");
+    ck_assert_msg(!is_in, "Wrong string found in case sensitive list.");
 
     is_in = string_in_list("123", list, false);
-    fail_unless(!is_in, "Wrong string found in list.");
+    ck_assert_msg(!is_in, "Wrong string found in list.");
 
 }
 END_TEST
@@ -168,15 +168,15 @@
 
     for (i=0; tc[i].argstr != NULL; i++) {
         parsed = parse_args(tc[i].argstr);
-        fail_if(parsed == NULL && tc[i].parsed != NULL,
+        sss_ck_fail_if_msg(parsed == NULL && tc[i].parsed != NULL,
                 "Could not parse correct %d argument string '%s'\n",
                 i, tc[i].argstr);
 
         ret = diff_string_lists(test_ctx, parsed, discard_const(tc[i].parsed),
                                 &only_ret, &only_exp, &both);
-        fail_unless(ret == EOK, "diff_string_lists returned error [%d]", ret);
-        fail_unless(only_ret[0] == NULL, "The parser returned more data than expected\n");
-        fail_unless(only_exp[0] == NULL, "The parser returned less data than expected\n");
+        ck_assert_msg(ret == EOK, "diff_string_lists returned error [%d]", ret);
+        ck_assert_msg(only_ret[0] == NULL, "The parser returned more data than expected\n");
+        ck_assert_msg(only_exp[0] == NULL, "The parser returned less data than expected\n");
 
         if (parsed) {
             int parsed_len;
@@ -185,7 +185,7 @@
             for (parsed_len=0; parsed[parsed_len]; ++parsed_len);
             for (expected_len=0; tc[i].parsed[expected_len]; ++expected_len);
 
-            fail_unless(parsed_len == expected_len,
+            ck_assert_msg(parsed_len == expected_len,
                         "Test %d: length of 1st array [%d] != length of 2nd "
                         "array[%d]\n", i, parsed_len, expected_len);
 
@@ -228,14 +228,14 @@
                             l1, l2,
                             &only_l1, &only_l2, &both);
 
-    fail_unless(ret == EOK, "diff_string_lists returned error [%d]", ret);
-    fail_unless(strcmp(only_l1[0], "a") == 0, "Missing \"a\" from only_l1");
-    fail_unless(only_l1[1] == NULL, "only_l1 not NULL-terminated");
-    fail_unless(strcmp(only_l2[0], "d") == 0, "Missing \"d\" from only_l2");
-    fail_unless(only_l2[1] == NULL, "only_l2 not NULL-terminated");
-    fail_unless(strcmp(both[0], "c") == 0, "Missing \"c\" from both");
-    fail_unless(strcmp(both[1], "b") == 0, "Missing \"b\" from both");
-    fail_unless(both[2] == NULL, "both not NULL-terminated");
+    ck_assert_msg(ret == EOK, "diff_string_lists returned error [%d]", ret);
+    ck_assert_msg(strcmp(only_l1[0], "a") == 0, "Missing \"a\" from only_l1");
+    ck_assert_msg(only_l1[1] == NULL, "only_l1 not NULL-terminated");
+    ck_assert_msg(strcmp(only_l2[0], "d") == 0, "Missing \"d\" from only_l2");
+    ck_assert_msg(only_l2[1] == NULL, "only_l2 not NULL-terminated");
+    ck_assert_msg(strcmp(both[0], "c") == 0, "Missing \"c\" from both");
+    ck_assert_msg(strcmp(both[1], "b") == 0, "Missing \"b\" from both");
+    ck_assert_msg(both[2] == NULL, "both not NULL-terminated");
 
     talloc_zfree(only_l1);
     talloc_zfree(only_l2);
@@ -246,12 +246,12 @@
                             l1, l2,
                             &only_l1, &only_l2, NULL);
 
-    fail_unless(ret == EOK, "diff_string_lists returned error [%d]", ret);
-    fail_unless(strcmp(only_l1[0], "a") == 0, "Missing \"a\" from only_l1");
-    fail_unless(only_l1[1] == NULL, "only_l1 not NULL-terminated");
-    fail_unless(strcmp(only_l2[0], "d") == 0, "Missing \"d\" from only_l2");
-    fail_unless(only_l2[1] == NULL, "only_l2 not NULL-terminated");
-    fail_unless(both == NULL, "Nothing returned to both");
+    ck_assert_msg(ret == EOK, "diff_string_lists returned error [%d]", ret);
+    ck_assert_msg(strcmp(only_l1[0], "a") == 0, "Missing \"a\" from only_l1");
+    ck_assert_msg(only_l1[1] == NULL, "only_l1 not NULL-terminated");
+    ck_assert_msg(strcmp(only_l2[0], "d") == 0, "Missing \"d\" from only_l2");
+    ck_assert_msg(only_l2[1] == NULL, "only_l2 not NULL-terminated");
+    ck_assert_msg(both == NULL, "Nothing returned to both");
 
     talloc_zfree(only_l1);
     talloc_zfree(only_l2);
@@ -261,11 +261,11 @@
                             l1, l2,
                             &only_l1, NULL, NULL);
 
-    fail_unless(ret == EOK, "diff_string_lists returned error [%d]", ret);
-    fail_unless(strcmp(only_l1[0], "a") == 0, "Missing \"a\" from only_l1");
-    fail_unless(only_l1[1] == NULL, "only_l1 not NULL-terminated");
-    fail_unless(only_l2 == NULL, "Nothing returned to only_l2");
-    fail_unless(both == NULL, "Nothing returned to both");
+    ck_assert_msg(ret == EOK, "diff_string_lists returned error [%d]", ret);
+    ck_assert_msg(strcmp(only_l1[0], "a") == 0, "Missing \"a\" from only_l1");
+    ck_assert_msg(only_l1[1] == NULL, "only_l1 not NULL-terminated");
+    ck_assert_msg(only_l2 == NULL, "Nothing returned to only_l2");
+    ck_assert_msg(both == NULL, "Nothing returned to both");
 
     talloc_zfree(only_l1);
     talloc_zfree(only_l2);
@@ -275,11 +275,11 @@
                             l1, l2,
                             NULL, &only_l2, NULL);
 
-    fail_unless(ret == EOK, "diff_string_lists returned error [%d]", ret);
-    fail_unless(strcmp(only_l2[0], "d") == 0, "Missing \"d\" from only_l2");
-    fail_unless(only_l2[1] == NULL, "only_l2 not NULL-terminated");
-    fail_unless(only_l1 == NULL, "Nothing returned to only_l1");
-    fail_unless(both == NULL, "Nothing returned to both");
+    ck_assert_msg(ret == EOK, "diff_string_lists returned error [%d]", ret);
+    ck_assert_msg(strcmp(only_l2[0], "d") == 0, "Missing \"d\" from only_l2");
+    ck_assert_msg(only_l2[1] == NULL, "only_l2 not NULL-terminated");
+    ck_assert_msg(only_l1 == NULL, "Nothing returned to only_l1");
+    ck_assert_msg(both == NULL, "Nothing returned to both");
 
     talloc_zfree(only_l1);
     talloc_zfree(only_l2);
@@ -296,16 +296,16 @@
                             l1, l3,
                             &only_l1, &only_l2, &both);
 
-    fail_unless(ret == EOK, "diff_string_lists returned error [%d]", ret);
-    fail_unless(strcmp(only_l1[0], "a") == 0, "Missing \"a\" from only_l1");
-    fail_unless(strcmp(only_l1[1], "b") == 0, "Missing \"b\" from only_l1");
-    fail_unless(strcmp(only_l1[2], "c") == 0, "Missing \"c\" from only_l1");
-    fail_unless(only_l1[3] == NULL, "only_l1 not NULL-terminated");
-    fail_unless(strcmp(only_l2[0], "d") == 0, "Missing \"f\" from only_l2");
-    fail_unless(strcmp(only_l2[1], "e") == 0, "Missing \"e\" from only_l2");
-    fail_unless(strcmp(only_l2[2], "f") == 0, "Missing \"d\" from only_l2");
-    fail_unless(only_l2[3] == NULL, "only_l2 not NULL-terminated");
-    fail_unless(both[0] == NULL, "both should have zero entries");
+    ck_assert_msg(ret == EOK, "diff_string_lists returned error [%d]", ret);
+    ck_assert_msg(strcmp(only_l1[0], "a") == 0, "Missing \"a\" from only_l1");
+    ck_assert_msg(strcmp(only_l1[1], "b") == 0, "Missing \"b\" from only_l1");
+    ck_assert_msg(strcmp(only_l1[2], "c") == 0, "Missing \"c\" from only_l1");
+    ck_assert_msg(only_l1[3] == NULL, "only_l1 not NULL-terminated");
+    ck_assert_msg(strcmp(only_l2[0], "d") == 0, "Missing \"f\" from only_l2");
+    ck_assert_msg(strcmp(only_l2[1], "e") == 0, "Missing \"e\" from only_l2");
+    ck_assert_msg(strcmp(only_l2[2], "f") == 0, "Missing \"d\" from only_l2");
+    ck_assert_msg(only_l2[3] == NULL, "only_l2 not NULL-terminated");
+    ck_assert_msg(both[0] == NULL, "both should have zero entries");
 
     talloc_zfree(only_l1);
     talloc_zfree(only_l2);
@@ -316,13 +316,13 @@
                             l1, l1,
                             &only_l1, &only_l2, &both);
 
-    fail_unless(ret == EOK, "diff_string_lists returned error [%d]", ret);
-    fail_unless(only_l1[0] == NULL, "only_l1 should have zero entries");
-    fail_unless(only_l2[0] == NULL, "only_l2 should have zero entries");
-    fail_unless(strcmp(both[0], "a") == 0, "Missing \"a\" from both");
-    fail_unless(strcmp(both[1], "b") == 0, "Missing \"b\" from both");
-    fail_unless(strcmp(both[2], "c") == 0, "Missing \"c\" from both");
-    fail_unless(both[3] == NULL, "both is not NULL-terminated");
+    ck_assert_msg(ret == EOK, "diff_string_lists returned error [%d]", ret);
+    ck_assert_msg(only_l1[0] == NULL, "only_l1 should have zero entries");
+    ck_assert_msg(only_l2[0] == NULL, "only_l2 should have zero entries");
+    ck_assert_msg(strcmp(both[0], "a") == 0, "Missing \"a\" from both");
+    ck_assert_msg(strcmp(both[1], "b") == 0, "Missing \"b\" from both");
+    ck_assert_msg(strcmp(both[2], "c") == 0, "Missing \"c\" from both");
+    ck_assert_msg(both[3] == NULL, "both is not NULL-terminated");
 
     talloc_zfree(only_l1);
     talloc_zfree(only_l2);
@@ -333,13 +333,13 @@
                             l1, NULL,
                             &only_l1, &only_l2, &both);
 
-    fail_unless(ret == EOK, "diff_string_lists returned error [%d]", ret);
-    fail_unless(strcmp(only_l1[0], "a") == 0, "Missing \"a\" from only_l1");
-    fail_unless(strcmp(only_l1[1], "b") == 0, "Missing \"b\" from only_l1");
-    fail_unless(strcmp(only_l1[2], "c") == 0, "Missing \"c\" from only_l1");
-    fail_unless(only_l1[3] == NULL, "only_l1 not NULL-terminated");
-    fail_unless(only_l2[0] == NULL, "only_l2 should have zero entries");
-    fail_unless(both[0] == NULL, "both should have zero entries");
+    ck_assert_msg(ret == EOK, "diff_string_lists returned error [%d]", ret);
+    ck_assert_msg(strcmp(only_l1[0], "a") == 0, "Missing \"a\" from only_l1");
+    ck_assert_msg(strcmp(only_l1[1], "b") == 0, "Missing \"b\" from only_l1");
+    ck_assert_msg(strcmp(only_l1[2], "c") == 0, "Missing \"c\" from only_l1");
+    ck_assert_msg(only_l1[3] == NULL, "only_l1 not NULL-terminated");
+    ck_assert_msg(only_l2[0] == NULL, "only_l2 should have zero entries");
+    ck_assert_msg(both[0] == NULL, "both should have zero entries");
 
     talloc_free(test_ctx);
 }
@@ -352,85 +352,85 @@
     char *sanitized = NULL;
 
     TALLOC_CTX *test_ctx = talloc_new(NULL);
-    fail_if (test_ctx == NULL, "Out of memory");
+    sss_ck_fail_if_msg(test_ctx == NULL, "Out of memory");
 
     const char no_specials[] = "username";
     ret = sss_filter_sanitize(test_ctx, no_specials, &sanitized);
-    fail_unless(ret == EOK, "no_specials error [%d][%s]",
+    ck_assert_msg(ret == EOK, "no_specials error [%d][%s]",
                 ret, strerror(ret));
-    fail_unless(strcmp(no_specials, sanitized)==0,
+    ck_assert_msg(strcmp(no_specials, sanitized)==0,
                 "Expected [%s], got [%s]",
                 no_specials, sanitized);
 
     const char has_asterisk[] = "*username";
     const char has_asterisk_expected[] = "\\2ausername";
     ret = sss_filter_sanitize(test_ctx, has_asterisk, &sanitized);
-    fail_unless(ret == EOK, "has_asterisk error [%d][%s]",
+    ck_assert_msg(ret == EOK, "has_asterisk error [%d][%s]",
                 ret, strerror(ret));
-    fail_unless(strcmp(has_asterisk_expected, sanitized)==0,
+    ck_assert_msg(strcmp(has_asterisk_expected, sanitized)==0,
                 "Expected [%s], got [%s]",
                 has_asterisk_expected, sanitized);
 
     const char has_lparen[] = "user(name";
     const char has_lparen_expected[] = "user\\28name";
     ret = sss_filter_sanitize(test_ctx, has_lparen, &sanitized);
-    fail_unless(ret == EOK, "has_lparen error [%d][%s]",
+    ck_assert_msg(ret == EOK, "has_lparen error [%d][%s]",
                 ret, strerror(ret));
-    fail_unless(strcmp(has_lparen_expected, sanitized)==0,
+    ck_assert_msg(strcmp(has_lparen_expected, sanitized)==0,
                 "Expected [%s], got [%s]",
                 has_lparen_expected, sanitized);
 
     const char has_rparen[] = "user)name";
     const char has_rparen_expected[] = "user\\29name";
     ret = sss_filter_sanitize(test_ctx, has_rparen, &sanitized);
-    fail_unless(ret == EOK, "has_rparen error [%d][%s]",
+    ck_assert_msg(ret == EOK, "has_rparen error [%d][%s]",
                 ret, strerror(ret));
-    fail_unless(strcmp(has_rparen_expected, sanitized)==0,
+    ck_assert_msg(strcmp(has_rparen_expected, sanitized)==0,
                 "Expected [%s], got [%s]",
                 has_rparen_expected, sanitized);
 
     const char has_backslash[] = "username\\";
     const char has_backslash_expected[] = "username\\5c";
     ret = sss_filter_sanitize(test_ctx, has_backslash, &sanitized);
-    fail_unless(ret == EOK, "has_backslash error [%d][%s]",
+    ck_assert_msg(ret == EOK, "has_backslash error [%d][%s]",
                 ret, strerror(ret));
-    fail_unless(strcmp(has_backslash_expected, sanitized)==0,
+    ck_assert_msg(strcmp(has_backslash_expected, sanitized)==0,
                 "Expected [%s], got [%s]",
                 has_backslash_expected, sanitized);
 
     const char has_all[] = "\\(user)*name";
     const char has_all_expected[] = "\\5c\\28user\\29\\2aname";
     ret = sss_filter_sanitize(test_ctx, has_all, &sanitized);
-    fail_unless(ret == EOK, "has_all error [%d][%s]",
+    ck_assert_msg(ret == EOK, "has_all error [%d][%s]",
                 ret, strerror(ret));
-    fail_unless(strcmp(has_all_expected, sanitized)==0,
+    ck_assert_msg(strcmp(has_all_expected, sanitized)==0,
                 "Expected [%s], got [%s]",
                 has_all_expected, sanitized);
 
     /* Input is reused from previous test - "\\(user)*name" */
     const char has_all_allow_asterisk_expected[] = "\\5c\\28user\\29*name";
     ret = sss_filter_sanitize_ex(test_ctx, has_all, &sanitized, "*");
-    fail_unless(ret == EOK, "has_all error [%d][%s]",
+    ck_assert_msg(ret == EOK, "has_all error [%d][%s]",
                 ret, strerror(ret));
-    fail_unless(strcmp(has_all_allow_asterisk_expected, sanitized)==0,
+    ck_assert_msg(strcmp(has_all_allow_asterisk_expected, sanitized)==0,
                 "Expected [%s], got [%s]",
                 has_all_expected, sanitized);
 
     const char has_new_line[] = "user\nname";
     const char has_new_line_expected[] = "user\\0aname";
     ret = sss_filter_sanitize(test_ctx, has_new_line, &sanitized);
-    fail_unless(ret == EOK, "has_new_line error [%d][%s]",
+    ck_assert_msg(ret == EOK, "has_new_line error [%d][%s]",
                 ret, strerror(ret));
-    fail_unless(strcmp(has_new_line_expected, sanitized) == 0,
+    ck_assert_msg(strcmp(has_new_line_expected, sanitized) == 0,
                 "Expected [%s], got [%s]",
                 has_new_line_expected, sanitized);
 
     const char has_carriage_ret[] = "user\rname";
     const char has_carriage_ret_expected[] = "user\\0dname";
     ret = sss_filter_sanitize(test_ctx, has_carriage_ret, &sanitized);
-    fail_unless(ret == EOK, "has_carriage_ret error [%d][%s]",
+    ck_assert_msg(ret == EOK, "has_carriage_ret error [%d][%s]",
                 ret, strerror(ret));
-    fail_unless(strcmp(has_carriage_ret_expected, sanitized) == 0,
+    ck_assert_msg(strcmp(has_carriage_ret_expected, sanitized) == 0,
                 "Expected [%s], got [%s]",
                 has_carriage_ret_expected, sanitized);
 
@@ -460,15 +460,15 @@
 
 START_TEST(test_size_t_overflow)
 {
-    fail_unless(!SIZE_T_OVERFLOW(1, 1), "unexpected overflow");
-    fail_unless(!SIZE_T_OVERFLOW(SIZE_MAX, 0), "unexpected overflow");
-    fail_unless(!SIZE_T_OVERFLOW(SIZE_MAX-10, 10), "unexpected overflow");
-    fail_unless(SIZE_T_OVERFLOW(SIZE_MAX, 1), "overflow not detected");
-    fail_unless(SIZE_T_OVERFLOW(SIZE_MAX, SIZE_MAX),
+    ck_assert_msg(!SIZE_T_OVERFLOW(1, 1), "unexpected overflow");
+    ck_assert_msg(!SIZE_T_OVERFLOW(SIZE_MAX, 0), "unexpected overflow");
+    ck_assert_msg(!SIZE_T_OVERFLOW(SIZE_MAX-10, 10), "unexpected overflow");
+    ck_assert_msg(SIZE_T_OVERFLOW(SIZE_MAX, 1), "overflow not detected");
+    ck_assert_msg(SIZE_T_OVERFLOW(SIZE_MAX, SIZE_MAX),
                 "overflow not detected");
-    fail_unless(SIZE_T_OVERFLOW(SIZE_MAX, ULLONG_MAX),
+    ck_assert_msg(SIZE_T_OVERFLOW(SIZE_MAX, ULLONG_MAX),
                 "overflow not detected");
-    fail_unless(SIZE_T_OVERFLOW(SIZE_MAX, -10), "overflow not detected");
+    ck_assert_msg(SIZE_T_OVERFLOW(SIZE_MAX, -10), "overflow not detected");
 }
 END_TEST
 
@@ -533,13 +533,13 @@
     errno_t ret;
 
     ret = sss_utf8_case_eq(munchen_utf8_upcase, munchen_utf8_lowcase);
-    fail_unless(ret == EOK, "Latin 1 Supplement comparison failed\n");
+    ck_assert_msg(ret == EOK, "Latin 1 Supplement comparison failed\n");
 
     ret = sss_utf8_case_eq(czech_utf8_upcase, czech_utf8_lowcase);
-    fail_unless(ret == EOK, "Latin Extended A comparison failed\n");
+    ck_assert_msg(ret == EOK, "Latin Extended A comparison failed\n");
 
     ret = sss_utf8_case_eq(czech_utf8_upcase, czech_utf8_lowcase_neg);
-    fail_if(ret == EOK, "Negative test succeeded\n");
+    sss_ck_fail_if_msg(ret == EOK, "Negative test succeeded\n");
 }
 END_TEST
 
@@ -550,10 +550,10 @@
     bool ret;
 
     ret = sss_utf8_check(valid, strlen((const char *) valid));
-    fail_unless(ret == true, "Positive test failed\n");
+    ck_assert_msg(ret == true, "Positive test failed\n");
 
     ret = sss_utf8_check((const uint8_t *) invalid, strlen(invalid));
-    fail_unless(ret == false, "Negative test succeeded\n");
+    ck_assert_msg(ret == false, "Negative test succeeded\n");
 }
 END_TEST
 
@@ -609,13 +609,13 @@
     mode_t old_umask;
 
     filename = strdup(FILENAME_TEMPLATE);
-    fail_unless(filename != NULL, "strdup failed");
+    ck_assert_msg(filename != NULL, "strdup failed");
 
     atio_fd = -1;
     old_umask = umask(SSS_DFL_UMASK);
     ret = mkstemp(filename);
     umask(old_umask);
-    fail_unless(ret != -1, "mkstemp failed [%d][%s]", errno, strerror(errno));
+    ck_assert_msg(ret != -1, "mkstemp failed [%d][%s]", errno, strerror(errno));
     atio_fd = ret;
 }
 
@@ -625,13 +625,13 @@
 
     if (atio_fd != -1) {
         ret = close(atio_fd);
-        fail_unless(ret == 0, "close failed [%d][%s]", errno, strerror(errno));
+        ck_assert_msg(ret == 0, "close failed [%d][%s]", errno, strerror(errno));
     }
 
-    fail_unless(filename != NULL, "unknown filename");
+    ck_assert_msg(filename != NULL, "unknown filename");
     ret = unlink(filename);
     free(filename);
-    fail_unless(ret == 0, "unlink failed [%d][%s]", errno, strerror(errno));
+    ck_assert_msg(ret == 0, "unlink failed [%d][%s]", errno, strerror(errno));
 }
 
 START_TEST(test_atomicio_read_from_file)
@@ -643,15 +643,15 @@
     errno_t ret;
 
     fd = open("/dev/zero", O_RDONLY);
-    fail_if(fd == -1, "Cannot open /dev/zero");
+    sss_ck_fail_if_msg(fd == -1, "Cannot open /dev/zero");
 
     errno = 0;
     numread = sss_atomic_read_s(fd, buf, bufsize);
     ret = errno;
 
-    fail_unless(ret == 0, "Error %d while reading\n", ret);
-    fail_unless(numread == bufsize,
-                "Read %d bytes expected %d\n", numread, bufsize);
+    ck_assert_msg(ret == 0, "Error %d while reading\n", ret);
+    ck_assert_msg(numread == bufsize,
+                "Read %ld bytes expected %ld\n", numread, bufsize);
     close(fd);
 }
 END_TEST
@@ -665,15 +665,15 @@
     ssize_t numread;
     errno_t ret;
 
-    fail_if(atio_fd < 0, "No fd to test?\n");
+    sss_ck_fail_if_msg(atio_fd < 0, "No fd to test?\n");
 
     errno = 0;
     numwritten = sss_atomic_write_s(atio_fd, wbuf, wsize);
     ret = errno;
 
-    fail_unless(ret == 0, "Error %d while writing\n", ret);
-    fail_unless(numwritten == wsize,
-                "Wrote %d bytes expected %d\n", numwritten, wsize);
+    ck_assert_msg(ret == 0, "Error %d while writing\n", ret);
+    ck_assert_msg(numwritten == wsize,
+                "Wrote %ld bytes expected %ld\n", numwritten, wsize);
 
     fsync(atio_fd);
     lseek(atio_fd, 0, SEEK_SET);
@@ -682,9 +682,9 @@
     numread = sss_atomic_read_s(atio_fd, rbuf, 64);
     ret = errno;
 
-    fail_unless(ret == 0, "Error %d while reading\n", ret);
-    fail_unless(numread == numwritten,
-                "Read %d bytes expected %d\n", numread, numwritten);
+    ck_assert_msg(ret == 0, "Error %d while reading\n", ret);
+    ck_assert_msg(numread == numwritten,
+                "Read %ld bytes expected %ld\n", numread, numwritten);
 }
 END_TEST
 
@@ -698,15 +698,15 @@
     ssize_t total;
     errno_t ret;
 
-    fail_if(atio_fd < 0, "No fd to test?\n");
+    sss_ck_fail_if_msg(atio_fd < 0, "No fd to test?\n");
 
     errno = 0;
     numwritten = sss_atomic_write_s(atio_fd, wbuf, wsize);
     ret = errno;
 
-    fail_unless(ret == 0, "Error %d while writing\n", ret);
-    fail_unless(numwritten == wsize,
-                "Wrote %d bytes expected %d\n", numwritten, wsize);
+    ck_assert_msg(ret == 0, "Error %d while writing\n", ret);
+    ck_assert_msg(numwritten == wsize,
+                "Wrote %ld bytes expected %ld\n", numwritten, wsize);
 
     fsync(atio_fd);
     lseek(atio_fd, 0, SEEK_SET);
@@ -717,13 +717,13 @@
         numread = sss_atomic_read_s(atio_fd, rbuf, 8);
         ret = errno;
 
-        fail_if(numread == -1, "Read error %d: %s\n", ret, strerror(ret));
+        sss_ck_fail_if_msg(numread == -1, "Read error %d: %s\n", ret, strerror(ret));
         total += numread;
     } while (numread != 0);
 
-    fail_unless(ret == 0, "Error %d while reading\n", ret);
-    fail_unless(total == numwritten,
-                "Read %d bytes expected %d\n", numread, numwritten);
+    ck_assert_msg(ret == 0, "Error %d while reading\n", ret);
+    ck_assert_msg(total == numwritten,
+                "Read %ld bytes expected %ld\n", numread, numwritten);
 }
 END_TEST
 
@@ -736,15 +736,15 @@
     ssize_t numread;
     errno_t ret;
 
-    fail_if(atio_fd < 0, "No fd to test?\n");
+    sss_ck_fail_if_msg(atio_fd < 0, "No fd to test?\n");
 
     errno = 0;
     numwritten = sss_atomic_write_s(atio_fd, wbuf, wsize);
     ret = errno;
 
-    fail_unless(ret == 0, "Error %d while writing\n", ret);
-    fail_unless(numwritten == wsize,
-                "Wrote %d bytes expected %d\n", numwritten, wsize);
+    ck_assert_msg(ret == 0, "Error %d while writing\n", ret);
+    ck_assert_msg(numwritten == wsize,
+                "Wrote %ld bytes expected %ld\n", numwritten, wsize);
 
     fsync(atio_fd);
     lseek(atio_fd, 0, SEEK_SET);
@@ -753,20 +753,20 @@
     numread = sss_atomic_read_s(atio_fd, rbuf, 9);
     ret = errno;
 
-    fail_unless(ret == 0, "Error %d while reading\n", ret);
-    fail_unless(numread == numwritten,
-                "Read %d bytes expected %d\n", numread, numwritten);
+    ck_assert_msg(ret == 0, "Error %d while reading\n", ret);
+    ck_assert_msg(numread == numwritten,
+                "Read %ld bytes expected %ld\n", numread, numwritten);
 
-    fail_unless(rbuf[8] == '\0', "String not NULL terminated?");
-    fail_unless(strcmp(wbuf, rbuf) == 0, "Read something else than wrote?");
+    ck_assert_msg(rbuf[8] == '\0', "String not NULL terminated?");
+    ck_assert_msg(strcmp(wbuf, rbuf) == 0, "Read something else than wrote?");
 
     /* We've reached end-of-file, next read must return 0 */
     errno = 0;
     numread = sss_atomic_read_s(atio_fd, rbuf, 9);
     ret = errno;
 
-    fail_unless(ret == 0, "Error %d while reading\n", ret);
-    fail_unless(numread == 0, "More data to read?");
+    ck_assert_msg(ret == 0, "Error %d while reading\n", ret);
+    ck_assert_msg(numread == 0, "More data to read?");
 }
 END_TEST
 
@@ -778,15 +778,15 @@
     errno_t ret;
 
     fd = open("/dev/null", O_RDONLY);
-    fail_if(fd == -1, "Cannot open /dev/null");
+    sss_ck_fail_if_msg(fd == -1, "Cannot open /dev/null");
 
     errno = 0;
     numread = sss_atomic_read_s(fd, buf, 64);
     ret = errno;
 
-    fail_unless(ret == 0, "Error %d while reading\n", ret);
-    fail_unless(numread == 0,
-                "Read %d bytes expected 0\n", numread);
+    ck_assert_msg(ret == 0, "Error %d while reading\n", ret);
+    ck_assert_msg(numread == 0,
+                "Read %ld bytes expected 0\n", numread);
     close(fd);
 }
 END_TEST
@@ -862,17 +862,17 @@
         ret = split_on_separator(mem, sts[a].input, ',', sts[a].trim,
                                  sts[a].skip_empty, &list, &size);
 
-        fail_unless(ret == sts[a].expected_ret,
+        ck_assert_msg(ret == sts[a].expected_ret,
                     "split_on_separator failed [%d]: %s\n", ret,
                     strerror(ret));
         if (ret) {
             continue;
         }
-        fail_unless(size == sts[a].expected_size, "Returned wrong size %d "
+        ck_assert_msg(size == sts[a].expected_size, "Returned wrong size %d "
                     "(expected %d).\n", size, sts[a].expected_size);
 
         for (i = 0; str_ref = sts[a].expected_list[i], str_out = list[i]; i++) {
-            fail_unless(strcmp(str_ref, str_out) == 0,
+            ck_assert_msg(strcmp(str_ref, str_out) == 0,
                         "Expected:%s Got:%s\n", str_ref, str_out);
         }
         talloc_free(list);
@@ -943,10 +943,10 @@
         /* fill sockaddr_in structure */
 
         ret = inet_pton(AF_INET, tst_data[a].str_ipaddr, &addr);
-        fail_if(ret != 1, "inet_pton failed.");
+        sss_ck_fail_if_msg(ret != 1, "inet_pton failed.");
 
         bret = check_ipv4_addr(&addr, tst_data[a].flags);
-        fail_unless(bret == tst_data[a].expected_ret,
+        ck_assert_msg(bret == tst_data[a].expected_ret,
                     "check_ipv4_addr failed (iteration %d)", a);
     }
 }
@@ -993,10 +993,10 @@
         /* fill sockaddr_in structure */
 
         ret = inet_pton(AF_INET6, tst_data[a].str_ipaddr, &addr);
-        fail_if(ret != 1, "inet_pton failed.");
+        sss_ck_fail_if_msg(ret != 1, "inet_pton failed.");
 
         bret = check_ipv6_addr(&addr, tst_data[a].flags);
-        fail_unless(bret == tst_data[a].expected_ret,
+        ck_assert_msg(bret == tst_data[a].expected_ret,
                     "check_ipv6_addr failed (iteration %d)", a);
 
     }
@@ -1023,7 +1023,7 @@
 
     for (i = 0; data[i].host != NULL; i++) {
         ret = is_host_in_domain(data[i].host, data[i].domain);
-        fail_if(ret != data[i].expected, "Host: %s, Domain: %s, Expected: %d, "
+        sss_ck_fail_if_msg(ret != data[i].expected, "Host: %s, Domain: %s, Expected: %d, "
                 "Got: %d\n", data[i].host, data[i].domain,
                 data[i].expected, ret);
     }
@@ -1114,13 +1114,13 @@
 
     for (idx = ERR_BASE; idx < ERR_LAST; ++idx) {
         error = sss_strerror(idx);
-        fail_if(error == NULL, "sss_strerror returned NULL for valid index");
+        sss_ck_fail_if_msg(error == NULL, "sss_strerror returned NULL for valid index");
 
         len = strlen(error);
-        fail_if(len == 0, "sss_strerror returned empty string");
+        sss_ck_fail_if_msg(len == 0, "sss_strerror returned empty string");
 
         last_character = error[len - 1];
-        fail_if(isalpha(last_character) == 0 && last_character != ')',
+        sss_ck_fail_if_msg(isalpha(last_character) == 0 && last_character != ')',
                 "Error string [%s] must finish with alphabetic character\n",
                 error);
     }
--- a/src/tests/fail_over-tests.c
+++ b/src/tests/fail_over-tests.c
@@ -65,18 +65,18 @@
     int ret;
 
     ctx = talloc_zero(global_talloc_context, struct test_ctx);
-    fail_if(ctx == NULL, "Could not allocate memory for test context");
+    sss_ck_fail_if_msg(ctx == NULL, "Could not allocate memory for test context");
 
     ctx->ev = tevent_context_init(ctx);
     if (ctx->ev == NULL) {
         talloc_free(ctx);
-        fail("Could not init tevent context");
+        ck_abort_msg("Could not init tevent context");
     }
 
     ret = resolv_init(ctx, ctx->ev, 5, &ctx->resolv);
     if (ret != EOK) {
         talloc_free(ctx);
-        fail("Could not init resolv context");
+        ck_abort_msg("Could not init resolv context");
     }
 
     memset(&fopts, 0, sizeof(fopts));
@@ -86,7 +86,7 @@
     ctx->fo_ctx = fo_context_init(ctx, &fopts);
     if (ctx->fo_ctx == NULL) {
         talloc_free(ctx);
-        fail("Could not init fail over context");
+        ck_abort_msg("Could not init fail over context");
     }
 
     return ctx;
@@ -158,13 +158,13 @@
 
     recv_status = fo_resolve_service_recv(req, req, &server);
     talloc_free(req);
-    fail_if(recv_status != task->recv, "%s: Expected return of %d, got %d",
+    sss_ck_fail_if_msg(recv_status != task->recv, "%s: Expected return of %d, got %ld",
             task->location, task->recv, recv_status);
     if (recv_status != EOK)
         return;
     fail_if(server == NULL);
     port = fo_get_server_port(server);
-    fail_if(port != task->port, "%s: Expected port %d, got %d", task->location,
+    sss_ck_fail_if_msg(port != task->port, "%s: Expected port %d, got %d", task->location,
             task->port, port);
 
     if (task->new_port_status >= 0)
@@ -174,7 +174,7 @@
 
     if (fo_get_server_name(server) != NULL) {
         he = fo_get_server_hostent(server);
-        fail_if(he == NULL, "fo_get_server_hostent() returned NULL");
+        sss_ck_fail_if_msg(he == NULL, "fo_get_server_hostent() returned NULL");
         for (i = 0; he->addr_list[i]; i++) {
             char buf[256];
 
@@ -186,8 +186,8 @@
     if (task->new_port_status == PORT_WORKING
             && task->new_server_status == SERVER_WORKING) {
         active_server = fo_get_active_server(task->service);
-        fail_if(active_server == NULL, "Missing active server");
-        fail_if(server != active_server, "Current server is not active server");
+        sss_ck_fail_if_msg(active_server == NULL, "Missing active server");
+        sss_ck_fail_if_msg(server != active_server, "Current server is not active server");
     }
 
 }
@@ -218,7 +218,7 @@
     req = fo_resolve_service_send(test_ctx, test_ctx->ev,
                                   test_ctx->resolv,
                                   test_ctx->fo_ctx, service);
-    fail_if(req == NULL, "%s: fo_resolve_service_send() failed", location);
+    sss_ck_fail_if_msg(req == NULL, "%s: fo_resolve_service_send() failed", location);
 
     tevent_req_set_callback(req, test_resolve_service_callback, task);
     test_loop(test_ctx);
--- a/src/tests/crypto-tests.c
+++ b/src/tests/crypto-tests.c
@@ -186,7 +186,7 @@
     fail_if(cipher_text_len == 0);
 
     ret = memcmp(input_text, cipher_text, input_text_len);
-    fail_if(ret == 0, "Input and encrypted text has common prefix");
+    sss_ck_fail_if_msg(ret == 0, "Input and encrypted text has common prefix");
 
     ret = sss_decrypt(test_ctx, AES256CBC_HMAC_SHA256, key, key_len,
                       cipher_text, cipher_text_len,
@@ -195,7 +195,7 @@
     fail_if(plain_text_len != input_text_len);
 
     ret = memcmp(plain_text, input_text, input_text_len);
-    fail_if(ret != 0, "input text is not the same as de-encrypted text");
+    sss_ck_fail_if_msg(ret != 0, "input text is not the same as de-encrypted text");
 
     talloc_free(test_ctx);
 }
--- a/src/tests/sysdb_ssh-tests.c
+++ b/src/tests/sysdb_ssh-tests.c
@@ -27,6 +27,7 @@
 
 #include "config.h"
 #include "tests/common.h"
+#include "tests/common_check.h"
 #include "util/util.h"
 #include "confdb/confdb.h"
 #include "db/sysdb.h"
@@ -57,13 +58,13 @@
     /* (relative to current dir) */
     ret = mkdir(TESTS_PATH, 0775);
     if (ret == -1 && errno != EEXIST) {
-        fail("Could not create %s directory", TESTS_PATH);
+        ck_abort_msg("Could not create %s directory", TESTS_PATH);
         return EFAULT;
     }
 
     test_ctx = talloc_zero(NULL, struct sysdb_test_ctx);
     if (test_ctx == NULL) {
-        fail("Could not allocate memory for test context");
+        ck_abort_msg("Could not allocate memory for test context");
         return ENOMEM;
     }
 
@@ -72,14 +73,14 @@
      */
     test_ctx->ev = tevent_context_init(test_ctx);
     if (test_ctx->ev == NULL) {
-        fail("Could not create event context");
+        ck_abort_msg("Could not create event context");
         talloc_free(test_ctx);
         return EIO;
     }
 
     conf_db = talloc_asprintf(test_ctx, "%s/%s", TESTS_PATH, TEST_CONF_FILE);
     if (conf_db == NULL) {
-        fail("Out of memory, aborting!");
+        ck_abort_msg("Out of memory, aborting!");
         talloc_free(test_ctx);
         return ENOMEM;
     }
@@ -88,7 +89,7 @@
     /* Connect to the conf db */
     ret = confdb_init(test_ctx, &test_ctx->confdb, conf_db);
     if (ret != EOK) {
-        fail("Could not initialize connection to the confdb");
+        ck_abort_msg("Could not initialize connection to the confdb");
         talloc_free(test_ctx);
         return ret;
     }
@@ -97,7 +98,7 @@
     ret = confdb_add_param(test_ctx->confdb, true,
                            "config/sssd", "domains", val);
     if (ret != EOK) {
-        fail("Could not initialize domains placeholder");
+        ck_abort_msg("Could not initialize domains placeholder");
         talloc_free(test_ctx);
         return ret;
     }
@@ -106,7 +107,7 @@
     ret = confdb_add_param(test_ctx->confdb, true,
                            "config/domain/LOCAL", "id_provider", val);
     if (ret != EOK) {
-        fail("Could not initialize provider");
+        ck_abort_msg("Could not initialize provider");
         talloc_free(test_ctx);
         return ret;
     }
@@ -115,7 +116,7 @@
     ret = confdb_add_param(test_ctx->confdb, true,
                            "config/domain/LOCAL", "enumerate", val);
     if (ret != EOK) {
-        fail("Could not initialize LOCAL domain");
+        ck_abort_msg("Could not initialize LOCAL domain");
         talloc_free(test_ctx);
         return ret;
     }
@@ -124,7 +125,7 @@
     ret = confdb_add_param(test_ctx->confdb, true,
                            "config/domain/LOCAL", "cache_credentials", val);
     if (ret != EOK) {
-        fail("Could not initialize LOCAL domain");
+        ck_abort_msg("Could not initialize LOCAL domain");
         talloc_free(test_ctx);
         return ret;
     }
@@ -132,7 +133,7 @@
     ret = sssd_domain_init(test_ctx, test_ctx->confdb, "local",
                            TESTS_PATH, &test_ctx->domain);
     if (ret != EOK) {
-        fail("Could not initialize connection to the sysdb (%d)", ret);
+        ck_abort_msg("Could not initialize connection to the sysdb (%d)", ret);
         talloc_free(test_ctx);
         return ret;
     }
@@ -207,13 +208,13 @@
 
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
     data = talloc_zero(test_ctx, struct test_data);
     if (data == NULL) {
-        fail("Out of memory!");
+        ck_abort_msg("Out of memory!");
         talloc_free(test_ctx);
         return;
     }
@@ -222,21 +223,21 @@
     data->ev = test_ctx->ev;
     data->hostname = talloc_strdup(test_ctx, TEST_HOSTNAME);
     if (data->hostname == NULL) {
-        fail("Out of memory!");
+        ck_abort_msg("Out of memory!");
         talloc_free(test_ctx);
         return;
     }
 
     data->attrs = sysdb_new_attrs(test_ctx);
     if (data->attrs == NULL) {
-        fail("Out of memory!");
+        ck_abort_msg("Out of memory!");
         talloc_free(test_ctx);
         return;
     }
 
     ret = test_sysdb_store_ssh_host(data);
 
-    fail_if(ret != EOK, "Could not store host into database");
+    sss_ck_fail_if_msg(ret != EOK, "Could not store host into database");
     talloc_free(test_ctx);
 }
 END_TEST
@@ -249,13 +250,13 @@
 
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
     data = talloc_zero(test_ctx, struct test_data);
     if (data == NULL) {
-        fail("Out of memory!");
+        ck_abort_msg("Out of memory!");
         return;
     }
 
@@ -263,14 +264,14 @@
     data->ev = test_ctx->ev;
     data->hostname = talloc_strdup(test_ctx, TEST_HOSTNAME);
     if (data->hostname == NULL) {
-        fail("Out of memory!");
+        ck_abort_msg("Out of memory!");
         talloc_free(test_ctx);
         return;
     }
 
     ret = test_sysdb_delete_ssh_host(data);
 
-    fail_if(ret != EOK, "Could not delete host from database");
+    sss_ck_fail_if_msg(ret != EOK, "Could not delete host from database");
     talloc_free(test_ctx);
 }
 END_TEST
@@ -283,13 +284,13 @@
 
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up the test");
+        ck_abort_msg("Could not set up the test");
         return;
     }
 
     data = talloc_zero(test_ctx, struct test_data);
     if (data == NULL) {
-        fail("Out of memory!");
+        ck_abort_msg("Out of memory!");
         talloc_free(test_ctx);
         return;
     }
@@ -298,14 +299,14 @@
     data->ev = test_ctx->ev;
     data->hostname = talloc_strdup(test_ctx, "nonexistent_host");
     if (data->hostname == NULL) {
-        fail("Out of memory!");
+        ck_abort_msg("Out of memory!");
         talloc_free(test_ctx);
         return;
     }
 
     ret = test_sysdb_delete_ssh_host(data);
 
-    fail_if(ret != EOK, "Deletion of nonexistent host returned code %d", ret);
+    sss_ck_fail_if_msg(ret != EOK, "Deletion of nonexistent host returned code %d", ret);
     talloc_free(test_ctx);
 
 }
@@ -319,13 +320,13 @@
 
     ret = setup_sysdb_tests(&test_ctx);
     if (ret != EOK) {
-        fail("Could not set up test");
+        ck_abort_msg("Could not set up test");
         return;
     }
 
     data = talloc_zero(test_ctx, struct test_data);
     if (data == NULL) {
-        fail("Out of memory!");
+        ck_abort_msg("Out of memory!");
         talloc_free(test_ctx);
         return;
     }
@@ -334,28 +335,28 @@
     data->ev = test_ctx->ev;
     data->hostname = talloc_strdup(test_ctx, TEST_HOSTNAME);
     if (data->hostname == NULL) {
-        fail("Out of memory!");
+        ck_abort_msg("Out of memory!");
         talloc_free(test_ctx);
         return;
     }
 
     data->attrs = sysdb_new_attrs(test_ctx);
     if (data->attrs == NULL) {
-        fail("Out of memory!");
+        ck_abort_msg("Out of memory!");
         talloc_free(test_ctx);
         return;
     }
 
     ret = test_sysdb_store_ssh_host(data);
     if (ret != EOK) {
-        fail("Could not store host '%s' to database", TEST_HOSTNAME);
+        ck_abort_msg("Could not store host '%s' to database", TEST_HOSTNAME);
         talloc_free(test_ctx);
         return;
     }
 
     ret = test_sysdb_get_ssh_host(data);
 
-    fail_if(ret != EOK, "Could not find host '%s'",TEST_HOSTNAME);
+    sss_ck_fail_if_msg(ret != EOK, "Could not find host '%s'",TEST_HOSTNAME);
     talloc_free(test_ctx);
 }
 END_TEST
