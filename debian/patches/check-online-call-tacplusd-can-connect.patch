--- a/src/providers/tacplus/tacplus_common.c
+++ b/src/providers/tacplus/tacplus_common.c
@@ -4,7 +4,7 @@
     TACACS+ Provider Common Functions
 
     Copyright (c) 2014-2017 Brocade Communications Systems, Inc.
-    Copyright (c) 2018-2019 AT&T Intellectual Property.
+    Copyright (c) 2018-2020 AT&T Intellectual Property.
 
     This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
@@ -39,6 +39,60 @@
     be_req_terminate(req, dp_err, error, errstr);
 }
 
+int tacplus_can_connect(void)
+{
+    DBusConnection *dconn;
+    DBusError derr;
+    DBusMessage *dmsg, *dmsg_reply = NULL;
+    DBusMessageIter iter;
+    DBusBasicValue can_connect;
+    int ret = -1;
+
+    dconn = tacplus_connect_daemon();
+    if (!dconn) {
+        DEBUG(SSSDBG_TRACE_FUNC, "Failed to connect to tacplus daemon\n");
+        return -1;
+    }
+
+    dmsg = dbus_message_new_method_call(TACPLUS_DAEMON,
+                                        TACPLUS_DAEMON_PATH,
+                                        TACPLUS_DAEMON_IFACE,
+                                        TACPLUS_DAEMON_CAN_CONNECT);
+    if(!dmsg) {
+        DEBUG(SSSDBG_OP_FAILURE,
+              "Failed to create "TACPLUS_DAEMON_CAN_CONNECT"() method call\n");
+        return -1;
+    }
+
+    dbus_error_init(&derr);
+
+    dmsg_reply = dbus_connection_send_with_reply_and_block(
+                    dconn, dmsg, TACPLUS_DAEMON_TIMEOUT_MS, &derr);
+    if((tacplus_validate_reply_msg(&derr)) < 0) {
+        DEBUG(SSSDBG_OP_FAILURE, "Failed to do TACACS+ connectivity check\n");
+        goto finish;
+    }
+
+    if (! dbus_message_iter_init(dmsg_reply, &iter))
+        goto finish;
+
+    if (dbus_message_iter_get_arg_type(&iter) == DBUS_TYPE_BOOLEAN) {
+        dbus_message_iter_get_basic(&iter, &can_connect);
+        ret = can_connect.bool_val ? 1 : 0;
+    }
+    else {
+        DEBUG(SSSDBG_TRACE_FUNC,
+              "Unexpected return type for "TACPLUS_DAEMON_CAN_CONNECT"()\n");
+    }
+
+finish:
+    dbus_message_unref(dmsg);
+    if (dmsg_reply)
+        dbus_message_unref(dmsg_reply);
+
+    return ret;
+}
+
 static DBusMessage *dbus_property_get(DBusConnection *conn,
                                       const char *destination,
                                       const char *path,
@@ -389,7 +443,7 @@
                 if (offline.bool_val)
                     be_mark_offline(ctx->be);
                 else
-                    be_mark_online_iff_offline(ctx->be);
+                    check_if_online(ctx->be);
             }
 
             dbus_message_iter_next(&dictEntryIter);
@@ -523,7 +577,7 @@
     if (offline)
         be_mark_offline(tac_glob->be);
     else
-        be_mark_online_iff_offline(tac_glob->be);
+        check_if_online(tac_glob->be);
 
     return 0;
 
--- a/src/providers/tacplus/tacplus_init.c
+++ b/src/providers/tacplus/tacplus_init.c
@@ -44,8 +44,9 @@
 
 static void tacplus_check_online(struct be_req *req)
 {
-    int offline = tacplus_get_offline();
-    be_req_terminate(req, !offline ? DP_ERR_OK : DP_ERR_OFFLINE, offline, NULL);
+    int can_connect = tacplus_can_connect();
+    be_req_terminate(req, (can_connect > 0) ? DP_ERR_OK : DP_ERR_OFFLINE,
+                     can_connect, "TACACS+ server connection check failed");
 }
 
 static void tacplus_shutdown(struct be_req *req)
--- a/src/providers/tacplus/tacplus_common.h
+++ b/src/providers/tacplus/tacplus_common.h
@@ -30,12 +30,13 @@
 #define TACACS_DEFAULT_TIMEOUT 3
 #define PORT_STR_SIZE 6
 
-#define TACPLUS_DAEMON         "net.vyatta.tacplus"
-#define TACPLUS_DAEMON_PATH    "/net/vyatta/tacplus"
-#define TACPLUS_DAEMON_IFACE   "net.vyatta.tacplus"
-#define TACPLUS_DAEMON_AUTHEN  "authen_send"
-#define TACPLUS_DAEMON_AUTHOR  "author_send"
-#define TACPLUS_DAEMON_ACCT    "account_send"
+#define TACPLUS_DAEMON              "net.vyatta.tacplus"
+#define TACPLUS_DAEMON_PATH         "/net/vyatta/tacplus"
+#define TACPLUS_DAEMON_IFACE        "net.vyatta.tacplus"
+#define TACPLUS_DAEMON_AUTHEN       "authen_send"
+#define TACPLUS_DAEMON_AUTHOR       "author_send"
+#define TACPLUS_DAEMON_ACCT         "account_send"
+#define TACPLUS_DAEMON_CAN_CONNECT  "can_connect"
 
 #define TACPLUS_DAEMON_PROP_OFFLINE "offline"
 #define TACPLUS_DAEMON_PROP_CHG_SIG "PropertiesChanged"
@@ -123,6 +124,7 @@
 int tacplus_validate_reply_msg(DBusError *);
 int tacplus_validate_basic_reply_args(DBusError *);
 
+int tacplus_can_connect(void);
 int tacplus_get_offline(void);
 
 #endif /* _TACPLUS_COMMON_H_ */
--- a/src/providers/data_provider_be.c
+++ b/src/providers/data_provider_be.c
@@ -464,8 +464,6 @@
     return ctx->offstat.offline;
 }
 
-static void check_if_online(struct be_ctx *ctx);
-
 static errno_t
 try_to_go_online(TALLOC_CTX *mem_ctx,
                  struct tevent_context *ev,
@@ -2163,7 +2161,7 @@
     return;
 }
 
-static void check_if_online(struct be_ctx *ctx)
+void check_if_online(struct be_ctx *ctx)
 {
     int ret;
     struct be_req *be_req = NULL;
--- a/src/providers/dp_backend.h
+++ b/src/providers/dp_backend.h
@@ -191,6 +191,7 @@
 bool be_is_offline(struct be_ctx *ctx);
 void be_mark_offline(struct be_ctx *ctx);
 void be_mark_online_iff_offline(struct be_ctx *ctx);
+void check_if_online(struct be_ctx *ctx);
 
 int be_add_reconnect_cb(TALLOC_CTX *mem_ctx,
                         struct be_ctx *ctx,
--- a/src/providers/tacplus/tacplus_id.c
+++ b/src/providers/tacplus/tacplus_id.c
@@ -494,14 +494,21 @@
     return ret;
 }
 
-static bool handle_request_for_user(struct be_acct_req *ar,
-                                    struct sss_domain_info *dom,
-                                    const char *name)
+/*
+ * Determines how to handle the request for a given user, indicated by
+ * return value:
+ *     1 handle request normally
+ *    -1 ignore the request (respond EOK)
+ *     0 perform a connection check only (no TACACS+ transaction)
+ */
+static int handle_request_for_user(struct be_acct_req *ar,
+                                   struct sss_domain_info *dom,
+                                   const char *name)
 {
     struct passwd *pw;
 
     if ((ar->entry_type & 0xFFF) != BE_REQ_INITGROUPS)
-        return true;
+        return 1;
 
     /*
      * We are likely to receive an initgroups request for local users
@@ -515,12 +522,29 @@
      */
     pw = getpwnam(name);
     if (pw && OUT_OF_ID_RANGE(pw->pw_uid, dom->id_min, dom->id_max)) {
-        DEBUG(SSSDBG_TRACE_FUNC, "User %s (UID %u) already exists outside "
-              "this domain - ignoring initgroups request.\n", name, pw->pw_uid);
-        return false;
+
+        /*
+         * If the user exists and is a system user, we ignore it.
+         */
+        if (pw->pw_uid < 1000) {
+            DEBUG(SSSDBG_TRACE_FUNC, "User %s (UID %u) already exists outside "
+                  "this domain - ignoring initgroups request.\n", name, pw->pw_uid);
+            return -1;
+        }
+
+        /*
+         * Otherwise we perform a "connection check" rather than a TACACS+
+         * transaction; if the check fails then we take ourselves offline.
+         * This allows local user fallback to work when TACACS+ is unavailable
+         * simply by attempting to log in as a local user, but avoids performing
+         * a TACACS+ transaction which will likely fail.
+         */
+        DEBUG(SSSDBG_TRACE_FUNC, "Doing TACACS+ connection check for non-domain "
+              "user %s (UID %u)\n", name, pw->pw_uid);
+        return 0;
     }
 
-    return true;
+    return 1;
 }
 
 void tacplus_account_info_handler(struct be_req *breq)
@@ -549,16 +573,23 @@
     case BE_REQ_INITGROUPS:
         switch (ar->filter_type) {
         case BE_FILTER_NAME:
-            if (handle_request_for_user(ar, domain, ar->filter_value))
+            ret = handle_request_for_user(ar, domain, ar->filter_value);
+            if (ret < 0)
+                goto done_ok;
+            else if (ret)
                 ret = get_pw_name(breq, ctx, domain, ar->filter_value);
-            else
-                ret = EOK;
+            else {
+                if (tacplus_can_connect() <= 0)
+                    ret = ENXIO;
+            }
 
             if (ret) {
                 if (ret == ENXIO || ret == EIO || ret == EFAULT) {
                     DEBUG(SSSDBG_TRACE_FUNC,
                           "get_pw_name returned UNAVAIL error, going offline!\n");
                     be_mark_offline(be_ctx);
+                    return tacplus_reply(breq, DP_ERR_OFFLINE, ret,
+                                         "Going offline");
                 }
                 return tacplus_reply(breq, DP_ERR_FATAL, ret,
                         "TACACS+ id provider lookup failed");
@@ -587,5 +618,7 @@
         tacplus_reply(breq, DP_ERR_FATAL, ret, NULL);
         return;
     }
+
+done_ok:
     tacplus_reply(breq, DP_ERR_OK, EOK, NULL);
 }
